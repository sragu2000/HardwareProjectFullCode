
FullCode.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000192c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000146  00800060  0000192c  000019c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000011e  008001a6  008001a6  00001b06  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001b06  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001b64  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000170  00000000  00000000  00001ba0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002246  00000000  00000000  00001d10  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000873  00000000  00000000  00003f56  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001130  00000000  00000000  000047c9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000420  00000000  00000000  000058fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007ad  00000000  00000000  00005d1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000181f  00000000  00000000  000064c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000168  00000000  00000000  00007ce8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 c5 00 	jmp	0x18a	; 0x18a <__ctors_end>
       4:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
       8:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
       c:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      10:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      14:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      18:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      1c:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      20:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      24:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      28:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      2c:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      30:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      34:	0c 94 fa 02 	jmp	0x5f4	; 0x5f4 <__vector_13>
      38:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      3c:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      40:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      44:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      48:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      4c:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      50:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>

00000054 <__trampolines_end>:
      54:	4e 41       	sbci	r20, 0x1E	; 30
      56:	4e 49       	Address 0x00000056 is out of bounds.
.word	0xffff	; ????

00000057 <pstr_inity>:
      57:	49 4e 49 54 59                                      INITY

0000005c <pstr_inf>:
      5c:	49 4e 46                                            INF

0000005f <pwr_m10>:
      5f:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
      6f:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

00000077 <pwr_p10>:
      77:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
      87:	ca 1b 0e 5a ae c5 9d 74 00 40 7a 10 f3 5a 00 a0     ...Z...t.@z..Z..
      97:	72 4e 18 09 00 10 a5 d4 e8 00 00 e8 76 48 17 00     rN..........vH..
      a7:	00 e4 0b 54 02 00 00 ca 9a 3b 00 00 00 e1 f5 05     ...T.....;......
      b7:	00 00 80 96 98 00 00 00 40 42 0f 00 00 00 a0 86     ........@B......
      c7:	01 00 00 00 10 27 00 00 00 00 e8 03 00 00 00 00     .....'..........
      d7:	64 00 00 00 00 00 0a 00 00 00 00 00 01 00 00 00     d...............
      e7:	00 00 2c 76 d8 88 dc 67 4f 08 23 df c1 df ae 59     ..,v...gO.#....Y
      f7:	e1 b1 b7 96 e5 e3 e4 53 c6 3a e6 51 99 76 96 e8     .......S.:.Q.v..
     107:	e6 c2 84 26 eb 89 8c 9b 62 ed 40 7c 6f fc ef bc     ...&....b.@|o...
     117:	9c 9f 40 f2 ba a5 6f a5 f4 90 05 5a 2a f7 5c 93     ..@...o....Z*.\.
     127:	6b 6c f9 67 6d c1 1b fc e0 e4 0d 47 fe f5 20 e6     kl.gm......G.. .
     137:	b5 00 d0 ed 90 2e 03 00 94 35 77 05 00 80 84 1e     .........5w.....
     147:	08 00 00 20 4e 0a 00 00 00 c8 0c 33 33 33 33 0f     ... N......3333.
     157:	98 6e 12 83 11 41 ef 8d 21 14 89 3b e6 55 16 cf     .n...A..!..;.U..
     167:	fe e6 db 18 d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb     ......K8..|.....
     177:	e4 24 20 32 84 72 5e 22 81 00 c9 f1 24 ec a1 e5     .$ 2.r^"....$...
     187:	3d 27 00                                            ='.

0000018a <__ctors_end>:
     18a:	11 24       	eor	r1, r1
     18c:	1f be       	out	0x3f, r1	; 63
     18e:	cf e5       	ldi	r28, 0x5F	; 95
     190:	d8 e0       	ldi	r29, 0x08	; 8
     192:	de bf       	out	0x3e, r29	; 62
     194:	cd bf       	out	0x3d, r28	; 61

00000196 <__do_copy_data>:
     196:	11 e0       	ldi	r17, 0x01	; 1
     198:	a0 e6       	ldi	r26, 0x60	; 96
     19a:	b0 e0       	ldi	r27, 0x00	; 0
     19c:	ec e2       	ldi	r30, 0x2C	; 44
     19e:	f9 e1       	ldi	r31, 0x19	; 25
     1a0:	02 c0       	rjmp	.+4      	; 0x1a6 <__do_copy_data+0x10>
     1a2:	05 90       	lpm	r0, Z+
     1a4:	0d 92       	st	X+, r0
     1a6:	a6 3a       	cpi	r26, 0xA6	; 166
     1a8:	b1 07       	cpc	r27, r17
     1aa:	d9 f7       	brne	.-10     	; 0x1a2 <__do_copy_data+0xc>

000001ac <__do_clear_bss>:
     1ac:	22 e0       	ldi	r18, 0x02	; 2
     1ae:	a6 ea       	ldi	r26, 0xA6	; 166
     1b0:	b1 e0       	ldi	r27, 0x01	; 1
     1b2:	01 c0       	rjmp	.+2      	; 0x1b6 <.do_clear_bss_start>

000001b4 <.do_clear_bss_loop>:
     1b4:	1d 92       	st	X+, r1

000001b6 <.do_clear_bss_start>:
     1b6:	a4 3c       	cpi	r26, 0xC4	; 196
     1b8:	b2 07       	cpc	r27, r18
     1ba:	e1 f7       	brne	.-8      	; 0x1b4 <.do_clear_bss_loop>
     1bc:	0e 94 13 05 	call	0xa26	; 0xa26 <main>
     1c0:	0c 94 94 0c 	jmp	0x1928	; 0x1928 <_exit>

000001c4 <__bad_interrupt>:
     1c4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001c8 <I2C_Init>:
     1c8:	11 b8       	out	0x01, r1	; 1
     1ca:	80 e2       	ldi	r24, 0x20	; 32
     1cc:	80 b9       	out	0x00, r24	; 0
     1ce:	08 95       	ret

000001d0 <LCD_Command>:
	while (str[i]!='\0')		/* Send string till null */
	{
		USART_TxChar(str[i]);
		i++;
	}
     1d0:	98 b3       	in	r25, 0x18	; 24
     1d2:	9f 70       	andi	r25, 0x0F	; 15
     1d4:	28 2f       	mov	r18, r24
     1d6:	20 7f       	andi	r18, 0xF0	; 240
     1d8:	92 2b       	or	r25, r18
     1da:	98 bb       	out	0x18, r25	; 24
     1dc:	98 b3       	in	r25, 0x18	; 24
     1de:	9e 7f       	andi	r25, 0xFE	; 254
     1e0:	98 bb       	out	0x18, r25	; 24
     1e2:	98 b3       	in	r25, 0x18	; 24
     1e4:	92 60       	ori	r25, 0x02	; 2
     1e6:	98 bb       	out	0x18, r25	; 24
     1e8:	32 e0       	ldi	r19, 0x02	; 2
     1ea:	3a 95       	dec	r19
     1ec:	f1 f7       	brne	.-4      	; 0x1ea <LCD_Command+0x1a>
     1ee:	00 c0       	rjmp	.+0      	; 0x1f0 <LCD_Command+0x20>
     1f0:	98 b3       	in	r25, 0x18	; 24
     1f2:	9d 7f       	andi	r25, 0xFD	; 253
     1f4:	98 bb       	out	0x18, r25	; 24
     1f6:	ef e8       	ldi	r30, 0x8F	; 143
     1f8:	f1 e0       	ldi	r31, 0x01	; 1
     1fa:	31 97       	sbiw	r30, 0x01	; 1
     1fc:	f1 f7       	brne	.-4      	; 0x1fa <LCD_Command+0x2a>
     1fe:	00 c0       	rjmp	.+0      	; 0x200 <LCD_Command+0x30>
     200:	00 00       	nop
     202:	28 b3       	in	r18, 0x18	; 24
     204:	f0 e1       	ldi	r31, 0x10	; 16
     206:	8f 9f       	mul	r24, r31
     208:	c0 01       	movw	r24, r0
     20a:	11 24       	eor	r1, r1
     20c:	92 2f       	mov	r25, r18
     20e:	9f 70       	andi	r25, 0x0F	; 15
     210:	89 2b       	or	r24, r25
     212:	88 bb       	out	0x18, r24	; 24
     214:	88 b3       	in	r24, 0x18	; 24
     216:	82 60       	ori	r24, 0x02	; 2
     218:	88 bb       	out	0x18, r24	; 24
     21a:	32 e0       	ldi	r19, 0x02	; 2
     21c:	3a 95       	dec	r19
     21e:	f1 f7       	brne	.-4      	; 0x21c <LCD_Command+0x4c>
     220:	00 c0       	rjmp	.+0      	; 0x222 <LCD_Command+0x52>
     222:	88 b3       	in	r24, 0x18	; 24
     224:	8d 7f       	andi	r24, 0xFD	; 253
     226:	88 bb       	out	0x18, r24	; 24
     228:	8f e9       	ldi	r24, 0x9F	; 159
     22a:	9f e0       	ldi	r25, 0x0F	; 15
     22c:	01 97       	sbiw	r24, 0x01	; 1
     22e:	f1 f7       	brne	.-4      	; 0x22c <LCD_Command+0x5c>
     230:	00 c0       	rjmp	.+0      	; 0x232 <LCD_Command+0x62>
     232:	00 00       	nop
     234:	08 95       	ret

00000236 <LCD_Char>:
     236:	98 b3       	in	r25, 0x18	; 24
     238:	9f 70       	andi	r25, 0x0F	; 15
     23a:	28 2f       	mov	r18, r24
     23c:	20 7f       	andi	r18, 0xF0	; 240
     23e:	92 2b       	or	r25, r18
     240:	98 bb       	out	0x18, r25	; 24
     242:	98 b3       	in	r25, 0x18	; 24
     244:	91 60       	ori	r25, 0x01	; 1
     246:	98 bb       	out	0x18, r25	; 24
     248:	98 b3       	in	r25, 0x18	; 24
     24a:	92 60       	ori	r25, 0x02	; 2
     24c:	98 bb       	out	0x18, r25	; 24
     24e:	32 e0       	ldi	r19, 0x02	; 2
     250:	3a 95       	dec	r19
     252:	f1 f7       	brne	.-4      	; 0x250 <LCD_Char+0x1a>
     254:	00 c0       	rjmp	.+0      	; 0x256 <LCD_Char+0x20>
     256:	98 b3       	in	r25, 0x18	; 24
     258:	9d 7f       	andi	r25, 0xFD	; 253
     25a:	98 bb       	out	0x18, r25	; 24
     25c:	ef e8       	ldi	r30, 0x8F	; 143
     25e:	f1 e0       	ldi	r31, 0x01	; 1
     260:	31 97       	sbiw	r30, 0x01	; 1
     262:	f1 f7       	brne	.-4      	; 0x260 <LCD_Char+0x2a>
     264:	00 c0       	rjmp	.+0      	; 0x266 <LCD_Char+0x30>
     266:	00 00       	nop
     268:	28 b3       	in	r18, 0x18	; 24
     26a:	f0 e1       	ldi	r31, 0x10	; 16
     26c:	8f 9f       	mul	r24, r31
     26e:	c0 01       	movw	r24, r0
     270:	11 24       	eor	r1, r1
     272:	92 2f       	mov	r25, r18
     274:	9f 70       	andi	r25, 0x0F	; 15
     276:	89 2b       	or	r24, r25
     278:	88 bb       	out	0x18, r24	; 24
     27a:	88 b3       	in	r24, 0x18	; 24
     27c:	82 60       	ori	r24, 0x02	; 2
     27e:	88 bb       	out	0x18, r24	; 24
     280:	32 e0       	ldi	r19, 0x02	; 2
     282:	3a 95       	dec	r19
     284:	f1 f7       	brne	.-4      	; 0x282 <LCD_Char+0x4c>
     286:	00 c0       	rjmp	.+0      	; 0x288 <LCD_Char+0x52>
     288:	88 b3       	in	r24, 0x18	; 24
     28a:	8d 7f       	andi	r24, 0xFD	; 253
     28c:	88 bb       	out	0x18, r24	; 24
     28e:	8f e9       	ldi	r24, 0x9F	; 159
     290:	9f e0       	ldi	r25, 0x0F	; 15
     292:	01 97       	sbiw	r24, 0x01	; 1
     294:	f1 f7       	brne	.-4      	; 0x292 <LCD_Char+0x5c>
     296:	00 c0       	rjmp	.+0      	; 0x298 <LCD_Char+0x62>
     298:	00 00       	nop
     29a:	08 95       	ret

0000029c <LCD_Init>:
     29c:	8f ef       	ldi	r24, 0xFF	; 255
     29e:	87 bb       	out	0x17, r24	; 23
     2a0:	8f e3       	ldi	r24, 0x3F	; 63
     2a2:	9c e9       	ldi	r25, 0x9C	; 156
     2a4:	01 97       	sbiw	r24, 0x01	; 1
     2a6:	f1 f7       	brne	.-4      	; 0x2a4 <LCD_Init+0x8>
     2a8:	00 c0       	rjmp	.+0      	; 0x2aa <LCD_Init+0xe>
     2aa:	00 00       	nop
     2ac:	83 e3       	ldi	r24, 0x33	; 51
     2ae:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <LCD_Command>
     2b2:	82 e3       	ldi	r24, 0x32	; 50
     2b4:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <LCD_Command>
     2b8:	88 e2       	ldi	r24, 0x28	; 40
     2ba:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <LCD_Command>
     2be:	8c e0       	ldi	r24, 0x0C	; 12
     2c0:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <LCD_Command>
     2c4:	86 e0       	ldi	r24, 0x06	; 6
     2c6:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <LCD_Command>
     2ca:	81 e0       	ldi	r24, 0x01	; 1
     2cc:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <LCD_Command>
     2d0:	8f e9       	ldi	r24, 0x9F	; 159
     2d2:	9f e0       	ldi	r25, 0x0F	; 15
     2d4:	01 97       	sbiw	r24, 0x01	; 1
     2d6:	f1 f7       	brne	.-4      	; 0x2d4 <LCD_Init+0x38>
     2d8:	00 c0       	rjmp	.+0      	; 0x2da <LCD_Init+0x3e>
     2da:	00 00       	nop
     2dc:	80 e8       	ldi	r24, 0x80	; 128
     2de:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <LCD_Command>
     2e2:	08 95       	ret

000002e4 <LCD_String>:
     2e4:	0f 93       	push	r16
     2e6:	1f 93       	push	r17
     2e8:	cf 93       	push	r28
     2ea:	df 93       	push	r29
     2ec:	8c 01       	movw	r16, r24
     2ee:	c0 e0       	ldi	r28, 0x00	; 0
     2f0:	d0 e0       	ldi	r29, 0x00	; 0
     2f2:	03 c0       	rjmp	.+6      	; 0x2fa <LCD_String+0x16>
     2f4:	0e 94 1b 01 	call	0x236	; 0x236 <LCD_Char>
     2f8:	21 96       	adiw	r28, 0x01	; 1
     2fa:	f8 01       	movw	r30, r16
     2fc:	ec 0f       	add	r30, r28
     2fe:	fd 1f       	adc	r31, r29
     300:	80 81       	ld	r24, Z
     302:	81 11       	cpse	r24, r1
     304:	f7 cf       	rjmp	.-18     	; 0x2f4 <LCD_String+0x10>
     306:	df 91       	pop	r29
     308:	cf 91       	pop	r28
     30a:	1f 91       	pop	r17
     30c:	0f 91       	pop	r16
     30e:	08 95       	ret

00000310 <LCD_String_xy>:
     310:	cf 93       	push	r28
     312:	df 93       	push	r29
     314:	ea 01       	movw	r28, r20
     316:	81 11       	cpse	r24, r1
     318:	08 c0       	rjmp	.+16     	; 0x32a <LCD_String_xy+0x1a>
     31a:	60 31       	cpi	r22, 0x10	; 16
     31c:	30 f4       	brcc	.+12     	; 0x32a <LCD_String_xy+0x1a>
     31e:	86 2f       	mov	r24, r22
     320:	8f 70       	andi	r24, 0x0F	; 15
     322:	80 68       	ori	r24, 0x80	; 128
     324:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <LCD_Command>
     328:	09 c0       	rjmp	.+18     	; 0x33c <LCD_String_xy+0x2c>
     32a:	81 30       	cpi	r24, 0x01	; 1
     32c:	39 f4       	brne	.+14     	; 0x33c <LCD_String_xy+0x2c>
     32e:	60 31       	cpi	r22, 0x10	; 16
     330:	28 f4       	brcc	.+10     	; 0x33c <LCD_String_xy+0x2c>
     332:	86 2f       	mov	r24, r22
     334:	8f 70       	andi	r24, 0x0F	; 15
     336:	80 6c       	ori	r24, 0xC0	; 192
     338:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <LCD_Command>
     33c:	ce 01       	movw	r24, r28
     33e:	0e 94 72 01 	call	0x2e4	; 0x2e4 <LCD_String>
     342:	df 91       	pop	r29
     344:	cf 91       	pop	r28
     346:	08 95       	ret

00000348 <LCD_Clear>:
     348:	81 e0       	ldi	r24, 0x01	; 1
     34a:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <LCD_Command>
     34e:	8f e9       	ldi	r24, 0x9F	; 159
     350:	9f e0       	ldi	r25, 0x0F	; 15
     352:	01 97       	sbiw	r24, 0x01	; 1
     354:	f1 f7       	brne	.-4      	; 0x352 <LCD_Clear+0xa>
     356:	00 c0       	rjmp	.+0      	; 0x358 <LCD_Clear+0x10>
     358:	00 00       	nop
     35a:	80 e8       	ldi	r24, 0x80	; 128
     35c:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <LCD_Command>
     360:	08 95       	ret

00000362 <ADC_Init>:
     362:	1a ba       	out	0x1a, r1	; 26
     364:	87 e8       	ldi	r24, 0x87	; 135
     366:	86 b9       	out	0x06, r24	; 6
     368:	80 e4       	ldi	r24, 0x40	; 64
     36a:	87 b9       	out	0x07, r24	; 7
     36c:	08 95       	ret

0000036e <ADC_Read>:
     36e:	97 b1       	in	r25, 0x07	; 7
     370:	8f 70       	andi	r24, 0x0F	; 15
     372:	98 2b       	or	r25, r24
     374:	97 b9       	out	0x07, r25	; 7
     376:	86 b1       	in	r24, 0x06	; 6
     378:	80 64       	ori	r24, 0x40	; 64
     37a:	86 b9       	out	0x06, r24	; 6
     37c:	34 9b       	sbis	0x06, 4	; 6
     37e:	fe cf       	rjmp	.-4      	; 0x37c <ADC_Read+0xe>
     380:	8a e1       	ldi	r24, 0x1A	; 26
     382:	8a 95       	dec	r24
     384:	f1 f7       	brne	.-4      	; 0x382 <ADC_Read+0x14>
     386:	00 c0       	rjmp	.+0      	; 0x388 <ADC_Read+0x1a>
     388:	24 b1       	in	r18, 0x04	; 4
     38a:	85 b1       	in	r24, 0x05	; 5
     38c:	90 e0       	ldi	r25, 0x00	; 0
     38e:	98 2f       	mov	r25, r24
     390:	88 27       	eor	r24, r24
     392:	82 0f       	add	r24, r18
     394:	91 1d       	adc	r25, r1
     396:	08 95       	ret

00000398 <PWM_init>:
     398:	89 e6       	ldi	r24, 0x69	; 105
     39a:	83 bf       	out	0x33, r24	; 51
     39c:	87 b3       	in	r24, 0x17	; 23
     39e:	88 60       	ori	r24, 0x08	; 8
     3a0:	87 bb       	out	0x17, r24	; 23
     3a2:	08 95       	ret

000003a4 <USART_Init>:
     3a4:	2a b1       	in	r18, 0x0a	; 10
     3a6:	28 69       	ori	r18, 0x98	; 152
     3a8:	2a b9       	out	0x0a, r18	; 10
     3aa:	20 b5       	in	r18, 0x20	; 32
     3ac:	26 68       	ori	r18, 0x86	; 134
     3ae:	20 bd       	out	0x20, r18	; 32
     3b0:	dc 01       	movw	r26, r24
     3b2:	cb 01       	movw	r24, r22
     3b4:	88 0f       	add	r24, r24
     3b6:	99 1f       	adc	r25, r25
     3b8:	aa 1f       	adc	r26, r26
     3ba:	bb 1f       	adc	r27, r27
     3bc:	88 0f       	add	r24, r24
     3be:	99 1f       	adc	r25, r25
     3c0:	aa 1f       	adc	r26, r26
     3c2:	bb 1f       	adc	r27, r27
     3c4:	9c 01       	movw	r18, r24
     3c6:	ad 01       	movw	r20, r26
     3c8:	22 0f       	add	r18, r18
     3ca:	33 1f       	adc	r19, r19
     3cc:	44 1f       	adc	r20, r20
     3ce:	55 1f       	adc	r21, r21
     3d0:	22 0f       	add	r18, r18
     3d2:	33 1f       	adc	r19, r19
     3d4:	44 1f       	adc	r20, r20
     3d6:	55 1f       	adc	r21, r21
     3d8:	60 e0       	ldi	r22, 0x00	; 0
     3da:	72 e1       	ldi	r23, 0x12	; 18
     3dc:	8a e7       	ldi	r24, 0x7A	; 122
     3de:	90 e0       	ldi	r25, 0x00	; 0
     3e0:	0e 94 4e 08 	call	0x109c	; 0x109c <__udivmodsi4>
     3e4:	8f ef       	ldi	r24, 0xFF	; 255
     3e6:	82 0f       	add	r24, r18
     3e8:	89 b9       	out	0x09, r24	; 9
     3ea:	da 01       	movw	r26, r20
     3ec:	c9 01       	movw	r24, r18
     3ee:	01 97       	sbiw	r24, 0x01	; 1
     3f0:	a1 09       	sbc	r26, r1
     3f2:	b1 09       	sbc	r27, r1
     3f4:	89 2f       	mov	r24, r25
     3f6:	9a 2f       	mov	r25, r26
     3f8:	ab 2f       	mov	r26, r27
     3fa:	bb 27       	eor	r27, r27
     3fc:	80 bd       	out	0x20, r24	; 32
     3fe:	08 95       	ret

00000400 <USART_TxChar>:
     400:	5d 9b       	sbis	0x0b, 5	; 11
     402:	fe cf       	rjmp	.-4      	; 0x400 <USART_TxChar>
     404:	8c b9       	out	0x0c, r24	; 12
     406:	08 95       	ret

00000408 <get_altitude>:
	sei(); //It is a macro that executes an assembler instruction to enable interrupts.

}

void get_altitude(uint16_t alt_pointer){  //unsigned 16-bit integer - integers between 0 and 65,535
	cli(); //Command Line Interface - CLIs accept as input commands that are entered by keyboard
     408:	f8 94       	cli
	uint8_t alt_index;  //unsigned 8-bit integer- integer has a range of 0 to 255
	uint8_t index = alt_pointer+1;
     40a:	8f 5f       	subi	r24, 0xFF	; 255
	alt_index=0;
     40c:	90 e0       	ldi	r25, 0x00	; 0
	/* parse Altitude in GGA string stored in buffer */
	for( ; GGA_Buffer[index]!=','; index++){
     40e:	07 c0       	rjmp	.+14     	; 0x41e <get_altitude+0x16>
		Altitude_Buffer[alt_index]= GGA_Buffer[index];
     410:	e9 2f       	mov	r30, r25
     412:	f0 e0       	ldi	r31, 0x00	; 0
     414:	e6 54       	subi	r30, 0x46	; 70
     416:	fd 4f       	sbci	r31, 0xFD	; 253
     418:	20 83       	st	Z, r18
		alt_index++;
     41a:	9f 5f       	subi	r25, 0xFF	; 255
	cli(); //Command Line Interface - CLIs accept as input commands that are entered by keyboard
	uint8_t alt_index;  //unsigned 8-bit integer- integer has a range of 0 to 255
	uint8_t index = alt_pointer+1;
	alt_index=0;
	/* parse Altitude in GGA string stored in buffer */
	for( ; GGA_Buffer[index]!=','; index++){
     41c:	8f 5f       	subi	r24, 0xFF	; 255
     41e:	48 2f       	mov	r20, r24
     420:	50 e0       	ldi	r21, 0x00	; 0
     422:	fa 01       	movw	r30, r20
     424:	e5 55       	subi	r30, 0x55	; 85
     426:	fe 4f       	sbci	r31, 0xFE	; 254
     428:	20 81       	ld	r18, Z
     42a:	2c 32       	cpi	r18, 0x2C	; 44
     42c:	89 f7       	brne	.-30     	; 0x410 <get_altitude+0x8>
		Altitude_Buffer[alt_index]= GGA_Buffer[index];
		alt_index++;
	}
	
	Altitude_Buffer[alt_index]   = GGA_Buffer[index+1];
     42e:	e9 2f       	mov	r30, r25
     430:	f0 e0       	ldi	r31, 0x00	; 0
     432:	da 01       	movw	r26, r20
     434:	a4 55       	subi	r26, 0x54	; 84
     436:	be 4f       	sbci	r27, 0xFE	; 254
     438:	8c 91       	ld	r24, X
     43a:	e6 54       	subi	r30, 0x46	; 70
     43c:	fd 4f       	sbci	r31, 0xFD	; 253
     43e:	80 83       	st	Z, r24
	sei();//It is a macro that executes an assembler instruction to enable interrupts.
     440:	78 94       	sei
     442:	08 95       	ret

00000444 <convert_to_degrees_lat>:
}


void convert_to_degrees_lat(char *raw){
     444:	8f 92       	push	r8
     446:	9f 92       	push	r9
     448:	af 92       	push	r10
     44a:	bf 92       	push	r11
     44c:	cf 92       	push	r12
     44e:	df 92       	push	r13
     450:	ef 92       	push	r14
     452:	ff 92       	push	r15
     454:	0f 93       	push	r16
     456:	1f 93       	push	r17
	float decimal_value,temp;
	
	int32_t degrees;
	
	float position;
	value = atof(raw); /* convert string into float for conversion */
     458:	0e 94 90 08 	call	0x1120	; 0x1120 <atof>
	
	/* convert raw latitude/longitude into degree format */
	decimal_value = (value/100);
     45c:	20 e0       	ldi	r18, 0x00	; 0
     45e:	30 e0       	ldi	r19, 0x00	; 0
     460:	48 ec       	ldi	r20, 0xC8	; 200
     462:	52 e4       	ldi	r21, 0x42	; 66
     464:	0e 94 87 06 	call	0xd0e	; 0xd0e <__divsf3>
     468:	6b 01       	movw	r12, r22
     46a:	7c 01       	movw	r14, r24
	degrees = (int)(decimal_value);
     46c:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <__fixsfsi>
	temp = (decimal_value - (int)decimal_value)/0.6;
     470:	07 2e       	mov	r0, r23
     472:	00 0c       	add	r0, r0
     474:	88 0b       	sbc	r24, r24
     476:	99 0b       	sbc	r25, r25
     478:	0e 94 31 07 	call	0xe62	; 0xe62 <__floatsisf>
     47c:	4b 01       	movw	r8, r22
     47e:	5c 01       	movw	r10, r24
     480:	9b 01       	movw	r18, r22
     482:	ac 01       	movw	r20, r24
     484:	c7 01       	movw	r24, r14
     486:	b6 01       	movw	r22, r12
     488:	0e 94 15 06 	call	0xc2a	; 0xc2a <__subsf3>
     48c:	2a e9       	ldi	r18, 0x9A	; 154
     48e:	39 e9       	ldi	r19, 0x99	; 153
     490:	49 e1       	ldi	r20, 0x19	; 25
     492:	5f e3       	ldi	r21, 0x3F	; 63
     494:	0e 94 87 06 	call	0xd0e	; 0xd0e <__divsf3>
     498:	9b 01       	movw	r18, r22
     49a:	ac 01       	movw	r20, r24
	position = (float)degrees + temp;
     49c:	c5 01       	movw	r24, r10
     49e:	b4 01       	movw	r22, r8
     4a0:	0e 94 16 06 	call	0xc2c	; 0xc2c <__addsf3>
	
	dtostrf(position, 6, 4, lat_degrees_buffer); /* dtostrf is a function that convert float value into string.Here the position is a float value and it convert as a string degree buffer variable*/
     4a4:	06 ea       	ldi	r16, 0xA6	; 166
     4a6:	12 e0       	ldi	r17, 0x02	; 2
     4a8:	24 e0       	ldi	r18, 0x04	; 4
     4aa:	46 e0       	ldi	r20, 0x06	; 6
     4ac:	0e 94 70 08 	call	0x10e0	; 0x10e0 <dtostrf>
}
     4b0:	1f 91       	pop	r17
     4b2:	0f 91       	pop	r16
     4b4:	ff 90       	pop	r15
     4b6:	ef 90       	pop	r14
     4b8:	df 90       	pop	r13
     4ba:	cf 90       	pop	r12
     4bc:	bf 90       	pop	r11
     4be:	af 90       	pop	r10
     4c0:	9f 90       	pop	r9
     4c2:	8f 90       	pop	r8
     4c4:	08 95       	ret

000004c6 <get_latitude>:




void get_latitude(uint16_t lat_pointer){  //unsigned 16-bit integer - integers between 0 and 65,535
	cli(); //Command Line Interface - CLIs accept as input commands that are entered by keyboard
     4c6:	f8 94       	cli
	uint8_t lat_index; //unsigned 8-bit integer- integer has a range of 0 to 255
	uint8_t index = lat_pointer+1;//unsigned 8-bit integer- integer has a range of 0 to 255
     4c8:	8f 5f       	subi	r24, 0xFF	; 255
	lat_index=0;
     4ca:	90 e0       	ldi	r25, 0x00	; 0
	
	/* parse Latitude in GGA string stored in buffer */
	for(;GGA_Buffer[index]!=',';index++){
     4cc:	07 c0       	rjmp	.+14     	; 0x4dc <get_latitude+0x16>
		Latitude_Buffer[lat_index]= GGA_Buffer[index];
     4ce:	e9 2f       	mov	r30, r25
     4d0:	f0 e0       	ldi	r31, 0x00	; 0
     4d2:	e1 58       	subi	r30, 0x81	; 129
     4d4:	fd 4f       	sbci	r31, 0xFD	; 253
     4d6:	20 83       	st	Z, r18
		lat_index++;
     4d8:	9f 5f       	subi	r25, 0xFF	; 255
	uint8_t lat_index; //unsigned 8-bit integer- integer has a range of 0 to 255
	uint8_t index = lat_pointer+1;//unsigned 8-bit integer- integer has a range of 0 to 255
	lat_index=0;
	
	/* parse Latitude in GGA string stored in buffer */
	for(;GGA_Buffer[index]!=',';index++){
     4da:	8f 5f       	subi	r24, 0xFF	; 255
     4dc:	e8 2f       	mov	r30, r24
     4de:	f0 e0       	ldi	r31, 0x00	; 0
     4e0:	e5 55       	subi	r30, 0x55	; 85
     4e2:	fe 4f       	sbci	r31, 0xFE	; 254
     4e4:	20 81       	ld	r18, Z
     4e6:	2c 32       	cpi	r18, 0x2C	; 44
     4e8:	91 f7       	brne	.-28     	; 0x4ce <get_latitude+0x8>
		Latitude_Buffer[lat_index]= GGA_Buffer[index];
		lat_index++;
	}
	
	Latitude_Buffer[lat_index++] = GGA_Buffer[index++];
     4ea:	31 e0       	ldi	r19, 0x01	; 1
     4ec:	39 0f       	add	r19, r25
     4ee:	e9 2f       	mov	r30, r25
     4f0:	f0 e0       	ldi	r31, 0x00	; 0
     4f2:	8f 5f       	subi	r24, 0xFF	; 255
     4f4:	e1 58       	subi	r30, 0x81	; 129
     4f6:	fd 4f       	sbci	r31, 0xFD	; 253
     4f8:	20 83       	st	Z, r18
	Latitude_Buffer[lat_index]= GGA_Buffer[index];		/* get direction */
     4fa:	23 2f       	mov	r18, r19
     4fc:	30 e0       	ldi	r19, 0x00	; 0
     4fe:	e8 2f       	mov	r30, r24
     500:	f0 e0       	ldi	r31, 0x00	; 0
     502:	e5 55       	subi	r30, 0x55	; 85
     504:	fe 4f       	sbci	r31, 0xFE	; 254
     506:	80 81       	ld	r24, Z
     508:	f9 01       	movw	r30, r18
     50a:	e1 58       	subi	r30, 0x81	; 129
     50c:	fd 4f       	sbci	r31, 0xFD	; 253
     50e:	80 83       	st	Z, r24
	convert_to_degrees_lat(Latitude_Buffer);   // convert raw latitude into degree format and pass that value as string
     510:	8f e7       	ldi	r24, 0x7F	; 127
     512:	92 e0       	ldi	r25, 0x02	; 2
     514:	0e 94 22 02 	call	0x444	; 0x444 <convert_to_degrees_lat>
	sei(); //It is a macro that executes an assembler instruction to enable interrupts.
     518:	78 94       	sei
     51a:	08 95       	ret

0000051c <convert_to_degrees_long>:
	position = (float)degrees + temp;
	
	dtostrf(position, 6, 4, lat_degrees_buffer); /* dtostrf is a function that convert float value into string.Here the position is a float value and it convert as a string degree buffer variable*/
}

void convert_to_degrees_long(char *raw){
     51c:	8f 92       	push	r8
     51e:	9f 92       	push	r9
     520:	af 92       	push	r10
     522:	bf 92       	push	r11
     524:	cf 92       	push	r12
     526:	df 92       	push	r13
     528:	ef 92       	push	r14
     52a:	ff 92       	push	r15
     52c:	0f 93       	push	r16
     52e:	1f 93       	push	r17
	float decimal_value,temp;
	
	int32_t degrees;
	
	float position;
	value = atof(raw); /* convert string into float for conversion */
     530:	0e 94 90 08 	call	0x1120	; 0x1120 <atof>
	
	/* convert raw latitude/longitude into degree format */
	decimal_value = (value/100);
     534:	20 e0       	ldi	r18, 0x00	; 0
     536:	30 e0       	ldi	r19, 0x00	; 0
     538:	48 ec       	ldi	r20, 0xC8	; 200
     53a:	52 e4       	ldi	r21, 0x42	; 66
     53c:	0e 94 87 06 	call	0xd0e	; 0xd0e <__divsf3>
     540:	6b 01       	movw	r12, r22
     542:	7c 01       	movw	r14, r24
	degrees = (int)(decimal_value);
     544:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <__fixsfsi>
	temp = (decimal_value - (int)decimal_value)/0.6;
     548:	07 2e       	mov	r0, r23
     54a:	00 0c       	add	r0, r0
     54c:	88 0b       	sbc	r24, r24
     54e:	99 0b       	sbc	r25, r25
     550:	0e 94 31 07 	call	0xe62	; 0xe62 <__floatsisf>
     554:	4b 01       	movw	r8, r22
     556:	5c 01       	movw	r10, r24
     558:	9b 01       	movw	r18, r22
     55a:	ac 01       	movw	r20, r24
     55c:	c7 01       	movw	r24, r14
     55e:	b6 01       	movw	r22, r12
     560:	0e 94 15 06 	call	0xc2a	; 0xc2a <__subsf3>
     564:	2a e9       	ldi	r18, 0x9A	; 154
     566:	39 e9       	ldi	r19, 0x99	; 153
     568:	49 e1       	ldi	r20, 0x19	; 25
     56a:	5f e3       	ldi	r21, 0x3F	; 63
     56c:	0e 94 87 06 	call	0xd0e	; 0xd0e <__divsf3>
     570:	9b 01       	movw	r18, r22
     572:	ac 01       	movw	r20, r24
	position = (float)degrees + temp;
     574:	c5 01       	movw	r24, r10
     576:	b4 01       	movw	r22, r8
     578:	0e 94 16 06 	call	0xc2c	; 0xc2c <__addsf3>
	
	dtostrf(position, 6, 4, long_degrees_buffer); /* dtostrf is a function that convert float value into string.Here the position is a float value and it convert as a string degree buffer variable*/
     57c:	0d e4       	ldi	r16, 0x4D	; 77
     57e:	12 e0       	ldi	r17, 0x02	; 2
     580:	24 e0       	ldi	r18, 0x04	; 4
     582:	46 e0       	ldi	r20, 0x06	; 6
     584:	0e 94 70 08 	call	0x10e0	; 0x10e0 <dtostrf>
}
     588:	1f 91       	pop	r17
     58a:	0f 91       	pop	r16
     58c:	ff 90       	pop	r15
     58e:	ef 90       	pop	r14
     590:	df 90       	pop	r13
     592:	cf 90       	pop	r12
     594:	bf 90       	pop	r11
     596:	af 90       	pop	r10
     598:	9f 90       	pop	r9
     59a:	8f 90       	pop	r8
     59c:	08 95       	ret

0000059e <get_longitude>:
	convert_to_degrees_lat(Latitude_Buffer);   // convert raw latitude into degree format and pass that value as string
	sei(); //It is a macro that executes an assembler instruction to enable interrupts.
}

void get_longitude(uint16_t long_pointer){
	cli(); //Command Line Interface - CLIs accept as input commands that are entered by keyboard
     59e:	f8 94       	cli
	uint8_t long_index;  //unsigned 8-bit integer- integer has a range of 0 to 255
	uint8_t index = long_pointer+1;
     5a0:	8f 5f       	subi	r24, 0xFF	; 255
	long_index=0;
     5a2:	90 e0       	ldi	r25, 0x00	; 0
	
	/* parse Longitude in GGA string stored in buffer */
	for( ; GGA_Buffer[index]!=','; index++){
     5a4:	07 c0       	rjmp	.+14     	; 0x5b4 <get_longitude+0x16>
		Longitude_Buffer[long_index]= GGA_Buffer[index];
     5a6:	e9 2f       	mov	r30, r25
     5a8:	f0 e0       	ldi	r31, 0x00	; 0
     5aa:	ef 59       	subi	r30, 0x9F	; 159
     5ac:	fd 4f       	sbci	r31, 0xFD	; 253
     5ae:	20 83       	st	Z, r18
		long_index++;
     5b0:	9f 5f       	subi	r25, 0xFF	; 255
	uint8_t long_index;  //unsigned 8-bit integer- integer has a range of 0 to 255
	uint8_t index = long_pointer+1;
	long_index=0;
	
	/* parse Longitude in GGA string stored in buffer */
	for( ; GGA_Buffer[index]!=','; index++){
     5b2:	8f 5f       	subi	r24, 0xFF	; 255
     5b4:	e8 2f       	mov	r30, r24
     5b6:	f0 e0       	ldi	r31, 0x00	; 0
     5b8:	e5 55       	subi	r30, 0x55	; 85
     5ba:	fe 4f       	sbci	r31, 0xFE	; 254
     5bc:	20 81       	ld	r18, Z
     5be:	2c 32       	cpi	r18, 0x2C	; 44
     5c0:	91 f7       	brne	.-28     	; 0x5a6 <get_longitude+0x8>
		Longitude_Buffer[long_index]= GGA_Buffer[index];
		long_index++;
	}
	
	Longitude_Buffer[long_index++] = GGA_Buffer[index++];
     5c2:	31 e0       	ldi	r19, 0x01	; 1
     5c4:	39 0f       	add	r19, r25
     5c6:	e9 2f       	mov	r30, r25
     5c8:	f0 e0       	ldi	r31, 0x00	; 0
     5ca:	8f 5f       	subi	r24, 0xFF	; 255
     5cc:	ef 59       	subi	r30, 0x9F	; 159
     5ce:	fd 4f       	sbci	r31, 0xFD	; 253
     5d0:	20 83       	st	Z, r18
	Longitude_Buffer[long_index]   = GGA_Buffer[index]; /* get direction */
     5d2:	23 2f       	mov	r18, r19
     5d4:	30 e0       	ldi	r19, 0x00	; 0
     5d6:	e8 2f       	mov	r30, r24
     5d8:	f0 e0       	ldi	r31, 0x00	; 0
     5da:	e5 55       	subi	r30, 0x55	; 85
     5dc:	fe 4f       	sbci	r31, 0xFE	; 254
     5de:	80 81       	ld	r24, Z
     5e0:	f9 01       	movw	r30, r18
     5e2:	ef 59       	subi	r30, 0x9F	; 159
     5e4:	fd 4f       	sbci	r31, 0xFD	; 253
     5e6:	80 83       	st	Z, r24
	convert_to_degrees_long(Longitude_Buffer); // convert raw longitude into degree format and pass that value as string
     5e8:	81 e6       	ldi	r24, 0x61	; 97
     5ea:	92 e0       	ldi	r25, 0x02	; 2
     5ec:	0e 94 8e 02 	call	0x51c	; 0x51c <convert_to_degrees_long>
	sei(); //It is a macro that executes an assembler instruction to enable interrupts.
     5f0:	78 94       	sei
     5f2:	08 95       	ret

000005f4 <__vector_13>:
	
	dtostrf(position, 6, 4, long_degrees_buffer); /* dtostrf is a function that convert float value into string.Here the position is a float value and it convert as a string degree buffer variable*/
}

ISR (USART_RXC_vect)
{
     5f4:	1f 92       	push	r1
     5f6:	0f 92       	push	r0
     5f8:	0f b6       	in	r0, 0x3f	; 63
     5fa:	0f 92       	push	r0
     5fc:	11 24       	eor	r1, r1
     5fe:	2f 93       	push	r18
     600:	3f 93       	push	r19
     602:	4f 93       	push	r20
     604:	5f 93       	push	r21
     606:	8f 93       	push	r24
     608:	9f 93       	push	r25
     60a:	ef 93       	push	r30
     60c:	ff 93       	push	r31
	uint8_t oldsrg = SREG;  //unsigned 8-bit integer- integer has a range of 0 to 255
     60e:	9f b7       	in	r25, 0x3f	; 63
	cli();					//Command Line Interface - CLIs accept as input commands that are entered by keyboard
     610:	f8 94       	cli
	char received_char = UDR;
     612:	8c b1       	in	r24, 0x0c	; 12
	
	if(received_char =='$'){                                                    /* check for '$' */
     614:	84 32       	cpi	r24, 0x24	; 36
     616:	59 f4       	brne	.+22     	; 0x62e <__vector_13+0x3a>
		GGA_Index = 0;
     618:	10 92 7b 02 	sts	0x027B, r1	; 0x80027b <GGA_Index+0x1>
     61c:	10 92 7a 02 	sts	0x027A, r1	; 0x80027a <GGA_Index>
		CommaCounter = 0;
     620:	10 92 79 02 	sts	0x0279, r1	; 0x800279 <CommaCounter+0x1>
     624:	10 92 78 02 	sts	0x0278, r1	; 0x800278 <CommaCounter>
		IsItGGAString = false;
     628:	10 92 a6 01 	sts	0x01A6, r1	; 0x8001a6 <__data_end>
     62c:	45 c0       	rjmp	.+138    	; 0x6b8 <__vector_13+0xc4>
	}
	else if(IsItGGAString == true){                                             /* if true save GGA info. into buffer */
     62e:	20 91 a6 01 	lds	r18, 0x01A6	; 0x8001a6 <__data_end>
     632:	22 23       	and	r18, r18
     634:	29 f1       	breq	.+74     	; 0x680 <__vector_13+0x8c>
		if(received_char == ',' ) GGA_Pointers[CommaCounter++] = GGA_Index;     /* store instances of ',' in buffer */
     636:	8c 32       	cpi	r24, 0x2C	; 44
     638:	99 f4       	brne	.+38     	; 0x660 <__vector_13+0x6c>
     63a:	20 91 78 02 	lds	r18, 0x0278	; 0x800278 <CommaCounter>
     63e:	30 91 79 02 	lds	r19, 0x0279	; 0x800279 <CommaCounter+0x1>
     642:	a9 01       	movw	r20, r18
     644:	4f 5f       	subi	r20, 0xFF	; 255
     646:	5f 4f       	sbci	r21, 0xFF	; 255
     648:	50 93 79 02 	sts	0x0279, r21	; 0x800279 <CommaCounter+0x1>
     64c:	40 93 78 02 	sts	0x0278, r20	; 0x800278 <CommaCounter>
     650:	40 91 7a 02 	lds	r20, 0x027A	; 0x80027a <GGA_Index>
     654:	50 91 7b 02 	lds	r21, 0x027B	; 0x80027b <GGA_Index+0x1>
     658:	f9 01       	movw	r30, r18
     65a:	ee 56       	subi	r30, 0x6E	; 110
     65c:	fd 4f       	sbci	r31, 0xFD	; 253
     65e:	40 83       	st	Z, r20
		GGA_Buffer[GGA_Index++] = received_char;
     660:	20 91 7a 02 	lds	r18, 0x027A	; 0x80027a <GGA_Index>
     664:	30 91 7b 02 	lds	r19, 0x027B	; 0x80027b <GGA_Index+0x1>
     668:	a9 01       	movw	r20, r18
     66a:	4f 5f       	subi	r20, 0xFF	; 255
     66c:	5f 4f       	sbci	r21, 0xFF	; 255
     66e:	50 93 7b 02 	sts	0x027B, r21	; 0x80027b <GGA_Index+0x1>
     672:	40 93 7a 02 	sts	0x027A, r20	; 0x80027a <GGA_Index>
     676:	f9 01       	movw	r30, r18
     678:	e5 55       	subi	r30, 0x55	; 85
     67a:	fe 4f       	sbci	r31, 0xFE	; 254
     67c:	80 83       	st	Z, r24
     67e:	1c c0       	rjmp	.+56     	; 0x6b8 <__vector_13+0xc4>
	}
	else if(GGA_CODE[0] == 'G' && GGA_CODE[1] == 'G' && GGA_CODE[2] == 'A'){    /* check for GGA string */
     680:	20 91 7c 02 	lds	r18, 0x027C	; 0x80027c <GGA_CODE>
     684:	27 34       	cpi	r18, 0x47	; 71
     686:	89 f4       	brne	.+34     	; 0x6aa <__vector_13+0xb6>
     688:	20 91 7d 02 	lds	r18, 0x027D	; 0x80027d <GGA_CODE+0x1>
     68c:	27 34       	cpi	r18, 0x47	; 71
     68e:	69 f4       	brne	.+26     	; 0x6aa <__vector_13+0xb6>
     690:	20 91 7e 02 	lds	r18, 0x027E	; 0x80027e <GGA_CODE+0x2>
     694:	21 34       	cpi	r18, 0x41	; 65
     696:	49 f4       	brne	.+18     	; 0x6aa <__vector_13+0xb6>
		IsItGGAString = true;
     698:	81 e0       	ldi	r24, 0x01	; 1
     69a:	80 93 a6 01 	sts	0x01A6, r24	; 0x8001a6 <__data_end>
		GGA_CODE[0] = 0; GGA_CODE[1] = 0; GGA_CODE[2] = 0;
     69e:	ec e7       	ldi	r30, 0x7C	; 124
     6a0:	f2 e0       	ldi	r31, 0x02	; 2
     6a2:	10 82       	st	Z, r1
     6a4:	11 82       	std	Z+1, r1	; 0x01
     6a6:	12 82       	std	Z+2, r1	; 0x02
     6a8:	07 c0       	rjmp	.+14     	; 0x6b8 <__vector_13+0xc4>
	}
	else{
		GGA_CODE[0] = GGA_CODE[1];  GGA_CODE[1] = GGA_CODE[2]; GGA_CODE[2] = received_char;
     6aa:	ec e7       	ldi	r30, 0x7C	; 124
     6ac:	f2 e0       	ldi	r31, 0x02	; 2
     6ae:	21 81       	ldd	r18, Z+1	; 0x01
     6b0:	20 83       	st	Z, r18
     6b2:	22 81       	ldd	r18, Z+2	; 0x02
     6b4:	21 83       	std	Z+1, r18	; 0x01
     6b6:	82 83       	std	Z+2, r24	; 0x02
	}
	SREG = oldsrg;
     6b8:	9f bf       	out	0x3f, r25	; 63
}
     6ba:	ff 91       	pop	r31
     6bc:	ef 91       	pop	r30
     6be:	9f 91       	pop	r25
     6c0:	8f 91       	pop	r24
     6c2:	5f 91       	pop	r21
     6c4:	4f 91       	pop	r20
     6c6:	3f 91       	pop	r19
     6c8:	2f 91       	pop	r18
     6ca:	0f 90       	pop	r0
     6cc:	0f be       	out	0x3f, r0	; 63
     6ce:	0f 90       	pop	r0
     6d0:	1f 90       	pop	r1
     6d2:	18 95       	reti

000006d4 <sendMessage>:

void sendMessage(char* msg,char* lat,char* lngtd,char* altitude){
     6d4:	cf 92       	push	r12
     6d6:	df 92       	push	r13
     6d8:	ef 92       	push	r14
     6da:	ff 92       	push	r15
     6dc:	0f 93       	push	r16
     6de:	1f 93       	push	r17
     6e0:	cf 93       	push	r28
     6e2:	df 93       	push	r29
     6e4:	cd b7       	in	r28, 0x3d	; 61
     6e6:	de b7       	in	r29, 0x3e	; 62
     6e8:	a3 97       	sbiw	r28, 0x23	; 35
     6ea:	0f b6       	in	r0, 0x3f	; 63
     6ec:	f8 94       	cli
     6ee:	de bf       	out	0x3e, r29	; 62
     6f0:	0f be       	out	0x3f, r0	; 63
     6f2:	cd bf       	out	0x3d, r28	; 61
     6f4:	7c 01       	movw	r14, r24
     6f6:	6a 01       	movw	r12, r20
     6f8:	89 01       	movw	r16, r18
	unsigned char cmd_1[4]="AT";
     6fa:	81 e4       	ldi	r24, 0x41	; 65
     6fc:	94 e5       	ldi	r25, 0x54	; 84
     6fe:	9a 83       	std	Y+2, r25	; 0x02
     700:	89 83       	std	Y+1, r24	; 0x01
     702:	1c 82       	std	Y+4, r1	; 0x04
     704:	1b 82       	std	Y+3, r1	; 0x03
	unsigned char cmd_2[10]="AT+CMGF=1";
     706:	8a e0       	ldi	r24, 0x0A	; 10
     708:	e7 ec       	ldi	r30, 0xC7	; 199
     70a:	f0 e0       	ldi	r31, 0x00	; 0
     70c:	de 01       	movw	r26, r28
     70e:	15 96       	adiw	r26, 0x05	; 5
     710:	01 90       	ld	r0, Z+
     712:	0d 92       	st	X+, r0
     714:	8a 95       	dec	r24
     716:	e1 f7       	brne	.-8      	; 0x710 <sendMessage+0x3c>
	unsigned char cmd_3[10]="AT+CMGS=";
     718:	89 e0       	ldi	r24, 0x09	; 9
     71a:	e0 e6       	ldi	r30, 0x60	; 96
     71c:	f0 e0       	ldi	r31, 0x00	; 0
     71e:	de 01       	movw	r26, r28
     720:	1f 96       	adiw	r26, 0x0f	; 15
     722:	01 90       	ld	r0, Z+
     724:	0d 92       	st	X+, r0
     726:	8a 95       	dec	r24
     728:	e1 f7       	brne	.-8      	; 0x722 <sendMessage+0x4e>
     72a:	18 8e       	std	Y+24, r1	; 0x18
	char* cmd_4 = msg;
	strcat(cmd_4,"\r   Location\r   Latitude : ");
     72c:	d7 01       	movw	r26, r14
     72e:	0d 90       	ld	r0, X+
     730:	00 20       	and	r0, r0
     732:	e9 f7       	brne	.-6      	; 0x72e <sendMessage+0x5a>
     734:	11 97       	sbiw	r26, 0x01	; 1
     736:	8c e1       	ldi	r24, 0x1C	; 28
     738:	ea e6       	ldi	r30, 0x6A	; 106
     73a:	f0 e0       	ldi	r31, 0x00	; 0
     73c:	01 90       	ld	r0, Z+
     73e:	0d 92       	st	X+, r0
     740:	8a 95       	dec	r24
     742:	e1 f7       	brne	.-8      	; 0x73c <sendMessage+0x68>
	strcat(cmd_4,lat);
     744:	c7 01       	movw	r24, r14
     746:	0e 94 94 08 	call	0x1128	; 0x1128 <strcat>
	strcat(cmd_4,"\r   Longitude : ");
     74a:	d7 01       	movw	r26, r14
     74c:	0d 90       	ld	r0, X+
     74e:	00 20       	and	r0, r0
     750:	e9 f7       	brne	.-6      	; 0x74c <sendMessage+0x78>
     752:	11 97       	sbiw	r26, 0x01	; 1
     754:	81 e1       	ldi	r24, 0x11	; 17
     756:	e6 e8       	ldi	r30, 0x86	; 134
     758:	f0 e0       	ldi	r31, 0x00	; 0
     75a:	01 90       	ld	r0, Z+
     75c:	0d 92       	st	X+, r0
     75e:	8a 95       	dec	r24
     760:	e1 f7       	brne	.-8      	; 0x75a <sendMessage+0x86>
	strcat(cmd_4,lngtd);
     762:	b6 01       	movw	r22, r12
     764:	c7 01       	movw	r24, r14
     766:	0e 94 94 08 	call	0x1128	; 0x1128 <strcat>
	strcat(cmd_4,"\r   Altitude : ");
     76a:	d7 01       	movw	r26, r14
     76c:	0d 90       	ld	r0, X+
     76e:	00 20       	and	r0, r0
     770:	e9 f7       	brne	.-6      	; 0x76c <sendMessage+0x98>
     772:	11 97       	sbiw	r26, 0x01	; 1
     774:	80 e1       	ldi	r24, 0x10	; 16
     776:	e7 e9       	ldi	r30, 0x97	; 151
     778:	f0 e0       	ldi	r31, 0x00	; 0
     77a:	01 90       	ld	r0, Z+
     77c:	0d 92       	st	X+, r0
     77e:	8a 95       	dec	r24
     780:	e1 f7       	brne	.-8      	; 0x77a <sendMessage+0xa6>
	strcat(cmd_4,altitude);
     782:	b8 01       	movw	r22, r16
     784:	c7 01       	movw	r24, r14
     786:	0e 94 94 08 	call	0x1128	; 0x1128 <strcat>
	unsigned char num[11] = "0771234567";
     78a:	8b e0       	ldi	r24, 0x0B	; 11
     78c:	e1 ed       	ldi	r30, 0xD1	; 209
     78e:	f0 e0       	ldi	r31, 0x00	; 0
     790:	de 01       	movw	r26, r28
     792:	59 96       	adiw	r26, 0x19	; 25
     794:	01 90       	ld	r0, Z+
     796:	0d 92       	st	X+, r0
     798:	8a 95       	dec	r24
     79a:	e1 f7       	brne	.-8      	; 0x794 <sendMessage+0xc0>
	LCD_Clear();
     79c:	0e 94 a4 01 	call	0x348	; 0x348 <LCD_Clear>
	LCD_String_xy(1,0,"Message");
     7a0:	47 ea       	ldi	r20, 0xA7	; 167
     7a2:	50 e0       	ldi	r21, 0x00	; 0
     7a4:	60 e0       	ldi	r22, 0x00	; 0
     7a6:	81 e0       	ldi	r24, 0x01	; 1
     7a8:	0e 94 88 01 	call	0x310	; 0x310 <LCD_String_xy>
	LCD_Command(0xc0);
     7ac:	80 ec       	ldi	r24, 0xC0	; 192
     7ae:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <LCD_Command>
	LCD_String_xy(2,3,"Forwarding");
     7b2:	4f ea       	ldi	r20, 0xAF	; 175
     7b4:	50 e0       	ldi	r21, 0x00	; 0
     7b6:	63 e0       	ldi	r22, 0x03	; 3
     7b8:	82 e0       	ldi	r24, 0x02	; 2
     7ba:	0e 94 88 01 	call	0x310	; 0x310 <LCD_String_xy>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     7be:	2f ef       	ldi	r18, 0xFF	; 255
     7c0:	84 e3       	ldi	r24, 0x34	; 52
     7c2:	9c e0       	ldi	r25, 0x0C	; 12
     7c4:	21 50       	subi	r18, 0x01	; 1
     7c6:	80 40       	sbci	r24, 0x00	; 0
     7c8:	90 40       	sbci	r25, 0x00	; 0
     7ca:	e1 f7       	brne	.-8      	; 0x7c4 <sendMessage+0xf0>
     7cc:	00 c0       	rjmp	.+0      	; 0x7ce <sendMessage+0xfa>
     7ce:	00 00       	nop
	_delay_ms(500);
	for (int i=0;cmd_1[i]!='\0';i++) /*checking communication*/
     7d0:	00 e0       	ldi	r16, 0x00	; 0
     7d2:	10 e0       	ldi	r17, 0x00	; 0
     7d4:	0a c0       	rjmp	.+20     	; 0x7ea <sendMessage+0x116>
	{
		USART_TxChar(cmd_1[i]);
     7d6:	0e 94 00 02 	call	0x400	; 0x400 <USART_TxChar>
     7da:	8f e0       	ldi	r24, 0x0F	; 15
     7dc:	97 e2       	ldi	r25, 0x27	; 39
     7de:	01 97       	sbiw	r24, 0x01	; 1
     7e0:	f1 f7       	brne	.-4      	; 0x7de <sendMessage+0x10a>
     7e2:	00 c0       	rjmp	.+0      	; 0x7e4 <sendMessage+0x110>
     7e4:	00 00       	nop
	LCD_Clear();
	LCD_String_xy(1,0,"Message");
	LCD_Command(0xc0);
	LCD_String_xy(2,3,"Forwarding");
	_delay_ms(500);
	for (int i=0;cmd_1[i]!='\0';i++) /*checking communication*/
     7e6:	0f 5f       	subi	r16, 0xFF	; 255
     7e8:	1f 4f       	sbci	r17, 0xFF	; 255
     7ea:	e1 e0       	ldi	r30, 0x01	; 1
     7ec:	f0 e0       	ldi	r31, 0x00	; 0
     7ee:	ec 0f       	add	r30, r28
     7f0:	fd 1f       	adc	r31, r29
     7f2:	e0 0f       	add	r30, r16
     7f4:	f1 1f       	adc	r31, r17
     7f6:	80 81       	ld	r24, Z
     7f8:	81 11       	cpse	r24, r1
     7fa:	ed cf       	rjmp	.-38     	; 0x7d6 <sendMessage+0x102>
	{
		USART_TxChar(cmd_1[i]);
		_delay_ms(5);
	}
	USART_TxChar('\r'); /*carriage return ---> begining from the first line without going to next line*/
     7fc:	8d e0       	ldi	r24, 0x0D	; 13
     7fe:	0e 94 00 02 	call	0x400	; 0x400 <USART_TxChar>
     802:	8f e0       	ldi	r24, 0x0F	; 15
     804:	97 e2       	ldi	r25, 0x27	; 39
     806:	01 97       	sbiw	r24, 0x01	; 1
     808:	f1 f7       	brne	.-4      	; 0x806 <__DATA_REGION_LENGTH__+0x6>
     80a:	00 c0       	rjmp	.+0      	; 0x80c <__DATA_REGION_LENGTH__+0xc>
     80c:	00 00       	nop
	_delay_ms(5);
	
	for (int i=0;cmd_2[i]!='\0';i++) /* set the operating mode to SMS text mode*/
     80e:	00 e0       	ldi	r16, 0x00	; 0
     810:	10 e0       	ldi	r17, 0x00	; 0
     812:	0a c0       	rjmp	.+20     	; 0x828 <__DATA_REGION_LENGTH__+0x28>
	{
		USART_TxChar(cmd_2[i]);
     814:	0e 94 00 02 	call	0x400	; 0x400 <USART_TxChar>
     818:	8f e0       	ldi	r24, 0x0F	; 15
     81a:	97 e2       	ldi	r25, 0x27	; 39
     81c:	01 97       	sbiw	r24, 0x01	; 1
     81e:	f1 f7       	brne	.-4      	; 0x81c <__DATA_REGION_LENGTH__+0x1c>
     820:	00 c0       	rjmp	.+0      	; 0x822 <__DATA_REGION_LENGTH__+0x22>
     822:	00 00       	nop
		_delay_ms(5);
	}
	USART_TxChar('\r'); /*carriage return ---> begining from the first line without going to next line*/
	_delay_ms(5);
	
	for (int i=0;cmd_2[i]!='\0';i++) /* set the operating mode to SMS text mode*/
     824:	0f 5f       	subi	r16, 0xFF	; 255
     826:	1f 4f       	sbci	r17, 0xFF	; 255
     828:	e5 e0       	ldi	r30, 0x05	; 5
     82a:	f0 e0       	ldi	r31, 0x00	; 0
     82c:	ec 0f       	add	r30, r28
     82e:	fd 1f       	adc	r31, r29
     830:	e0 0f       	add	r30, r16
     832:	f1 1f       	adc	r31, r17
     834:	80 81       	ld	r24, Z
     836:	81 11       	cpse	r24, r1
     838:	ed cf       	rjmp	.-38     	; 0x814 <__DATA_REGION_LENGTH__+0x14>
	{
		USART_TxChar(cmd_2[i]);
		_delay_ms(5);
	}
	USART_TxChar('\r');
     83a:	8d e0       	ldi	r24, 0x0D	; 13
     83c:	0e 94 00 02 	call	0x400	; 0x400 <USART_TxChar>
     840:	8f e0       	ldi	r24, 0x0F	; 15
     842:	97 e2       	ldi	r25, 0x27	; 39
     844:	01 97       	sbiw	r24, 0x01	; 1
     846:	f1 f7       	brne	.-4      	; 0x844 <__DATA_REGION_LENGTH__+0x44>
     848:	00 c0       	rjmp	.+0      	; 0x84a <__DATA_REGION_LENGTH__+0x4a>
     84a:	00 00       	nop
	_delay_ms(5);
	
	for (int i=0;cmd_3[i]!='\0';i++) /* send SMS in text mode*/
     84c:	00 e0       	ldi	r16, 0x00	; 0
     84e:	10 e0       	ldi	r17, 0x00	; 0
     850:	0a c0       	rjmp	.+20     	; 0x866 <__stack+0x7>
	{
		USART_TxChar(cmd_3[i]);
     852:	0e 94 00 02 	call	0x400	; 0x400 <USART_TxChar>
     856:	8f e0       	ldi	r24, 0x0F	; 15
     858:	97 e2       	ldi	r25, 0x27	; 39
     85a:	01 97       	sbiw	r24, 0x01	; 1
     85c:	f1 f7       	brne	.-4      	; 0x85a <__DATA_REGION_LENGTH__+0x5a>
     85e:	00 c0       	rjmp	.+0      	; 0x860 <__stack+0x1>
     860:	00 00       	nop
		_delay_ms(5);
	}
	USART_TxChar('\r');
	_delay_ms(5);
	
	for (int i=0;cmd_3[i]!='\0';i++) /* send SMS in text mode*/
     862:	0f 5f       	subi	r16, 0xFF	; 255
     864:	1f 4f       	sbci	r17, 0xFF	; 255
     866:	ef e0       	ldi	r30, 0x0F	; 15
     868:	f0 e0       	ldi	r31, 0x00	; 0
     86a:	ec 0f       	add	r30, r28
     86c:	fd 1f       	adc	r31, r29
     86e:	e0 0f       	add	r30, r16
     870:	f1 1f       	adc	r31, r17
     872:	80 81       	ld	r24, Z
     874:	81 11       	cpse	r24, r1
     876:	ed cf       	rjmp	.-38     	; 0x852 <__DATA_REGION_LENGTH__+0x52>
	{
		USART_TxChar(cmd_3[i]);
		_delay_ms(5);
	}
	UDR='"';
     878:	82 e2       	ldi	r24, 0x22	; 34
     87a:	8c b9       	out	0x0c, r24	; 12
     87c:	9f ef       	ldi	r25, 0xFF	; 255
     87e:	20 e7       	ldi	r18, 0x70	; 112
     880:	82 e0       	ldi	r24, 0x02	; 2
     882:	91 50       	subi	r25, 0x01	; 1
     884:	20 40       	sbci	r18, 0x00	; 0
     886:	80 40       	sbci	r24, 0x00	; 0
     888:	e1 f7       	brne	.-8      	; 0x882 <__stack+0x23>
     88a:	00 c0       	rjmp	.+0      	; 0x88c <__stack+0x2d>
     88c:	00 00       	nop
	_delay_ms(100);
	for (int i=0;num[i]!='\0';i++) /* SMS to be sent */
     88e:	00 e0       	ldi	r16, 0x00	; 0
     890:	10 e0       	ldi	r17, 0x00	; 0
     892:	0a c0       	rjmp	.+20     	; 0x8a8 <__stack+0x49>
	{
		USART_TxChar(num[i]);
     894:	0e 94 00 02 	call	0x400	; 0x400 <USART_TxChar>
     898:	8f e0       	ldi	r24, 0x0F	; 15
     89a:	97 e2       	ldi	r25, 0x27	; 39
     89c:	01 97       	sbiw	r24, 0x01	; 1
     89e:	f1 f7       	brne	.-4      	; 0x89c <__stack+0x3d>
     8a0:	00 c0       	rjmp	.+0      	; 0x8a2 <__stack+0x43>
     8a2:	00 00       	nop
		USART_TxChar(cmd_3[i]);
		_delay_ms(5);
	}
	UDR='"';
	_delay_ms(100);
	for (int i=0;num[i]!='\0';i++) /* SMS to be sent */
     8a4:	0f 5f       	subi	r16, 0xFF	; 255
     8a6:	1f 4f       	sbci	r17, 0xFF	; 255
     8a8:	e9 e1       	ldi	r30, 0x19	; 25
     8aa:	f0 e0       	ldi	r31, 0x00	; 0
     8ac:	ec 0f       	add	r30, r28
     8ae:	fd 1f       	adc	r31, r29
     8b0:	e0 0f       	add	r30, r16
     8b2:	f1 1f       	adc	r31, r17
     8b4:	80 81       	ld	r24, Z
     8b6:	81 11       	cpse	r24, r1
     8b8:	ed cf       	rjmp	.-38     	; 0x894 <__stack+0x35>
	{
		USART_TxChar(num[i]);
		_delay_ms(5);
	}
	UDR='"';
     8ba:	82 e2       	ldi	r24, 0x22	; 34
     8bc:	8c b9       	out	0x0c, r24	; 12
     8be:	8f e0       	ldi	r24, 0x0F	; 15
     8c0:	97 e2       	ldi	r25, 0x27	; 39
     8c2:	01 97       	sbiw	r24, 0x01	; 1
     8c4:	f1 f7       	brne	.-4      	; 0x8c2 <__stack+0x63>
     8c6:	00 c0       	rjmp	.+0      	; 0x8c8 <__stack+0x69>
     8c8:	00 00       	nop
	_delay_ms(5);
	UDR='\r';
     8ca:	8d e0       	ldi	r24, 0x0D	; 13
     8cc:	8c b9       	out	0x0c, r24	; 12
     8ce:	8f e0       	ldi	r24, 0x0F	; 15
     8d0:	97 e2       	ldi	r25, 0x27	; 39
     8d2:	01 97       	sbiw	r24, 0x01	; 1
     8d4:	f1 f7       	brne	.-4      	; 0x8d2 <__stack+0x73>
     8d6:	00 c0       	rjmp	.+0      	; 0x8d8 <__stack+0x79>
     8d8:	00 00       	nop
	_delay_ms(5);

	for (int i=0;cmd_4[i]!='\0';i++) /* message */
     8da:	00 e0       	ldi	r16, 0x00	; 0
     8dc:	10 e0       	ldi	r17, 0x00	; 0
     8de:	0a c0       	rjmp	.+20     	; 0x8f4 <__stack+0x95>
	{
		USART_TxChar(cmd_4[i]);
     8e0:	0e 94 00 02 	call	0x400	; 0x400 <USART_TxChar>
     8e4:	8f e0       	ldi	r24, 0x0F	; 15
     8e6:	97 e2       	ldi	r25, 0x27	; 39
     8e8:	01 97       	sbiw	r24, 0x01	; 1
     8ea:	f1 f7       	brne	.-4      	; 0x8e8 <__stack+0x89>
     8ec:	00 c0       	rjmp	.+0      	; 0x8ee <__stack+0x8f>
     8ee:	00 00       	nop
	UDR='"';
	_delay_ms(5);
	UDR='\r';
	_delay_ms(5);

	for (int i=0;cmd_4[i]!='\0';i++) /* message */
     8f0:	0f 5f       	subi	r16, 0xFF	; 255
     8f2:	1f 4f       	sbci	r17, 0xFF	; 255
     8f4:	f7 01       	movw	r30, r14
     8f6:	e0 0f       	add	r30, r16
     8f8:	f1 1f       	adc	r31, r17
     8fa:	80 81       	ld	r24, Z
     8fc:	81 11       	cpse	r24, r1
     8fe:	f0 cf       	rjmp	.-32     	; 0x8e0 <__stack+0x81>
     900:	9f ef       	ldi	r25, 0xFF	; 255
     902:	21 ee       	ldi	r18, 0xE1	; 225
     904:	84 e0       	ldi	r24, 0x04	; 4
     906:	91 50       	subi	r25, 0x01	; 1
     908:	20 40       	sbci	r18, 0x00	; 0
     90a:	80 40       	sbci	r24, 0x00	; 0
     90c:	e1 f7       	brne	.-8      	; 0x906 <__stack+0xa7>
     90e:	00 c0       	rjmp	.+0      	; 0x910 <__stack+0xb1>
     910:	00 00       	nop
	{
		USART_TxChar(cmd_4[i]);
		_delay_ms(5);
	}
	_delay_ms(200);
	LCD_Clear();
     912:	0e 94 a4 01 	call	0x348	; 0x348 <LCD_Clear>
	LCD_String_xy(1,0,"Message sent");
     916:	4a eb       	ldi	r20, 0xBA	; 186
     918:	50 e0       	ldi	r21, 0x00	; 0
     91a:	60 e0       	ldi	r22, 0x00	; 0
     91c:	81 e0       	ldi	r24, 0x01	; 1
     91e:	0e 94 88 01 	call	0x310	; 0x310 <LCD_String_xy>
     922:	9f ef       	ldi	r25, 0xFF	; 255
     924:	22 e5       	ldi	r18, 0x52	; 82
     926:	87 e0       	ldi	r24, 0x07	; 7
     928:	91 50       	subi	r25, 0x01	; 1
     92a:	20 40       	sbci	r18, 0x00	; 0
     92c:	80 40       	sbci	r24, 0x00	; 0
     92e:	e1 f7       	brne	.-8      	; 0x928 <__stack+0xc9>
     930:	00 c0       	rjmp	.+0      	; 0x932 <__stack+0xd3>
     932:	00 00       	nop
	_delay_ms(300);
	LCD_Clear();
     934:	0e 94 a4 01 	call	0x348	; 0x348 <LCD_Clear>
     938:	a3 96       	adiw	r28, 0x23	; 35
     93a:	0f b6       	in	r0, 0x3f	; 63
     93c:	f8 94       	cli
     93e:	de bf       	out	0x3e, r29	; 62
     940:	0f be       	out	0x3f, r0	; 63
     942:	cd bf       	out	0x3d, r28	; 61
     944:	df 91       	pop	r29
     946:	cf 91       	pop	r28
     948:	1f 91       	pop	r17
     94a:	0f 91       	pop	r16
     94c:	ff 90       	pop	r15
     94e:	ef 90       	pop	r14
     950:	df 90       	pop	r13
     952:	cf 90       	pop	r12
     954:	08 95       	ret

00000956 <ringAlarm>:
	}//while end
}//main end


void ringAlarm(){
	portHigh(PORTD,buzzer);//buzzer
     956:	82 b3       	in	r24, 0x12	; 18
     958:	80 68       	ori	r24, 0x80	; 128
     95a:	82 bb       	out	0x12, r24	; 18
     95c:	08 95       	ret

0000095e <stopAlarm>:
}
void stopAlarm(){
	portLow(PORTD,buzzer);
     95e:	82 b3       	in	r24, 0x12	; 18
     960:	8f 77       	andi	r24, 0x7F	; 127
     962:	82 bb       	out	0x12, r24	; 18
     964:	08 95       	ret

00000966 <onHazardLight>:
}
void onHazardLight(){
	portHigh(PORTD,led);
     966:	82 b3       	in	r24, 0x12	; 18
     968:	80 64       	ori	r24, 0x40	; 64
     96a:	82 bb       	out	0x12, r24	; 18
     96c:	08 95       	ret

0000096e <offHazardLight>:
}
void offHazardLight(){
	portLow(PORTD,led);
     96e:	82 b3       	in	r24, 0x12	; 18
     970:	8f 7b       	andi	r24, 0xBF	; 191
     972:	82 bb       	out	0x12, r24	; 18
     974:	08 95       	ret

00000976 <playRadio>:
}
void playRadio(){
	portHigh(PORTD,musicSystem);
     976:	82 b3       	in	r24, 0x12	; 18
     978:	80 62       	ori	r24, 0x20	; 32
     97a:	82 bb       	out	0x12, r24	; 18
     97c:	08 95       	ret

0000097e <isDriverSleepingIR>:
}
int isDriverSleepingIR(){
     97e:	cf 93       	push	r28
     980:	df 93       	push	r29
	LCD_Clear();
     982:	0e 94 a4 01 	call	0x348	; 0x348 <LCD_Clear>
	LCD_String("Checking Eyes");
     986:	8c ed       	ldi	r24, 0xDC	; 220
     988:	90 e0       	ldi	r25, 0x00	; 0
     98a:	0e 94 72 01 	call	0x2e4	; 0x2e4 <LCD_String>
	//int timeInterval=40; real value due to error
	int timeInterval=5;
	int flag=0;
	for(int i=1;i<=timeInterval;i++){
     98e:	81 e0       	ldi	r24, 0x01	; 1
     990:	90 e0       	ldi	r25, 0x00	; 0
int isDriverSleepingIR(){
	LCD_Clear();
	LCD_String("Checking Eyes");
	//int timeInterval=40; real value due to error
	int timeInterval=5;
	int flag=0;
     992:	c0 e0       	ldi	r28, 0x00	; 0
     994:	d0 e0       	ldi	r29, 0x00	; 0
	for(int i=1;i<=timeInterval;i++){
     996:	0f c0       	rjmp	.+30     	; 0x9b6 <isDriverSleepingIR+0x38>
		if(pinRead(PINC,irsensor)==0x40){
     998:	9e 9b       	sbis	0x13, 6	; 19
     99a:	02 c0       	rjmp	.+4      	; 0x9a0 <isDriverSleepingIR+0x22>
			flag++;
     99c:	21 96       	adiw	r28, 0x01	; 1
     99e:	01 c0       	rjmp	.+2      	; 0x9a2 <isDriverSleepingIR+0x24>
			}else{
			flag--;
     9a0:	21 97       	sbiw	r28, 0x01	; 1
     9a2:	2f e7       	ldi	r18, 0x7F	; 127
     9a4:	38 e3       	ldi	r19, 0x38	; 56
     9a6:	41 e0       	ldi	r20, 0x01	; 1
     9a8:	21 50       	subi	r18, 0x01	; 1
     9aa:	30 40       	sbci	r19, 0x00	; 0
     9ac:	40 40       	sbci	r20, 0x00	; 0
     9ae:	e1 f7       	brne	.-8      	; 0x9a8 <isDriverSleepingIR+0x2a>
     9b0:	00 c0       	rjmp	.+0      	; 0x9b2 <isDriverSleepingIR+0x34>
     9b2:	00 00       	nop
	LCD_Clear();
	LCD_String("Checking Eyes");
	//int timeInterval=40; real value due to error
	int timeInterval=5;
	int flag=0;
	for(int i=1;i<=timeInterval;i++){
     9b4:	01 96       	adiw	r24, 0x01	; 1
     9b6:	86 30       	cpi	r24, 0x06	; 6
     9b8:	91 05       	cpc	r25, r1
     9ba:	74 f3       	brlt	.-36     	; 0x998 <isDriverSleepingIR+0x1a>
			}else{
			flag--;
		}
		_delay_ms(50);
	}
	LCD_Command(0xc0);
     9bc:	80 ec       	ldi	r24, 0xC0	; 192
     9be:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <LCD_Command>
	LCD_String("  -Finished");
     9c2:	8a ee       	ldi	r24, 0xEA	; 234
     9c4:	90 e0       	ldi	r25, 0x00	; 0
     9c6:	0e 94 72 01 	call	0x2e4	; 0x2e4 <LCD_String>
	if(flag==timeInterval){
     9ca:	25 97       	sbiw	r28, 0x05	; 5
     9cc:	19 f4       	brne	.+6      	; 0x9d4 <isDriverSleepingIR+0x56>
		return 1;
     9ce:	81 e0       	ldi	r24, 0x01	; 1
     9d0:	90 e0       	ldi	r25, 0x00	; 0
     9d2:	02 c0       	rjmp	.+4      	; 0x9d8 <isDriverSleepingIR+0x5a>
	}else{
		return 0;
     9d4:	80 e0       	ldi	r24, 0x00	; 0
     9d6:	90 e0       	ldi	r25, 0x00	; 0
	}
	
}
     9d8:	df 91       	pop	r29
     9da:	cf 91       	pop	r28
     9dc:	08 95       	ret

000009de <sendLocation>:

void sendLocation(char* message){
     9de:	0f 93       	push	r16
     9e0:	1f 93       	push	r17
     9e2:	cf 93       	push	r28
     9e4:	df 93       	push	r29
     9e6:	8c 01       	movw	r16, r24
	get_latitude(GGA_Pointers[0]);char* lat=lat_degrees_buffer;
     9e8:	c2 e9       	ldi	r28, 0x92	; 146
     9ea:	d2 e0       	ldi	r29, 0x02	; 2
     9ec:	88 81       	ld	r24, Y
     9ee:	90 e0       	ldi	r25, 0x00	; 0
     9f0:	0e 94 63 02 	call	0x4c6	; 0x4c6 <get_latitude>
	get_longitude(GGA_Pointers[2]);char* lngtd=long_degrees_buffer;
     9f4:	8a 81       	ldd	r24, Y+2	; 0x02
     9f6:	90 e0       	ldi	r25, 0x00	; 0
     9f8:	0e 94 cf 02 	call	0x59e	; 0x59e <get_longitude>
	get_altitude(GGA_Pointers[7]);char* altitude=Altitude_Buffer;
     9fc:	8f 81       	ldd	r24, Y+7	; 0x07
     9fe:	90 e0       	ldi	r25, 0x00	; 0
     a00:	0e 94 04 02 	call	0x408	; 0x408 <get_altitude>
	PORTD=0x04;// change signal using mux
     a04:	84 e0       	ldi	r24, 0x04	; 4
     a06:	82 bb       	out	0x12, r24	; 18
	sendMessage(message,lat,lngtd,altitude);
     a08:	2a eb       	ldi	r18, 0xBA	; 186
     a0a:	32 e0       	ldi	r19, 0x02	; 2
     a0c:	4d e4       	ldi	r20, 0x4D	; 77
     a0e:	52 e0       	ldi	r21, 0x02	; 2
     a10:	66 ea       	ldi	r22, 0xA6	; 166
     a12:	72 e0       	ldi	r23, 0x02	; 2
     a14:	c8 01       	movw	r24, r16
     a16:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <sendMessage>
	PORTD=0x00;// turn back to normal
     a1a:	12 ba       	out	0x12, r1	; 18
     a1c:	df 91       	pop	r29
     a1e:	cf 91       	pop	r28
     a20:	1f 91       	pop	r17
     a22:	0f 91       	pop	r16
     a24:	08 95       	ret

00000a26 <main>:
#define F_CPU 8000000UL
#define SREG   _SFR_IO8(0x3f)
#include "headerfiles.h"
int main(void){
	DDRD=0xE4;
     a26:	84 ee       	ldi	r24, 0xE4	; 228
     a28:	81 bb       	out	0x11, r24	; 17
	LCD_Init();LCD_String("Initializing..");_delay_ms(50);LCD_Clear();
     a2a:	0e 94 4e 01 	call	0x29c	; 0x29c <LCD_Init>
     a2e:	86 ef       	ldi	r24, 0xF6	; 246
     a30:	90 e0       	ldi	r25, 0x00	; 0
     a32:	0e 94 72 01 	call	0x2e4	; 0x2e4 <LCD_String>
     a36:	2f e7       	ldi	r18, 0x7F	; 127
     a38:	38 e3       	ldi	r19, 0x38	; 56
     a3a:	41 e0       	ldi	r20, 0x01	; 1
     a3c:	21 50       	subi	r18, 0x01	; 1
     a3e:	30 40       	sbci	r19, 0x00	; 0
     a40:	40 40       	sbci	r20, 0x00	; 0
     a42:	e1 f7       	brne	.-8      	; 0xa3c <main+0x16>
     a44:	00 c0       	rjmp	.+0      	; 0xa46 <main+0x20>
     a46:	00 00       	nop
     a48:	0e 94 a4 01 	call	0x348	; 0x348 <LCD_Clear>
	I2C_Init();
     a4c:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <I2C_Init>
	PWM_init();
     a50:	0e 94 cc 01 	call	0x398	; 0x398 <PWM_init>
	GGA_Index=0;
     a54:	10 92 7b 02 	sts	0x027B, r1	; 0x80027b <GGA_Index+0x1>
     a58:	10 92 7a 02 	sts	0x027A, r1	; 0x80027a <GGA_Index>
	USART_Init(9600);
     a5c:	60 e8       	ldi	r22, 0x80	; 128
     a5e:	75 e2       	ldi	r23, 0x25	; 37
     a60:	80 e0       	ldi	r24, 0x00	; 0
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <USART_Init>
	sei();
     a68:	78 94       	sei
	start:
	LCD_String("Welcome");_delay_ms(50);LCD_Clear();
     a6a:	85 e0       	ldi	r24, 0x05	; 5
     a6c:	91 e0       	ldi	r25, 0x01	; 1
     a6e:	0e 94 72 01 	call	0x2e4	; 0x2e4 <LCD_String>
     a72:	8f e7       	ldi	r24, 0x7F	; 127
     a74:	98 e3       	ldi	r25, 0x38	; 56
     a76:	21 e0       	ldi	r18, 0x01	; 1
     a78:	81 50       	subi	r24, 0x01	; 1
     a7a:	90 40       	sbci	r25, 0x00	; 0
     a7c:	20 40       	sbci	r18, 0x00	; 0
     a7e:	e1 f7       	brne	.-8      	; 0xa78 <main+0x52>
     a80:	00 c0       	rjmp	.+0      	; 0xa82 <main+0x5c>
     a82:	00 00       	nop
     a84:	0e 94 a4 01 	call	0x348	; 0x348 <LCD_Clear>
	while (1){
		
		//flame detection
		if(pinRead(PINC,flame)==0x10){
     a88:	9c 9b       	sbis	0x13, 4	; 19
     a8a:	1e c0       	rjmp	.+60     	; 0xac8 <main+0xa2>
			LCD_Clear();
     a8c:	0e 94 a4 01 	call	0x348	; 0x348 <LCD_Clear>
			LCD_String("Flame Detected !");
     a90:	8d e0       	ldi	r24, 0x0D	; 13
     a92:	91 e0       	ldi	r25, 0x01	; 1
     a94:	0e 94 72 01 	call	0x2e4	; 0x2e4 <LCD_String>
			ringAlarm();
     a98:	0e 94 ab 04 	call	0x956	; 0x956 <ringAlarm>
			onHazardLight();
     a9c:	0e 94 b3 04 	call	0x966	; 0x966 <onHazardLight>
     aa0:	3f ef       	ldi	r19, 0xFF	; 255
     aa2:	44 e3       	ldi	r20, 0x34	; 52
     aa4:	8c e0       	ldi	r24, 0x0C	; 12
     aa6:	31 50       	subi	r19, 0x01	; 1
     aa8:	40 40       	sbci	r20, 0x00	; 0
     aaa:	80 40       	sbci	r24, 0x00	; 0
     aac:	e1 f7       	brne	.-8      	; 0xaa6 <main+0x80>
     aae:	00 c0       	rjmp	.+0      	; 0xab0 <main+0x8a>
     ab0:	00 00       	nop
			_delay_ms(500);
			stopAlarm();
     ab2:	0e 94 af 04 	call	0x95e	; 0x95e <stopAlarm>
			offHazardLight();
     ab6:	0e 94 b7 04 	call	0x96e	; 0x96e <offHazardLight>
			LCD_Clear();
     aba:	0e 94 a4 01 	call	0x348	; 0x348 <LCD_Clear>
			sendLocation("Flame is Detected");
     abe:	8e e1       	ldi	r24, 0x1E	; 30
     ac0:	91 e0       	ldi	r25, 0x01	; 1
     ac2:	0e 94 ef 04 	call	0x9de	; 0x9de <sendLocation>
     ac6:	e0 cf       	rjmp	.-64     	; 0xa88 <main+0x62>
		}
		//else 1 start
		else{
			//set wheel speed vehicle
			ADC_Init();
     ac8:	0e 94 b1 01 	call	0x362	; 0x362 <ADC_Init>
			int val=ADC_Read(0);float speed=(val/1024.0)*255.0;OCR0=(int)speed;
     acc:	80 e0       	ldi	r24, 0x00	; 0
     ace:	0e 94 b7 01 	call	0x36e	; 0x36e <ADC_Read>
     ad2:	bc 01       	movw	r22, r24
     ad4:	99 0f       	add	r25, r25
     ad6:	88 0b       	sbc	r24, r24
     ad8:	99 0b       	sbc	r25, r25
     ada:	0e 94 31 07 	call	0xe62	; 0xe62 <__floatsisf>
     ade:	20 e0       	ldi	r18, 0x00	; 0
     ae0:	30 e0       	ldi	r19, 0x00	; 0
     ae2:	40 e8       	ldi	r20, 0x80	; 128
     ae4:	5a e3       	ldi	r21, 0x3A	; 58
     ae6:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <__mulsf3>
     aea:	20 e0       	ldi	r18, 0x00	; 0
     aec:	30 e0       	ldi	r19, 0x00	; 0
     aee:	4f e7       	ldi	r20, 0x7F	; 127
     af0:	53 e4       	ldi	r21, 0x43	; 67
     af2:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <__mulsf3>
     af6:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <__fixsfsi>
     afa:	6c bf       	out	0x3c, r22	; 60
			//get pressure
			int pressure = ADC_Read(1);
     afc:	81 e0       	ldi	r24, 0x01	; 1
     afe:	0e 94 b7 01 	call	0x36e	; 0x36e <ADC_Read>
			//char z[5];itoa(val,z,10);
			//char h[5];itoa(pressure,h,10);
			//LCD_String(z);LCD_Command(0xc0);LCD_String(h);
			//_delay_ms(100);
			//LCD_Clear();
			if (pressure > 109){// if value gt 109 vehicle is moving in proteus 21
     b02:	8e 36       	cpi	r24, 0x6E	; 110
     b04:	91 05       	cpc	r25, r1
     b06:	0c f4       	brge	.+2      	; 0xb0a <main+0xe4>
     b08:	79 c0       	rjmp	.+242    	; 0xbfc <main+0x1d6>
				LCD_Clear();
     b0a:	0e 94 a4 01 	call	0x348	; 0x348 <LCD_Clear>
				LCD_String("Driving mode");
     b0e:	80 e3       	ldi	r24, 0x30	; 48
     b10:	91 e0       	ldi	r25, 0x01	; 1
     b12:	0e 94 72 01 	call	0x2e4	; 0x2e4 <LCD_String>
				//------------------------------------------------------------
				if(pinRead(PINC,alcohol)==0x20){
     b16:	9d 9b       	sbis	0x13, 5	; 19
     b18:	1a c0       	rjmp	.+52     	; 0xb4e <main+0x128>
							LCD_Clear();
     b1a:	0e 94 a4 01 	call	0x348	; 0x348 <LCD_Clear>
							LCD_String("Alcohol Detected");
     b1e:	8d e3       	ldi	r24, 0x3D	; 61
     b20:	91 e0       	ldi	r25, 0x01	; 1
     b22:	0e 94 72 01 	call	0x2e4	; 0x2e4 <LCD_String>
							ringAlarm();
     b26:	0e 94 ab 04 	call	0x956	; 0x956 <ringAlarm>
     b2a:	9f ef       	ldi	r25, 0xFF	; 255
     b2c:	20 e7       	ldi	r18, 0x70	; 112
     b2e:	32 e0       	ldi	r19, 0x02	; 2
     b30:	91 50       	subi	r25, 0x01	; 1
     b32:	20 40       	sbci	r18, 0x00	; 0
     b34:	30 40       	sbci	r19, 0x00	; 0
     b36:	e1 f7       	brne	.-8      	; 0xb30 <main+0x10a>
     b38:	00 c0       	rjmp	.+0      	; 0xb3a <main+0x114>
     b3a:	00 00       	nop
							_delay_ms(100);
							stopAlarm();
     b3c:	0e 94 af 04 	call	0x95e	; 0x95e <stopAlarm>
							LCD_Clear();
     b40:	0e 94 a4 01 	call	0x348	; 0x348 <LCD_Clear>
							sendLocation("Alcohol Detected");
     b44:	8d e3       	ldi	r24, 0x3D	; 61
     b46:	91 e0       	ldi	r25, 0x01	; 1
     b48:	0e 94 ef 04 	call	0x9de	; 0x9de <sendLocation>
     b4c:	9d cf       	rjmp	.-198    	; 0xa88 <main+0x62>
				}else{
					if(isDriverSleepingIR()&& (pinRead(PINC,0)==0x01)){
     b4e:	0e 94 bf 04 	call	0x97e	; 0x97e <isDriverSleepingIR>
     b52:	89 2b       	or	r24, r25
     b54:	09 f4       	brne	.+2      	; 0xb58 <main+0x132>
     b56:	98 cf       	rjmp	.-208    	; 0xa88 <main+0x62>
     b58:	98 9b       	sbis	0x13, 0	; 19
     b5a:	96 cf       	rjmp	.-212    	; 0xa88 <main+0x62>
						LCD_Clear();
     b5c:	0e 94 a4 01 	call	0x348	; 0x348 <LCD_Clear>
						LCD_String("Sleeping");
     b60:	87 e8       	ldi	r24, 0x87	; 135
     b62:	91 e0       	ldi	r25, 0x01	; 1
     b64:	0e 94 72 01 	call	0x2e4	; 0x2e4 <LCD_String>
						ringAlarm();
     b68:	0e 94 ab 04 	call	0x956	; 0x956 <ringAlarm>
						onHazardLight();
     b6c:	0e 94 b3 04 	call	0x966	; 0x966 <onHazardLight>
						LCD_Command(0xc0);
     b70:	80 ec       	ldi	r24, 0xC0	; 192
     b72:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <LCD_Command>
						LCD_String("Waiting..");
     b76:	8e e4       	ldi	r24, 0x4E	; 78
     b78:	91 e0       	ldi	r25, 0x01	; 1
     b7a:	0e 94 72 01 	call	0x2e4	; 0x2e4 <LCD_String>
						//for(int i=1;i<=20;i++){
						int x;
						for(x=1;x<=4;x++){
     b7e:	81 e0       	ldi	r24, 0x01	; 1
     b80:	90 e0       	ldi	r25, 0x00	; 0
     b82:	13 c0       	rjmp	.+38     	; 0xbaa <main+0x184>
							if(pinRead(PINC,3)==0x08){
     b84:	9b 9b       	sbis	0x13, 3	; 19
     b86:	07 c0       	rjmp	.+14     	; 0xb96 <main+0x170>
								stopAlarm();
     b88:	0e 94 af 04 	call	0x95e	; 0x95e <stopAlarm>
								offHazardLight();
     b8c:	0e 94 b7 04 	call	0x96e	; 0x96e <offHazardLight>
								LCD_Clear();
     b90:	0e 94 a4 01 	call	0x348	; 0x348 <LCD_Clear>
								goto start;
     b94:	6a cf       	rjmp	.-300    	; 0xa6a <main+0x44>
     b96:	4f e3       	ldi	r20, 0x3F	; 63
     b98:	2d e0       	ldi	r18, 0x0D	; 13
     b9a:	33 e0       	ldi	r19, 0x03	; 3
     b9c:	41 50       	subi	r20, 0x01	; 1
     b9e:	20 40       	sbci	r18, 0x00	; 0
     ba0:	30 40       	sbci	r19, 0x00	; 0
     ba2:	e1 f7       	brne	.-8      	; 0xb9c <main+0x176>
     ba4:	00 c0       	rjmp	.+0      	; 0xba6 <main+0x180>
     ba6:	00 00       	nop
						onHazardLight();
						LCD_Command(0xc0);
						LCD_String("Waiting..");
						//for(int i=1;i<=20;i++){
						int x;
						for(x=1;x<=4;x++){
     ba8:	01 96       	adiw	r24, 0x01	; 1
     baa:	85 30       	cpi	r24, 0x05	; 5
     bac:	91 05       	cpc	r25, r1
     bae:	54 f3       	brlt	.-44     	; 0xb84 <main+0x15e>
								LCD_Clear();
								goto start;
							}
							_delay_ms(125);
						}
						LCD_Clear();
     bb0:	0e 94 a4 01 	call	0x348	; 0x348 <LCD_Clear>
						LCD_String("Waiting");
     bb4:	88 e5       	ldi	r24, 0x58	; 88
     bb6:	91 e0       	ldi	r25, 0x01	; 1
     bb8:	0e 94 72 01 	call	0x2e4	; 0x2e4 <LCD_String>
						LCD_Command(0xc0);
     bbc:	80 ec       	ldi	r24, 0xC0	; 192
     bbe:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <LCD_Command>
						LCD_String("Complete");
     bc2:	80 e6       	ldi	r24, 0x60	; 96
     bc4:	91 e0       	ldi	r25, 0x01	; 1
     bc6:	0e 94 72 01 	call	0x2e4	; 0x2e4 <LCD_String>
						offHazardLight();
     bca:	0e 94 b7 04 	call	0x96e	; 0x96e <offHazardLight>
						stopAlarm();
     bce:	0e 94 af 04 	call	0x95e	; 0x95e <stopAlarm>
						OCR0=0;
     bd2:	1c be       	out	0x3c, r1	; 60
						LCD_Clear();
     bd4:	0e 94 a4 01 	call	0x348	; 0x348 <LCD_Clear>
						LCD_String("Speed is");
     bd8:	89 e6       	ldi	r24, 0x69	; 105
     bda:	91 e0       	ldi	r25, 0x01	; 1
     bdc:	0e 94 72 01 	call	0x2e4	; 0x2e4 <LCD_String>
						LCD_Command(0xc0);
     be0:	80 ec       	ldi	r24, 0xC0	; 192
     be2:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <LCD_Command>
						LCD_String("Reducing..");
     be6:	82 e7       	ldi	r24, 0x72	; 114
     be8:	91 e0       	ldi	r25, 0x01	; 1
     bea:	0e 94 72 01 	call	0x2e4	; 0x2e4 <LCD_String>
						sendLocation("Driver is Sleeping");
     bee:	8d e7       	ldi	r24, 0x7D	; 125
     bf0:	91 e0       	ldi	r25, 0x01	; 1
     bf2:	0e 94 ef 04 	call	0x9de	; 0x9de <sendLocation>
						playRadio();
     bf6:	0e 94 bb 04 	call	0x976	; 0x976 <playRadio>
     bfa:	ff cf       	rjmp	.-2      	; 0xbfa <main+0x1d4>
						while(1){}//let motor to slowdown fully
					}
				}
				//------------------------------------------------------------
			}else{
				LCD_String("Vehicle is");
     bfc:	80 e9       	ldi	r24, 0x90	; 144
     bfe:	91 e0       	ldi	r25, 0x01	; 1
     c00:	0e 94 72 01 	call	0x2e4	; 0x2e4 <LCD_String>
				LCD_Command(0xc0);
     c04:	80 ec       	ldi	r24, 0xC0	; 192
     c06:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <LCD_Command>
				LCD_String("not moving");
     c0a:	8b e9       	ldi	r24, 0x9B	; 155
     c0c:	91 e0       	ldi	r25, 0x01	; 1
     c0e:	0e 94 72 01 	call	0x2e4	; 0x2e4 <LCD_String>
     c12:	4f e7       	ldi	r20, 0x7F	; 127
     c14:	88 e3       	ldi	r24, 0x38	; 56
     c16:	91 e0       	ldi	r25, 0x01	; 1
     c18:	41 50       	subi	r20, 0x01	; 1
     c1a:	80 40       	sbci	r24, 0x00	; 0
     c1c:	90 40       	sbci	r25, 0x00	; 0
     c1e:	e1 f7       	brne	.-8      	; 0xc18 <main+0x1f2>
     c20:	00 c0       	rjmp	.+0      	; 0xc22 <main+0x1fc>
     c22:	00 00       	nop
				_delay_ms(50);
				LCD_Clear();
     c24:	0e 94 a4 01 	call	0x348	; 0x348 <LCD_Clear>
     c28:	2f cf       	rjmp	.-418    	; 0xa88 <main+0x62>

00000c2a <__subsf3>:
     c2a:	50 58       	subi	r21, 0x80	; 128

00000c2c <__addsf3>:
     c2c:	bb 27       	eor	r27, r27
     c2e:	aa 27       	eor	r26, r26
     c30:	0e 94 2d 06 	call	0xc5a	; 0xc5a <__addsf3x>
     c34:	0c 94 a7 07 	jmp	0xf4e	; 0xf4e <__fp_round>
     c38:	0e 94 99 07 	call	0xf32	; 0xf32 <__fp_pscA>
     c3c:	38 f0       	brcs	.+14     	; 0xc4c <__addsf3+0x20>
     c3e:	0e 94 a0 07 	call	0xf40	; 0xf40 <__fp_pscB>
     c42:	20 f0       	brcs	.+8      	; 0xc4c <__addsf3+0x20>
     c44:	39 f4       	brne	.+14     	; 0xc54 <__addsf3+0x28>
     c46:	9f 3f       	cpi	r25, 0xFF	; 255
     c48:	19 f4       	brne	.+6      	; 0xc50 <__addsf3+0x24>
     c4a:	26 f4       	brtc	.+8      	; 0xc54 <__addsf3+0x28>
     c4c:	0c 94 96 07 	jmp	0xf2c	; 0xf2c <__fp_nan>
     c50:	0e f4       	brtc	.+2      	; 0xc54 <__addsf3+0x28>
     c52:	e0 95       	com	r30
     c54:	e7 fb       	bst	r30, 7
     c56:	0c 94 90 07 	jmp	0xf20	; 0xf20 <__fp_inf>

00000c5a <__addsf3x>:
     c5a:	e9 2f       	mov	r30, r25
     c5c:	0e 94 b8 07 	call	0xf70	; 0xf70 <__fp_split3>
     c60:	58 f3       	brcs	.-42     	; 0xc38 <__addsf3+0xc>
     c62:	ba 17       	cp	r27, r26
     c64:	62 07       	cpc	r22, r18
     c66:	73 07       	cpc	r23, r19
     c68:	84 07       	cpc	r24, r20
     c6a:	95 07       	cpc	r25, r21
     c6c:	20 f0       	brcs	.+8      	; 0xc76 <__addsf3x+0x1c>
     c6e:	79 f4       	brne	.+30     	; 0xc8e <__addsf3x+0x34>
     c70:	a6 f5       	brtc	.+104    	; 0xcda <__addsf3x+0x80>
     c72:	0c 94 da 07 	jmp	0xfb4	; 0xfb4 <__fp_zero>
     c76:	0e f4       	brtc	.+2      	; 0xc7a <__addsf3x+0x20>
     c78:	e0 95       	com	r30
     c7a:	0b 2e       	mov	r0, r27
     c7c:	ba 2f       	mov	r27, r26
     c7e:	a0 2d       	mov	r26, r0
     c80:	0b 01       	movw	r0, r22
     c82:	b9 01       	movw	r22, r18
     c84:	90 01       	movw	r18, r0
     c86:	0c 01       	movw	r0, r24
     c88:	ca 01       	movw	r24, r20
     c8a:	a0 01       	movw	r20, r0
     c8c:	11 24       	eor	r1, r1
     c8e:	ff 27       	eor	r31, r31
     c90:	59 1b       	sub	r21, r25
     c92:	99 f0       	breq	.+38     	; 0xcba <__addsf3x+0x60>
     c94:	59 3f       	cpi	r21, 0xF9	; 249
     c96:	50 f4       	brcc	.+20     	; 0xcac <__addsf3x+0x52>
     c98:	50 3e       	cpi	r21, 0xE0	; 224
     c9a:	68 f1       	brcs	.+90     	; 0xcf6 <__addsf3x+0x9c>
     c9c:	1a 16       	cp	r1, r26
     c9e:	f0 40       	sbci	r31, 0x00	; 0
     ca0:	a2 2f       	mov	r26, r18
     ca2:	23 2f       	mov	r18, r19
     ca4:	34 2f       	mov	r19, r20
     ca6:	44 27       	eor	r20, r20
     ca8:	58 5f       	subi	r21, 0xF8	; 248
     caa:	f3 cf       	rjmp	.-26     	; 0xc92 <__addsf3x+0x38>
     cac:	46 95       	lsr	r20
     cae:	37 95       	ror	r19
     cb0:	27 95       	ror	r18
     cb2:	a7 95       	ror	r26
     cb4:	f0 40       	sbci	r31, 0x00	; 0
     cb6:	53 95       	inc	r21
     cb8:	c9 f7       	brne	.-14     	; 0xcac <__addsf3x+0x52>
     cba:	7e f4       	brtc	.+30     	; 0xcda <__addsf3x+0x80>
     cbc:	1f 16       	cp	r1, r31
     cbe:	ba 0b       	sbc	r27, r26
     cc0:	62 0b       	sbc	r22, r18
     cc2:	73 0b       	sbc	r23, r19
     cc4:	84 0b       	sbc	r24, r20
     cc6:	ba f0       	brmi	.+46     	; 0xcf6 <__addsf3x+0x9c>
     cc8:	91 50       	subi	r25, 0x01	; 1
     cca:	a1 f0       	breq	.+40     	; 0xcf4 <__addsf3x+0x9a>
     ccc:	ff 0f       	add	r31, r31
     cce:	bb 1f       	adc	r27, r27
     cd0:	66 1f       	adc	r22, r22
     cd2:	77 1f       	adc	r23, r23
     cd4:	88 1f       	adc	r24, r24
     cd6:	c2 f7       	brpl	.-16     	; 0xcc8 <__addsf3x+0x6e>
     cd8:	0e c0       	rjmp	.+28     	; 0xcf6 <__addsf3x+0x9c>
     cda:	ba 0f       	add	r27, r26
     cdc:	62 1f       	adc	r22, r18
     cde:	73 1f       	adc	r23, r19
     ce0:	84 1f       	adc	r24, r20
     ce2:	48 f4       	brcc	.+18     	; 0xcf6 <__addsf3x+0x9c>
     ce4:	87 95       	ror	r24
     ce6:	77 95       	ror	r23
     ce8:	67 95       	ror	r22
     cea:	b7 95       	ror	r27
     cec:	f7 95       	ror	r31
     cee:	9e 3f       	cpi	r25, 0xFE	; 254
     cf0:	08 f0       	brcs	.+2      	; 0xcf4 <__addsf3x+0x9a>
     cf2:	b0 cf       	rjmp	.-160    	; 0xc54 <__addsf3+0x28>
     cf4:	93 95       	inc	r25
     cf6:	88 0f       	add	r24, r24
     cf8:	08 f0       	brcs	.+2      	; 0xcfc <__addsf3x+0xa2>
     cfa:	99 27       	eor	r25, r25
     cfc:	ee 0f       	add	r30, r30
     cfe:	97 95       	ror	r25
     d00:	87 95       	ror	r24
     d02:	08 95       	ret

00000d04 <__cmpsf2>:
     d04:	0e 94 6c 07 	call	0xed8	; 0xed8 <__fp_cmp>
     d08:	08 f4       	brcc	.+2      	; 0xd0c <__cmpsf2+0x8>
     d0a:	81 e0       	ldi	r24, 0x01	; 1
     d0c:	08 95       	ret

00000d0e <__divsf3>:
     d0e:	0e 94 9b 06 	call	0xd36	; 0xd36 <__divsf3x>
     d12:	0c 94 a7 07 	jmp	0xf4e	; 0xf4e <__fp_round>
     d16:	0e 94 a0 07 	call	0xf40	; 0xf40 <__fp_pscB>
     d1a:	58 f0       	brcs	.+22     	; 0xd32 <__divsf3+0x24>
     d1c:	0e 94 99 07 	call	0xf32	; 0xf32 <__fp_pscA>
     d20:	40 f0       	brcs	.+16     	; 0xd32 <__divsf3+0x24>
     d22:	29 f4       	brne	.+10     	; 0xd2e <__divsf3+0x20>
     d24:	5f 3f       	cpi	r21, 0xFF	; 255
     d26:	29 f0       	breq	.+10     	; 0xd32 <__divsf3+0x24>
     d28:	0c 94 90 07 	jmp	0xf20	; 0xf20 <__fp_inf>
     d2c:	51 11       	cpse	r21, r1
     d2e:	0c 94 db 07 	jmp	0xfb6	; 0xfb6 <__fp_szero>
     d32:	0c 94 96 07 	jmp	0xf2c	; 0xf2c <__fp_nan>

00000d36 <__divsf3x>:
     d36:	0e 94 b8 07 	call	0xf70	; 0xf70 <__fp_split3>
     d3a:	68 f3       	brcs	.-38     	; 0xd16 <__divsf3+0x8>

00000d3c <__divsf3_pse>:
     d3c:	99 23       	and	r25, r25
     d3e:	b1 f3       	breq	.-20     	; 0xd2c <__divsf3+0x1e>
     d40:	55 23       	and	r21, r21
     d42:	91 f3       	breq	.-28     	; 0xd28 <__divsf3+0x1a>
     d44:	95 1b       	sub	r25, r21
     d46:	55 0b       	sbc	r21, r21
     d48:	bb 27       	eor	r27, r27
     d4a:	aa 27       	eor	r26, r26
     d4c:	62 17       	cp	r22, r18
     d4e:	73 07       	cpc	r23, r19
     d50:	84 07       	cpc	r24, r20
     d52:	38 f0       	brcs	.+14     	; 0xd62 <__divsf3_pse+0x26>
     d54:	9f 5f       	subi	r25, 0xFF	; 255
     d56:	5f 4f       	sbci	r21, 0xFF	; 255
     d58:	22 0f       	add	r18, r18
     d5a:	33 1f       	adc	r19, r19
     d5c:	44 1f       	adc	r20, r20
     d5e:	aa 1f       	adc	r26, r26
     d60:	a9 f3       	breq	.-22     	; 0xd4c <__divsf3_pse+0x10>
     d62:	35 d0       	rcall	.+106    	; 0xdce <__divsf3_pse+0x92>
     d64:	0e 2e       	mov	r0, r30
     d66:	3a f0       	brmi	.+14     	; 0xd76 <__divsf3_pse+0x3a>
     d68:	e0 e8       	ldi	r30, 0x80	; 128
     d6a:	32 d0       	rcall	.+100    	; 0xdd0 <__divsf3_pse+0x94>
     d6c:	91 50       	subi	r25, 0x01	; 1
     d6e:	50 40       	sbci	r21, 0x00	; 0
     d70:	e6 95       	lsr	r30
     d72:	00 1c       	adc	r0, r0
     d74:	ca f7       	brpl	.-14     	; 0xd68 <__divsf3_pse+0x2c>
     d76:	2b d0       	rcall	.+86     	; 0xdce <__divsf3_pse+0x92>
     d78:	fe 2f       	mov	r31, r30
     d7a:	29 d0       	rcall	.+82     	; 0xdce <__divsf3_pse+0x92>
     d7c:	66 0f       	add	r22, r22
     d7e:	77 1f       	adc	r23, r23
     d80:	88 1f       	adc	r24, r24
     d82:	bb 1f       	adc	r27, r27
     d84:	26 17       	cp	r18, r22
     d86:	37 07       	cpc	r19, r23
     d88:	48 07       	cpc	r20, r24
     d8a:	ab 07       	cpc	r26, r27
     d8c:	b0 e8       	ldi	r27, 0x80	; 128
     d8e:	09 f0       	breq	.+2      	; 0xd92 <__divsf3_pse+0x56>
     d90:	bb 0b       	sbc	r27, r27
     d92:	80 2d       	mov	r24, r0
     d94:	bf 01       	movw	r22, r30
     d96:	ff 27       	eor	r31, r31
     d98:	93 58       	subi	r25, 0x83	; 131
     d9a:	5f 4f       	sbci	r21, 0xFF	; 255
     d9c:	3a f0       	brmi	.+14     	; 0xdac <__divsf3_pse+0x70>
     d9e:	9e 3f       	cpi	r25, 0xFE	; 254
     da0:	51 05       	cpc	r21, r1
     da2:	78 f0       	brcs	.+30     	; 0xdc2 <__divsf3_pse+0x86>
     da4:	0c 94 90 07 	jmp	0xf20	; 0xf20 <__fp_inf>
     da8:	0c 94 db 07 	jmp	0xfb6	; 0xfb6 <__fp_szero>
     dac:	5f 3f       	cpi	r21, 0xFF	; 255
     dae:	e4 f3       	brlt	.-8      	; 0xda8 <__divsf3_pse+0x6c>
     db0:	98 3e       	cpi	r25, 0xE8	; 232
     db2:	d4 f3       	brlt	.-12     	; 0xda8 <__divsf3_pse+0x6c>
     db4:	86 95       	lsr	r24
     db6:	77 95       	ror	r23
     db8:	67 95       	ror	r22
     dba:	b7 95       	ror	r27
     dbc:	f7 95       	ror	r31
     dbe:	9f 5f       	subi	r25, 0xFF	; 255
     dc0:	c9 f7       	brne	.-14     	; 0xdb4 <__divsf3_pse+0x78>
     dc2:	88 0f       	add	r24, r24
     dc4:	91 1d       	adc	r25, r1
     dc6:	96 95       	lsr	r25
     dc8:	87 95       	ror	r24
     dca:	97 f9       	bld	r25, 7
     dcc:	08 95       	ret
     dce:	e1 e0       	ldi	r30, 0x01	; 1
     dd0:	66 0f       	add	r22, r22
     dd2:	77 1f       	adc	r23, r23
     dd4:	88 1f       	adc	r24, r24
     dd6:	bb 1f       	adc	r27, r27
     dd8:	62 17       	cp	r22, r18
     dda:	73 07       	cpc	r23, r19
     ddc:	84 07       	cpc	r24, r20
     dde:	ba 07       	cpc	r27, r26
     de0:	20 f0       	brcs	.+8      	; 0xdea <__divsf3_pse+0xae>
     de2:	62 1b       	sub	r22, r18
     de4:	73 0b       	sbc	r23, r19
     de6:	84 0b       	sbc	r24, r20
     de8:	ba 0b       	sbc	r27, r26
     dea:	ee 1f       	adc	r30, r30
     dec:	88 f7       	brcc	.-30     	; 0xdd0 <__divsf3_pse+0x94>
     dee:	e0 95       	com	r30
     df0:	08 95       	ret

00000df2 <__fixsfsi>:
     df2:	0e 94 00 07 	call	0xe00	; 0xe00 <__fixunssfsi>
     df6:	68 94       	set
     df8:	b1 11       	cpse	r27, r1
     dfa:	0c 94 db 07 	jmp	0xfb6	; 0xfb6 <__fp_szero>
     dfe:	08 95       	ret

00000e00 <__fixunssfsi>:
     e00:	0e 94 c0 07 	call	0xf80	; 0xf80 <__fp_splitA>
     e04:	88 f0       	brcs	.+34     	; 0xe28 <__fixunssfsi+0x28>
     e06:	9f 57       	subi	r25, 0x7F	; 127
     e08:	98 f0       	brcs	.+38     	; 0xe30 <__fixunssfsi+0x30>
     e0a:	b9 2f       	mov	r27, r25
     e0c:	99 27       	eor	r25, r25
     e0e:	b7 51       	subi	r27, 0x17	; 23
     e10:	b0 f0       	brcs	.+44     	; 0xe3e <__fixunssfsi+0x3e>
     e12:	e1 f0       	breq	.+56     	; 0xe4c <__fixunssfsi+0x4c>
     e14:	66 0f       	add	r22, r22
     e16:	77 1f       	adc	r23, r23
     e18:	88 1f       	adc	r24, r24
     e1a:	99 1f       	adc	r25, r25
     e1c:	1a f0       	brmi	.+6      	; 0xe24 <__fixunssfsi+0x24>
     e1e:	ba 95       	dec	r27
     e20:	c9 f7       	brne	.-14     	; 0xe14 <__fixunssfsi+0x14>
     e22:	14 c0       	rjmp	.+40     	; 0xe4c <__fixunssfsi+0x4c>
     e24:	b1 30       	cpi	r27, 0x01	; 1
     e26:	91 f0       	breq	.+36     	; 0xe4c <__fixunssfsi+0x4c>
     e28:	0e 94 da 07 	call	0xfb4	; 0xfb4 <__fp_zero>
     e2c:	b1 e0       	ldi	r27, 0x01	; 1
     e2e:	08 95       	ret
     e30:	0c 94 da 07 	jmp	0xfb4	; 0xfb4 <__fp_zero>
     e34:	67 2f       	mov	r22, r23
     e36:	78 2f       	mov	r23, r24
     e38:	88 27       	eor	r24, r24
     e3a:	b8 5f       	subi	r27, 0xF8	; 248
     e3c:	39 f0       	breq	.+14     	; 0xe4c <__fixunssfsi+0x4c>
     e3e:	b9 3f       	cpi	r27, 0xF9	; 249
     e40:	cc f3       	brlt	.-14     	; 0xe34 <__fixunssfsi+0x34>
     e42:	86 95       	lsr	r24
     e44:	77 95       	ror	r23
     e46:	67 95       	ror	r22
     e48:	b3 95       	inc	r27
     e4a:	d9 f7       	brne	.-10     	; 0xe42 <__fixunssfsi+0x42>
     e4c:	3e f4       	brtc	.+14     	; 0xe5c <__fixunssfsi+0x5c>
     e4e:	90 95       	com	r25
     e50:	80 95       	com	r24
     e52:	70 95       	com	r23
     e54:	61 95       	neg	r22
     e56:	7f 4f       	sbci	r23, 0xFF	; 255
     e58:	8f 4f       	sbci	r24, 0xFF	; 255
     e5a:	9f 4f       	sbci	r25, 0xFF	; 255
     e5c:	08 95       	ret

00000e5e <__floatunsisf>:
     e5e:	e8 94       	clt
     e60:	09 c0       	rjmp	.+18     	; 0xe74 <__floatsisf+0x12>

00000e62 <__floatsisf>:
     e62:	97 fb       	bst	r25, 7
     e64:	3e f4       	brtc	.+14     	; 0xe74 <__floatsisf+0x12>
     e66:	90 95       	com	r25
     e68:	80 95       	com	r24
     e6a:	70 95       	com	r23
     e6c:	61 95       	neg	r22
     e6e:	7f 4f       	sbci	r23, 0xFF	; 255
     e70:	8f 4f       	sbci	r24, 0xFF	; 255
     e72:	9f 4f       	sbci	r25, 0xFF	; 255
     e74:	99 23       	and	r25, r25
     e76:	a9 f0       	breq	.+42     	; 0xea2 <__floatsisf+0x40>
     e78:	f9 2f       	mov	r31, r25
     e7a:	96 e9       	ldi	r25, 0x96	; 150
     e7c:	bb 27       	eor	r27, r27
     e7e:	93 95       	inc	r25
     e80:	f6 95       	lsr	r31
     e82:	87 95       	ror	r24
     e84:	77 95       	ror	r23
     e86:	67 95       	ror	r22
     e88:	b7 95       	ror	r27
     e8a:	f1 11       	cpse	r31, r1
     e8c:	f8 cf       	rjmp	.-16     	; 0xe7e <__floatsisf+0x1c>
     e8e:	fa f4       	brpl	.+62     	; 0xece <__floatsisf+0x6c>
     e90:	bb 0f       	add	r27, r27
     e92:	11 f4       	brne	.+4      	; 0xe98 <__floatsisf+0x36>
     e94:	60 ff       	sbrs	r22, 0
     e96:	1b c0       	rjmp	.+54     	; 0xece <__floatsisf+0x6c>
     e98:	6f 5f       	subi	r22, 0xFF	; 255
     e9a:	7f 4f       	sbci	r23, 0xFF	; 255
     e9c:	8f 4f       	sbci	r24, 0xFF	; 255
     e9e:	9f 4f       	sbci	r25, 0xFF	; 255
     ea0:	16 c0       	rjmp	.+44     	; 0xece <__floatsisf+0x6c>
     ea2:	88 23       	and	r24, r24
     ea4:	11 f0       	breq	.+4      	; 0xeaa <__floatsisf+0x48>
     ea6:	96 e9       	ldi	r25, 0x96	; 150
     ea8:	11 c0       	rjmp	.+34     	; 0xecc <__floatsisf+0x6a>
     eaa:	77 23       	and	r23, r23
     eac:	21 f0       	breq	.+8      	; 0xeb6 <__floatsisf+0x54>
     eae:	9e e8       	ldi	r25, 0x8E	; 142
     eb0:	87 2f       	mov	r24, r23
     eb2:	76 2f       	mov	r23, r22
     eb4:	05 c0       	rjmp	.+10     	; 0xec0 <__floatsisf+0x5e>
     eb6:	66 23       	and	r22, r22
     eb8:	71 f0       	breq	.+28     	; 0xed6 <__floatsisf+0x74>
     eba:	96 e8       	ldi	r25, 0x86	; 134
     ebc:	86 2f       	mov	r24, r22
     ebe:	70 e0       	ldi	r23, 0x00	; 0
     ec0:	60 e0       	ldi	r22, 0x00	; 0
     ec2:	2a f0       	brmi	.+10     	; 0xece <__floatsisf+0x6c>
     ec4:	9a 95       	dec	r25
     ec6:	66 0f       	add	r22, r22
     ec8:	77 1f       	adc	r23, r23
     eca:	88 1f       	adc	r24, r24
     ecc:	da f7       	brpl	.-10     	; 0xec4 <__floatsisf+0x62>
     ece:	88 0f       	add	r24, r24
     ed0:	96 95       	lsr	r25
     ed2:	87 95       	ror	r24
     ed4:	97 f9       	bld	r25, 7
     ed6:	08 95       	ret

00000ed8 <__fp_cmp>:
     ed8:	99 0f       	add	r25, r25
     eda:	00 08       	sbc	r0, r0
     edc:	55 0f       	add	r21, r21
     ede:	aa 0b       	sbc	r26, r26
     ee0:	e0 e8       	ldi	r30, 0x80	; 128
     ee2:	fe ef       	ldi	r31, 0xFE	; 254
     ee4:	16 16       	cp	r1, r22
     ee6:	17 06       	cpc	r1, r23
     ee8:	e8 07       	cpc	r30, r24
     eea:	f9 07       	cpc	r31, r25
     eec:	c0 f0       	brcs	.+48     	; 0xf1e <__fp_cmp+0x46>
     eee:	12 16       	cp	r1, r18
     ef0:	13 06       	cpc	r1, r19
     ef2:	e4 07       	cpc	r30, r20
     ef4:	f5 07       	cpc	r31, r21
     ef6:	98 f0       	brcs	.+38     	; 0xf1e <__fp_cmp+0x46>
     ef8:	62 1b       	sub	r22, r18
     efa:	73 0b       	sbc	r23, r19
     efc:	84 0b       	sbc	r24, r20
     efe:	95 0b       	sbc	r25, r21
     f00:	39 f4       	brne	.+14     	; 0xf10 <__fp_cmp+0x38>
     f02:	0a 26       	eor	r0, r26
     f04:	61 f0       	breq	.+24     	; 0xf1e <__fp_cmp+0x46>
     f06:	23 2b       	or	r18, r19
     f08:	24 2b       	or	r18, r20
     f0a:	25 2b       	or	r18, r21
     f0c:	21 f4       	brne	.+8      	; 0xf16 <__fp_cmp+0x3e>
     f0e:	08 95       	ret
     f10:	0a 26       	eor	r0, r26
     f12:	09 f4       	brne	.+2      	; 0xf16 <__fp_cmp+0x3e>
     f14:	a1 40       	sbci	r26, 0x01	; 1
     f16:	a6 95       	lsr	r26
     f18:	8f ef       	ldi	r24, 0xFF	; 255
     f1a:	81 1d       	adc	r24, r1
     f1c:	81 1d       	adc	r24, r1
     f1e:	08 95       	ret

00000f20 <__fp_inf>:
     f20:	97 f9       	bld	r25, 7
     f22:	9f 67       	ori	r25, 0x7F	; 127
     f24:	80 e8       	ldi	r24, 0x80	; 128
     f26:	70 e0       	ldi	r23, 0x00	; 0
     f28:	60 e0       	ldi	r22, 0x00	; 0
     f2a:	08 95       	ret

00000f2c <__fp_nan>:
     f2c:	9f ef       	ldi	r25, 0xFF	; 255
     f2e:	80 ec       	ldi	r24, 0xC0	; 192
     f30:	08 95       	ret

00000f32 <__fp_pscA>:
     f32:	00 24       	eor	r0, r0
     f34:	0a 94       	dec	r0
     f36:	16 16       	cp	r1, r22
     f38:	17 06       	cpc	r1, r23
     f3a:	18 06       	cpc	r1, r24
     f3c:	09 06       	cpc	r0, r25
     f3e:	08 95       	ret

00000f40 <__fp_pscB>:
     f40:	00 24       	eor	r0, r0
     f42:	0a 94       	dec	r0
     f44:	12 16       	cp	r1, r18
     f46:	13 06       	cpc	r1, r19
     f48:	14 06       	cpc	r1, r20
     f4a:	05 06       	cpc	r0, r21
     f4c:	08 95       	ret

00000f4e <__fp_round>:
     f4e:	09 2e       	mov	r0, r25
     f50:	03 94       	inc	r0
     f52:	00 0c       	add	r0, r0
     f54:	11 f4       	brne	.+4      	; 0xf5a <__fp_round+0xc>
     f56:	88 23       	and	r24, r24
     f58:	52 f0       	brmi	.+20     	; 0xf6e <__fp_round+0x20>
     f5a:	bb 0f       	add	r27, r27
     f5c:	40 f4       	brcc	.+16     	; 0xf6e <__fp_round+0x20>
     f5e:	bf 2b       	or	r27, r31
     f60:	11 f4       	brne	.+4      	; 0xf66 <__fp_round+0x18>
     f62:	60 ff       	sbrs	r22, 0
     f64:	04 c0       	rjmp	.+8      	; 0xf6e <__fp_round+0x20>
     f66:	6f 5f       	subi	r22, 0xFF	; 255
     f68:	7f 4f       	sbci	r23, 0xFF	; 255
     f6a:	8f 4f       	sbci	r24, 0xFF	; 255
     f6c:	9f 4f       	sbci	r25, 0xFF	; 255
     f6e:	08 95       	ret

00000f70 <__fp_split3>:
     f70:	57 fd       	sbrc	r21, 7
     f72:	90 58       	subi	r25, 0x80	; 128
     f74:	44 0f       	add	r20, r20
     f76:	55 1f       	adc	r21, r21
     f78:	59 f0       	breq	.+22     	; 0xf90 <__fp_splitA+0x10>
     f7a:	5f 3f       	cpi	r21, 0xFF	; 255
     f7c:	71 f0       	breq	.+28     	; 0xf9a <__fp_splitA+0x1a>
     f7e:	47 95       	ror	r20

00000f80 <__fp_splitA>:
     f80:	88 0f       	add	r24, r24
     f82:	97 fb       	bst	r25, 7
     f84:	99 1f       	adc	r25, r25
     f86:	61 f0       	breq	.+24     	; 0xfa0 <__fp_splitA+0x20>
     f88:	9f 3f       	cpi	r25, 0xFF	; 255
     f8a:	79 f0       	breq	.+30     	; 0xfaa <__fp_splitA+0x2a>
     f8c:	87 95       	ror	r24
     f8e:	08 95       	ret
     f90:	12 16       	cp	r1, r18
     f92:	13 06       	cpc	r1, r19
     f94:	14 06       	cpc	r1, r20
     f96:	55 1f       	adc	r21, r21
     f98:	f2 cf       	rjmp	.-28     	; 0xf7e <__fp_split3+0xe>
     f9a:	46 95       	lsr	r20
     f9c:	f1 df       	rcall	.-30     	; 0xf80 <__fp_splitA>
     f9e:	08 c0       	rjmp	.+16     	; 0xfb0 <__fp_splitA+0x30>
     fa0:	16 16       	cp	r1, r22
     fa2:	17 06       	cpc	r1, r23
     fa4:	18 06       	cpc	r1, r24
     fa6:	99 1f       	adc	r25, r25
     fa8:	f1 cf       	rjmp	.-30     	; 0xf8c <__fp_splitA+0xc>
     faa:	86 95       	lsr	r24
     fac:	71 05       	cpc	r23, r1
     fae:	61 05       	cpc	r22, r1
     fb0:	08 94       	sec
     fb2:	08 95       	ret

00000fb4 <__fp_zero>:
     fb4:	e8 94       	clt

00000fb6 <__fp_szero>:
     fb6:	bb 27       	eor	r27, r27
     fb8:	66 27       	eor	r22, r22
     fba:	77 27       	eor	r23, r23
     fbc:	cb 01       	movw	r24, r22
     fbe:	97 f9       	bld	r25, 7
     fc0:	08 95       	ret

00000fc2 <__mulsf3>:
     fc2:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <__mulsf3x>
     fc6:	0c 94 a7 07 	jmp	0xf4e	; 0xf4e <__fp_round>
     fca:	0e 94 99 07 	call	0xf32	; 0xf32 <__fp_pscA>
     fce:	38 f0       	brcs	.+14     	; 0xfde <__mulsf3+0x1c>
     fd0:	0e 94 a0 07 	call	0xf40	; 0xf40 <__fp_pscB>
     fd4:	20 f0       	brcs	.+8      	; 0xfde <__mulsf3+0x1c>
     fd6:	95 23       	and	r25, r21
     fd8:	11 f0       	breq	.+4      	; 0xfde <__mulsf3+0x1c>
     fda:	0c 94 90 07 	jmp	0xf20	; 0xf20 <__fp_inf>
     fde:	0c 94 96 07 	jmp	0xf2c	; 0xf2c <__fp_nan>
     fe2:	11 24       	eor	r1, r1
     fe4:	0c 94 db 07 	jmp	0xfb6	; 0xfb6 <__fp_szero>

00000fe8 <__mulsf3x>:
     fe8:	0e 94 b8 07 	call	0xf70	; 0xf70 <__fp_split3>
     fec:	70 f3       	brcs	.-36     	; 0xfca <__mulsf3+0x8>

00000fee <__mulsf3_pse>:
     fee:	95 9f       	mul	r25, r21
     ff0:	c1 f3       	breq	.-16     	; 0xfe2 <__mulsf3+0x20>
     ff2:	95 0f       	add	r25, r21
     ff4:	50 e0       	ldi	r21, 0x00	; 0
     ff6:	55 1f       	adc	r21, r21
     ff8:	62 9f       	mul	r22, r18
     ffa:	f0 01       	movw	r30, r0
     ffc:	72 9f       	mul	r23, r18
     ffe:	bb 27       	eor	r27, r27
    1000:	f0 0d       	add	r31, r0
    1002:	b1 1d       	adc	r27, r1
    1004:	63 9f       	mul	r22, r19
    1006:	aa 27       	eor	r26, r26
    1008:	f0 0d       	add	r31, r0
    100a:	b1 1d       	adc	r27, r1
    100c:	aa 1f       	adc	r26, r26
    100e:	64 9f       	mul	r22, r20
    1010:	66 27       	eor	r22, r22
    1012:	b0 0d       	add	r27, r0
    1014:	a1 1d       	adc	r26, r1
    1016:	66 1f       	adc	r22, r22
    1018:	82 9f       	mul	r24, r18
    101a:	22 27       	eor	r18, r18
    101c:	b0 0d       	add	r27, r0
    101e:	a1 1d       	adc	r26, r1
    1020:	62 1f       	adc	r22, r18
    1022:	73 9f       	mul	r23, r19
    1024:	b0 0d       	add	r27, r0
    1026:	a1 1d       	adc	r26, r1
    1028:	62 1f       	adc	r22, r18
    102a:	83 9f       	mul	r24, r19
    102c:	a0 0d       	add	r26, r0
    102e:	61 1d       	adc	r22, r1
    1030:	22 1f       	adc	r18, r18
    1032:	74 9f       	mul	r23, r20
    1034:	33 27       	eor	r19, r19
    1036:	a0 0d       	add	r26, r0
    1038:	61 1d       	adc	r22, r1
    103a:	23 1f       	adc	r18, r19
    103c:	84 9f       	mul	r24, r20
    103e:	60 0d       	add	r22, r0
    1040:	21 1d       	adc	r18, r1
    1042:	82 2f       	mov	r24, r18
    1044:	76 2f       	mov	r23, r22
    1046:	6a 2f       	mov	r22, r26
    1048:	11 24       	eor	r1, r1
    104a:	9f 57       	subi	r25, 0x7F	; 127
    104c:	50 40       	sbci	r21, 0x00	; 0
    104e:	9a f0       	brmi	.+38     	; 0x1076 <__mulsf3_pse+0x88>
    1050:	f1 f0       	breq	.+60     	; 0x108e <__mulsf3_pse+0xa0>
    1052:	88 23       	and	r24, r24
    1054:	4a f0       	brmi	.+18     	; 0x1068 <__mulsf3_pse+0x7a>
    1056:	ee 0f       	add	r30, r30
    1058:	ff 1f       	adc	r31, r31
    105a:	bb 1f       	adc	r27, r27
    105c:	66 1f       	adc	r22, r22
    105e:	77 1f       	adc	r23, r23
    1060:	88 1f       	adc	r24, r24
    1062:	91 50       	subi	r25, 0x01	; 1
    1064:	50 40       	sbci	r21, 0x00	; 0
    1066:	a9 f7       	brne	.-22     	; 0x1052 <__mulsf3_pse+0x64>
    1068:	9e 3f       	cpi	r25, 0xFE	; 254
    106a:	51 05       	cpc	r21, r1
    106c:	80 f0       	brcs	.+32     	; 0x108e <__mulsf3_pse+0xa0>
    106e:	0c 94 90 07 	jmp	0xf20	; 0xf20 <__fp_inf>
    1072:	0c 94 db 07 	jmp	0xfb6	; 0xfb6 <__fp_szero>
    1076:	5f 3f       	cpi	r21, 0xFF	; 255
    1078:	e4 f3       	brlt	.-8      	; 0x1072 <__mulsf3_pse+0x84>
    107a:	98 3e       	cpi	r25, 0xE8	; 232
    107c:	d4 f3       	brlt	.-12     	; 0x1072 <__mulsf3_pse+0x84>
    107e:	86 95       	lsr	r24
    1080:	77 95       	ror	r23
    1082:	67 95       	ror	r22
    1084:	b7 95       	ror	r27
    1086:	f7 95       	ror	r31
    1088:	e7 95       	ror	r30
    108a:	9f 5f       	subi	r25, 0xFF	; 255
    108c:	c1 f7       	brne	.-16     	; 0x107e <__mulsf3_pse+0x90>
    108e:	fe 2b       	or	r31, r30
    1090:	88 0f       	add	r24, r24
    1092:	91 1d       	adc	r25, r1
    1094:	96 95       	lsr	r25
    1096:	87 95       	ror	r24
    1098:	97 f9       	bld	r25, 7
    109a:	08 95       	ret

0000109c <__udivmodsi4>:
    109c:	a1 e2       	ldi	r26, 0x21	; 33
    109e:	1a 2e       	mov	r1, r26
    10a0:	aa 1b       	sub	r26, r26
    10a2:	bb 1b       	sub	r27, r27
    10a4:	fd 01       	movw	r30, r26
    10a6:	0d c0       	rjmp	.+26     	; 0x10c2 <__udivmodsi4_ep>

000010a8 <__udivmodsi4_loop>:
    10a8:	aa 1f       	adc	r26, r26
    10aa:	bb 1f       	adc	r27, r27
    10ac:	ee 1f       	adc	r30, r30
    10ae:	ff 1f       	adc	r31, r31
    10b0:	a2 17       	cp	r26, r18
    10b2:	b3 07       	cpc	r27, r19
    10b4:	e4 07       	cpc	r30, r20
    10b6:	f5 07       	cpc	r31, r21
    10b8:	20 f0       	brcs	.+8      	; 0x10c2 <__udivmodsi4_ep>
    10ba:	a2 1b       	sub	r26, r18
    10bc:	b3 0b       	sbc	r27, r19
    10be:	e4 0b       	sbc	r30, r20
    10c0:	f5 0b       	sbc	r31, r21

000010c2 <__udivmodsi4_ep>:
    10c2:	66 1f       	adc	r22, r22
    10c4:	77 1f       	adc	r23, r23
    10c6:	88 1f       	adc	r24, r24
    10c8:	99 1f       	adc	r25, r25
    10ca:	1a 94       	dec	r1
    10cc:	69 f7       	brne	.-38     	; 0x10a8 <__udivmodsi4_loop>
    10ce:	60 95       	com	r22
    10d0:	70 95       	com	r23
    10d2:	80 95       	com	r24
    10d4:	90 95       	com	r25
    10d6:	9b 01       	movw	r18, r22
    10d8:	ac 01       	movw	r20, r24
    10da:	bd 01       	movw	r22, r26
    10dc:	cf 01       	movw	r24, r30
    10de:	08 95       	ret

000010e0 <dtostrf>:
    10e0:	ef 92       	push	r14
    10e2:	0f 93       	push	r16
    10e4:	1f 93       	push	r17
    10e6:	cf 93       	push	r28
    10e8:	df 93       	push	r29
    10ea:	e8 01       	movw	r28, r16
    10ec:	47 fd       	sbrc	r20, 7
    10ee:	02 c0       	rjmp	.+4      	; 0x10f4 <dtostrf+0x14>
    10f0:	34 e0       	ldi	r19, 0x04	; 4
    10f2:	01 c0       	rjmp	.+2      	; 0x10f6 <dtostrf+0x16>
    10f4:	34 e1       	ldi	r19, 0x14	; 20
    10f6:	04 2e       	mov	r0, r20
    10f8:	00 0c       	add	r0, r0
    10fa:	55 0b       	sbc	r21, r21
    10fc:	57 ff       	sbrs	r21, 7
    10fe:	03 c0       	rjmp	.+6      	; 0x1106 <dtostrf+0x26>
    1100:	51 95       	neg	r21
    1102:	41 95       	neg	r20
    1104:	51 09       	sbc	r21, r1
    1106:	e3 2e       	mov	r14, r19
    1108:	02 2f       	mov	r16, r18
    110a:	24 2f       	mov	r18, r20
    110c:	ae 01       	movw	r20, r28
    110e:	0e 94 9f 08 	call	0x113e	; 0x113e <dtoa_prf>
    1112:	ce 01       	movw	r24, r28
    1114:	df 91       	pop	r29
    1116:	cf 91       	pop	r28
    1118:	1f 91       	pop	r17
    111a:	0f 91       	pop	r16
    111c:	ef 90       	pop	r14
    111e:	08 95       	ret

00001120 <atof>:
    1120:	66 27       	eor	r22, r22
    1122:	77 27       	eor	r23, r23
    1124:	0c 94 f9 09 	jmp	0x13f2	; 0x13f2 <strtod>

00001128 <strcat>:
    1128:	fb 01       	movw	r30, r22
    112a:	dc 01       	movw	r26, r24
    112c:	0d 90       	ld	r0, X+
    112e:	00 20       	and	r0, r0
    1130:	e9 f7       	brne	.-6      	; 0x112c <strcat+0x4>
    1132:	11 97       	sbiw	r26, 0x01	; 1
    1134:	01 90       	ld	r0, Z+
    1136:	0d 92       	st	X+, r0
    1138:	00 20       	and	r0, r0
    113a:	e1 f7       	brne	.-8      	; 0x1134 <strcat+0xc>
    113c:	08 95       	ret

0000113e <dtoa_prf>:
    113e:	a9 e0       	ldi	r26, 0x09	; 9
    1140:	b0 e0       	ldi	r27, 0x00	; 0
    1142:	e5 ea       	ldi	r30, 0xA5	; 165
    1144:	f8 e0       	ldi	r31, 0x08	; 8
    1146:	0c 94 54 0c 	jmp	0x18a8	; 0x18a8 <__prologue_saves__+0xc>
    114a:	6a 01       	movw	r12, r20
    114c:	12 2f       	mov	r17, r18
    114e:	b0 2e       	mov	r11, r16
    1150:	2b e3       	ldi	r18, 0x3B	; 59
    1152:	20 17       	cp	r18, r16
    1154:	20 f0       	brcs	.+8      	; 0x115e <dtoa_prf+0x20>
    1156:	ff 24       	eor	r15, r15
    1158:	f3 94       	inc	r15
    115a:	f0 0e       	add	r15, r16
    115c:	02 c0       	rjmp	.+4      	; 0x1162 <dtoa_prf+0x24>
    115e:	2c e3       	ldi	r18, 0x3C	; 60
    1160:	f2 2e       	mov	r15, r18
    1162:	0f 2d       	mov	r16, r15
    1164:	27 e0       	ldi	r18, 0x07	; 7
    1166:	ae 01       	movw	r20, r28
    1168:	4f 5f       	subi	r20, 0xFF	; 255
    116a:	5f 4f       	sbci	r21, 0xFF	; 255
    116c:	0e 94 47 0b 	call	0x168e	; 0x168e <__ftoa_engine>
    1170:	bc 01       	movw	r22, r24
    1172:	49 81       	ldd	r20, Y+1	; 0x01
    1174:	84 2f       	mov	r24, r20
    1176:	89 70       	andi	r24, 0x09	; 9
    1178:	81 30       	cpi	r24, 0x01	; 1
    117a:	31 f0       	breq	.+12     	; 0x1188 <dtoa_prf+0x4a>
    117c:	e1 fc       	sbrc	r14, 1
    117e:	06 c0       	rjmp	.+12     	; 0x118c <dtoa_prf+0x4e>
    1180:	e0 fe       	sbrs	r14, 0
    1182:	06 c0       	rjmp	.+12     	; 0x1190 <dtoa_prf+0x52>
    1184:	90 e2       	ldi	r25, 0x20	; 32
    1186:	05 c0       	rjmp	.+10     	; 0x1192 <dtoa_prf+0x54>
    1188:	9d e2       	ldi	r25, 0x2D	; 45
    118a:	03 c0       	rjmp	.+6      	; 0x1192 <dtoa_prf+0x54>
    118c:	9b e2       	ldi	r25, 0x2B	; 43
    118e:	01 c0       	rjmp	.+2      	; 0x1192 <dtoa_prf+0x54>
    1190:	90 e0       	ldi	r25, 0x00	; 0
    1192:	5e 2d       	mov	r21, r14
    1194:	50 71       	andi	r21, 0x10	; 16
    1196:	43 ff       	sbrs	r20, 3
    1198:	3c c0       	rjmp	.+120    	; 0x1212 <dtoa_prf+0xd4>
    119a:	91 11       	cpse	r25, r1
    119c:	02 c0       	rjmp	.+4      	; 0x11a2 <dtoa_prf+0x64>
    119e:	83 e0       	ldi	r24, 0x03	; 3
    11a0:	01 c0       	rjmp	.+2      	; 0x11a4 <dtoa_prf+0x66>
    11a2:	84 e0       	ldi	r24, 0x04	; 4
    11a4:	81 17       	cp	r24, r17
    11a6:	18 f4       	brcc	.+6      	; 0x11ae <dtoa_prf+0x70>
    11a8:	21 2f       	mov	r18, r17
    11aa:	28 1b       	sub	r18, r24
    11ac:	01 c0       	rjmp	.+2      	; 0x11b0 <dtoa_prf+0x72>
    11ae:	20 e0       	ldi	r18, 0x00	; 0
    11b0:	51 11       	cpse	r21, r1
    11b2:	0b c0       	rjmp	.+22     	; 0x11ca <dtoa_prf+0x8c>
    11b4:	f6 01       	movw	r30, r12
    11b6:	82 2f       	mov	r24, r18
    11b8:	30 e2       	ldi	r19, 0x20	; 32
    11ba:	88 23       	and	r24, r24
    11bc:	19 f0       	breq	.+6      	; 0x11c4 <dtoa_prf+0x86>
    11be:	31 93       	st	Z+, r19
    11c0:	81 50       	subi	r24, 0x01	; 1
    11c2:	fb cf       	rjmp	.-10     	; 0x11ba <dtoa_prf+0x7c>
    11c4:	c2 0e       	add	r12, r18
    11c6:	d1 1c       	adc	r13, r1
    11c8:	20 e0       	ldi	r18, 0x00	; 0
    11ca:	99 23       	and	r25, r25
    11cc:	29 f0       	breq	.+10     	; 0x11d8 <dtoa_prf+0x9a>
    11ce:	d6 01       	movw	r26, r12
    11d0:	9c 93       	st	X, r25
    11d2:	f6 01       	movw	r30, r12
    11d4:	31 96       	adiw	r30, 0x01	; 1
    11d6:	6f 01       	movw	r12, r30
    11d8:	c6 01       	movw	r24, r12
    11da:	03 96       	adiw	r24, 0x03	; 3
    11dc:	e2 fe       	sbrs	r14, 2
    11de:	0a c0       	rjmp	.+20     	; 0x11f4 <dtoa_prf+0xb6>
    11e0:	3e e4       	ldi	r19, 0x4E	; 78
    11e2:	d6 01       	movw	r26, r12
    11e4:	3c 93       	st	X, r19
    11e6:	41 e4       	ldi	r20, 0x41	; 65
    11e8:	11 96       	adiw	r26, 0x01	; 1
    11ea:	4c 93       	st	X, r20
    11ec:	11 97       	sbiw	r26, 0x01	; 1
    11ee:	12 96       	adiw	r26, 0x02	; 2
    11f0:	3c 93       	st	X, r19
    11f2:	06 c0       	rjmp	.+12     	; 0x1200 <dtoa_prf+0xc2>
    11f4:	3e e6       	ldi	r19, 0x6E	; 110
    11f6:	f6 01       	movw	r30, r12
    11f8:	30 83       	st	Z, r19
    11fa:	41 e6       	ldi	r20, 0x61	; 97
    11fc:	41 83       	std	Z+1, r20	; 0x01
    11fe:	32 83       	std	Z+2, r19	; 0x02
    1200:	fc 01       	movw	r30, r24
    1202:	32 2f       	mov	r19, r18
    1204:	40 e2       	ldi	r20, 0x20	; 32
    1206:	33 23       	and	r19, r19
    1208:	09 f4       	brne	.+2      	; 0x120c <dtoa_prf+0xce>
    120a:	42 c0       	rjmp	.+132    	; 0x1290 <dtoa_prf+0x152>
    120c:	41 93       	st	Z+, r20
    120e:	31 50       	subi	r19, 0x01	; 1
    1210:	fa cf       	rjmp	.-12     	; 0x1206 <dtoa_prf+0xc8>
    1212:	42 ff       	sbrs	r20, 2
    1214:	44 c0       	rjmp	.+136    	; 0x129e <dtoa_prf+0x160>
    1216:	91 11       	cpse	r25, r1
    1218:	02 c0       	rjmp	.+4      	; 0x121e <dtoa_prf+0xe0>
    121a:	83 e0       	ldi	r24, 0x03	; 3
    121c:	01 c0       	rjmp	.+2      	; 0x1220 <dtoa_prf+0xe2>
    121e:	84 e0       	ldi	r24, 0x04	; 4
    1220:	81 17       	cp	r24, r17
    1222:	18 f4       	brcc	.+6      	; 0x122a <dtoa_prf+0xec>
    1224:	21 2f       	mov	r18, r17
    1226:	28 1b       	sub	r18, r24
    1228:	01 c0       	rjmp	.+2      	; 0x122c <dtoa_prf+0xee>
    122a:	20 e0       	ldi	r18, 0x00	; 0
    122c:	51 11       	cpse	r21, r1
    122e:	0b c0       	rjmp	.+22     	; 0x1246 <dtoa_prf+0x108>
    1230:	f6 01       	movw	r30, r12
    1232:	82 2f       	mov	r24, r18
    1234:	30 e2       	ldi	r19, 0x20	; 32
    1236:	88 23       	and	r24, r24
    1238:	19 f0       	breq	.+6      	; 0x1240 <dtoa_prf+0x102>
    123a:	31 93       	st	Z+, r19
    123c:	81 50       	subi	r24, 0x01	; 1
    123e:	fb cf       	rjmp	.-10     	; 0x1236 <dtoa_prf+0xf8>
    1240:	c2 0e       	add	r12, r18
    1242:	d1 1c       	adc	r13, r1
    1244:	20 e0       	ldi	r18, 0x00	; 0
    1246:	99 23       	and	r25, r25
    1248:	29 f0       	breq	.+10     	; 0x1254 <dtoa_prf+0x116>
    124a:	d6 01       	movw	r26, r12
    124c:	9c 93       	st	X, r25
    124e:	f6 01       	movw	r30, r12
    1250:	31 96       	adiw	r30, 0x01	; 1
    1252:	6f 01       	movw	r12, r30
    1254:	c6 01       	movw	r24, r12
    1256:	03 96       	adiw	r24, 0x03	; 3
    1258:	e2 fe       	sbrs	r14, 2
    125a:	0b c0       	rjmp	.+22     	; 0x1272 <dtoa_prf+0x134>
    125c:	39 e4       	ldi	r19, 0x49	; 73
    125e:	d6 01       	movw	r26, r12
    1260:	3c 93       	st	X, r19
    1262:	3e e4       	ldi	r19, 0x4E	; 78
    1264:	11 96       	adiw	r26, 0x01	; 1
    1266:	3c 93       	st	X, r19
    1268:	11 97       	sbiw	r26, 0x01	; 1
    126a:	36 e4       	ldi	r19, 0x46	; 70
    126c:	12 96       	adiw	r26, 0x02	; 2
    126e:	3c 93       	st	X, r19
    1270:	07 c0       	rjmp	.+14     	; 0x1280 <dtoa_prf+0x142>
    1272:	39 e6       	ldi	r19, 0x69	; 105
    1274:	f6 01       	movw	r30, r12
    1276:	30 83       	st	Z, r19
    1278:	3e e6       	ldi	r19, 0x6E	; 110
    127a:	31 83       	std	Z+1, r19	; 0x01
    127c:	36 e6       	ldi	r19, 0x66	; 102
    127e:	32 83       	std	Z+2, r19	; 0x02
    1280:	fc 01       	movw	r30, r24
    1282:	32 2f       	mov	r19, r18
    1284:	40 e2       	ldi	r20, 0x20	; 32
    1286:	33 23       	and	r19, r19
    1288:	19 f0       	breq	.+6      	; 0x1290 <dtoa_prf+0x152>
    128a:	41 93       	st	Z+, r20
    128c:	31 50       	subi	r19, 0x01	; 1
    128e:	fb cf       	rjmp	.-10     	; 0x1286 <dtoa_prf+0x148>
    1290:	fc 01       	movw	r30, r24
    1292:	e2 0f       	add	r30, r18
    1294:	f1 1d       	adc	r31, r1
    1296:	10 82       	st	Z, r1
    1298:	8e ef       	ldi	r24, 0xFE	; 254
    129a:	9f ef       	ldi	r25, 0xFF	; 255
    129c:	a6 c0       	rjmp	.+332    	; 0x13ea <dtoa_prf+0x2ac>
    129e:	21 e0       	ldi	r18, 0x01	; 1
    12a0:	30 e0       	ldi	r19, 0x00	; 0
    12a2:	91 11       	cpse	r25, r1
    12a4:	02 c0       	rjmp	.+4      	; 0x12aa <dtoa_prf+0x16c>
    12a6:	20 e0       	ldi	r18, 0x00	; 0
    12a8:	30 e0       	ldi	r19, 0x00	; 0
    12aa:	16 16       	cp	r1, r22
    12ac:	17 06       	cpc	r1, r23
    12ae:	1c f4       	brge	.+6      	; 0x12b6 <dtoa_prf+0x178>
    12b0:	fb 01       	movw	r30, r22
    12b2:	31 96       	adiw	r30, 0x01	; 1
    12b4:	02 c0       	rjmp	.+4      	; 0x12ba <dtoa_prf+0x17c>
    12b6:	e1 e0       	ldi	r30, 0x01	; 1
    12b8:	f0 e0       	ldi	r31, 0x00	; 0
    12ba:	2e 0f       	add	r18, r30
    12bc:	3f 1f       	adc	r19, r31
    12be:	bb 20       	and	r11, r11
    12c0:	21 f0       	breq	.+8      	; 0x12ca <dtoa_prf+0x18c>
    12c2:	eb 2d       	mov	r30, r11
    12c4:	f0 e0       	ldi	r31, 0x00	; 0
    12c6:	31 96       	adiw	r30, 0x01	; 1
    12c8:	02 c0       	rjmp	.+4      	; 0x12ce <dtoa_prf+0x190>
    12ca:	e0 e0       	ldi	r30, 0x00	; 0
    12cc:	f0 e0       	ldi	r31, 0x00	; 0
    12ce:	2e 0f       	add	r18, r30
    12d0:	3f 1f       	adc	r19, r31
    12d2:	e1 2f       	mov	r30, r17
    12d4:	f0 e0       	ldi	r31, 0x00	; 0
    12d6:	2e 17       	cp	r18, r30
    12d8:	3f 07       	cpc	r19, r31
    12da:	1c f4       	brge	.+6      	; 0x12e2 <dtoa_prf+0x1a4>
    12dc:	12 1b       	sub	r17, r18
    12de:	21 2f       	mov	r18, r17
    12e0:	01 c0       	rjmp	.+2      	; 0x12e4 <dtoa_prf+0x1a6>
    12e2:	20 e0       	ldi	r18, 0x00	; 0
    12e4:	8e 2d       	mov	r24, r14
    12e6:	88 71       	andi	r24, 0x18	; 24
    12e8:	59 f4       	brne	.+22     	; 0x1300 <dtoa_prf+0x1c2>
    12ea:	f6 01       	movw	r30, r12
    12ec:	82 2f       	mov	r24, r18
    12ee:	30 e2       	ldi	r19, 0x20	; 32
    12f0:	88 23       	and	r24, r24
    12f2:	19 f0       	breq	.+6      	; 0x12fa <dtoa_prf+0x1bc>
    12f4:	31 93       	st	Z+, r19
    12f6:	81 50       	subi	r24, 0x01	; 1
    12f8:	fb cf       	rjmp	.-10     	; 0x12f0 <dtoa_prf+0x1b2>
    12fa:	c2 0e       	add	r12, r18
    12fc:	d1 1c       	adc	r13, r1
    12fe:	20 e0       	ldi	r18, 0x00	; 0
    1300:	99 23       	and	r25, r25
    1302:	29 f0       	breq	.+10     	; 0x130e <dtoa_prf+0x1d0>
    1304:	d6 01       	movw	r26, r12
    1306:	9c 93       	st	X, r25
    1308:	f6 01       	movw	r30, r12
    130a:	31 96       	adiw	r30, 0x01	; 1
    130c:	6f 01       	movw	r12, r30
    130e:	51 11       	cpse	r21, r1
    1310:	0b c0       	rjmp	.+22     	; 0x1328 <dtoa_prf+0x1ea>
    1312:	f6 01       	movw	r30, r12
    1314:	82 2f       	mov	r24, r18
    1316:	90 e3       	ldi	r25, 0x30	; 48
    1318:	88 23       	and	r24, r24
    131a:	19 f0       	breq	.+6      	; 0x1322 <dtoa_prf+0x1e4>
    131c:	91 93       	st	Z+, r25
    131e:	81 50       	subi	r24, 0x01	; 1
    1320:	fb cf       	rjmp	.-10     	; 0x1318 <dtoa_prf+0x1da>
    1322:	c2 0e       	add	r12, r18
    1324:	d1 1c       	adc	r13, r1
    1326:	20 e0       	ldi	r18, 0x00	; 0
    1328:	0f 2d       	mov	r16, r15
    132a:	06 0f       	add	r16, r22
    132c:	9a 81       	ldd	r25, Y+2	; 0x02
    132e:	34 2f       	mov	r19, r20
    1330:	30 71       	andi	r19, 0x10	; 16
    1332:	44 ff       	sbrs	r20, 4
    1334:	03 c0       	rjmp	.+6      	; 0x133c <dtoa_prf+0x1fe>
    1336:	91 33       	cpi	r25, 0x31	; 49
    1338:	09 f4       	brne	.+2      	; 0x133c <dtoa_prf+0x1fe>
    133a:	01 50       	subi	r16, 0x01	; 1
    133c:	10 16       	cp	r1, r16
    133e:	24 f4       	brge	.+8      	; 0x1348 <dtoa_prf+0x20a>
    1340:	09 30       	cpi	r16, 0x09	; 9
    1342:	18 f0       	brcs	.+6      	; 0x134a <dtoa_prf+0x20c>
    1344:	08 e0       	ldi	r16, 0x08	; 8
    1346:	01 c0       	rjmp	.+2      	; 0x134a <dtoa_prf+0x20c>
    1348:	01 e0       	ldi	r16, 0x01	; 1
    134a:	ab 01       	movw	r20, r22
    134c:	77 ff       	sbrs	r23, 7
    134e:	02 c0       	rjmp	.+4      	; 0x1354 <dtoa_prf+0x216>
    1350:	40 e0       	ldi	r20, 0x00	; 0
    1352:	50 e0       	ldi	r21, 0x00	; 0
    1354:	fb 01       	movw	r30, r22
    1356:	e4 1b       	sub	r30, r20
    1358:	f5 0b       	sbc	r31, r21
    135a:	a1 e0       	ldi	r26, 0x01	; 1
    135c:	b0 e0       	ldi	r27, 0x00	; 0
    135e:	ac 0f       	add	r26, r28
    1360:	bd 1f       	adc	r27, r29
    1362:	ea 0f       	add	r30, r26
    1364:	fb 1f       	adc	r31, r27
    1366:	8e e2       	ldi	r24, 0x2E	; 46
    1368:	a8 2e       	mov	r10, r24
    136a:	4b 01       	movw	r8, r22
    136c:	80 1a       	sub	r8, r16
    136e:	91 08       	sbc	r9, r1
    1370:	0b 2d       	mov	r16, r11
    1372:	10 e0       	ldi	r17, 0x00	; 0
    1374:	11 95       	neg	r17
    1376:	01 95       	neg	r16
    1378:	11 09       	sbc	r17, r1
    137a:	4f 3f       	cpi	r20, 0xFF	; 255
    137c:	bf ef       	ldi	r27, 0xFF	; 255
    137e:	5b 07       	cpc	r21, r27
    1380:	21 f4       	brne	.+8      	; 0x138a <dtoa_prf+0x24c>
    1382:	d6 01       	movw	r26, r12
    1384:	ac 92       	st	X, r10
    1386:	11 96       	adiw	r26, 0x01	; 1
    1388:	6d 01       	movw	r12, r26
    138a:	64 17       	cp	r22, r20
    138c:	75 07       	cpc	r23, r21
    138e:	2c f0       	brlt	.+10     	; 0x139a <dtoa_prf+0x25c>
    1390:	84 16       	cp	r8, r20
    1392:	95 06       	cpc	r9, r21
    1394:	14 f4       	brge	.+4      	; 0x139a <dtoa_prf+0x25c>
    1396:	81 81       	ldd	r24, Z+1	; 0x01
    1398:	01 c0       	rjmp	.+2      	; 0x139c <dtoa_prf+0x25e>
    139a:	80 e3       	ldi	r24, 0x30	; 48
    139c:	41 50       	subi	r20, 0x01	; 1
    139e:	51 09       	sbc	r21, r1
    13a0:	31 96       	adiw	r30, 0x01	; 1
    13a2:	d6 01       	movw	r26, r12
    13a4:	11 96       	adiw	r26, 0x01	; 1
    13a6:	7d 01       	movw	r14, r26
    13a8:	40 17       	cp	r20, r16
    13aa:	51 07       	cpc	r21, r17
    13ac:	24 f0       	brlt	.+8      	; 0x13b6 <dtoa_prf+0x278>
    13ae:	d6 01       	movw	r26, r12
    13b0:	8c 93       	st	X, r24
    13b2:	67 01       	movw	r12, r14
    13b4:	e2 cf       	rjmp	.-60     	; 0x137a <dtoa_prf+0x23c>
    13b6:	64 17       	cp	r22, r20
    13b8:	75 07       	cpc	r23, r21
    13ba:	39 f4       	brne	.+14     	; 0x13ca <dtoa_prf+0x28c>
    13bc:	96 33       	cpi	r25, 0x36	; 54
    13be:	20 f4       	brcc	.+8      	; 0x13c8 <dtoa_prf+0x28a>
    13c0:	95 33       	cpi	r25, 0x35	; 53
    13c2:	19 f4       	brne	.+6      	; 0x13ca <dtoa_prf+0x28c>
    13c4:	31 11       	cpse	r19, r1
    13c6:	01 c0       	rjmp	.+2      	; 0x13ca <dtoa_prf+0x28c>
    13c8:	81 e3       	ldi	r24, 0x31	; 49
    13ca:	f6 01       	movw	r30, r12
    13cc:	80 83       	st	Z, r24
    13ce:	f7 01       	movw	r30, r14
    13d0:	82 2f       	mov	r24, r18
    13d2:	90 e2       	ldi	r25, 0x20	; 32
    13d4:	88 23       	and	r24, r24
    13d6:	19 f0       	breq	.+6      	; 0x13de <dtoa_prf+0x2a0>
    13d8:	91 93       	st	Z+, r25
    13da:	81 50       	subi	r24, 0x01	; 1
    13dc:	fb cf       	rjmp	.-10     	; 0x13d4 <dtoa_prf+0x296>
    13de:	f7 01       	movw	r30, r14
    13e0:	e2 0f       	add	r30, r18
    13e2:	f1 1d       	adc	r31, r1
    13e4:	10 82       	st	Z, r1
    13e6:	80 e0       	ldi	r24, 0x00	; 0
    13e8:	90 e0       	ldi	r25, 0x00	; 0
    13ea:	29 96       	adiw	r28, 0x09	; 9
    13ec:	ec e0       	ldi	r30, 0x0C	; 12
    13ee:	0c 94 70 0c 	jmp	0x18e0	; 0x18e0 <__epilogue_restores__+0xc>

000013f2 <strtod>:
    13f2:	a0 e0       	ldi	r26, 0x00	; 0
    13f4:	b0 e0       	ldi	r27, 0x00	; 0
    13f6:	ef ef       	ldi	r30, 0xFF	; 255
    13f8:	f9 e0       	ldi	r31, 0x09	; 9
    13fa:	0c 94 54 0c 	jmp	0x18a8	; 0x18a8 <__prologue_saves__+0xc>
    13fe:	ec 01       	movw	r28, r24
    1400:	6b 01       	movw	r12, r22
    1402:	61 15       	cp	r22, r1
    1404:	71 05       	cpc	r23, r1
    1406:	19 f0       	breq	.+6      	; 0x140e <strtod+0x1c>
    1408:	fb 01       	movw	r30, r22
    140a:	91 83       	std	Z+1, r25	; 0x01
    140c:	80 83       	st	Z, r24
    140e:	7e 01       	movw	r14, r28
    1410:	ff ef       	ldi	r31, 0xFF	; 255
    1412:	ef 1a       	sub	r14, r31
    1414:	ff 0a       	sbc	r15, r31
    1416:	08 81       	ld	r16, Y
    1418:	80 2f       	mov	r24, r16
    141a:	90 e0       	ldi	r25, 0x00	; 0
    141c:	0e 94 1f 0c 	call	0x183e	; 0x183e <isspace>
    1420:	89 2b       	or	r24, r25
    1422:	11 f0       	breq	.+4      	; 0x1428 <strtod+0x36>
    1424:	e7 01       	movw	r28, r14
    1426:	f3 cf       	rjmp	.-26     	; 0x140e <strtod+0x1c>
    1428:	0d 32       	cpi	r16, 0x2D	; 45
    142a:	39 f4       	brne	.+14     	; 0x143a <strtod+0x48>
    142c:	7e 01       	movw	r14, r28
    142e:	82 e0       	ldi	r24, 0x02	; 2
    1430:	e8 0e       	add	r14, r24
    1432:	f1 1c       	adc	r15, r1
    1434:	09 81       	ldd	r16, Y+1	; 0x01
    1436:	11 e0       	ldi	r17, 0x01	; 1
    1438:	08 c0       	rjmp	.+16     	; 0x144a <strtod+0x58>
    143a:	0b 32       	cpi	r16, 0x2B	; 43
    143c:	29 f4       	brne	.+10     	; 0x1448 <strtod+0x56>
    143e:	7e 01       	movw	r14, r28
    1440:	92 e0       	ldi	r25, 0x02	; 2
    1442:	e9 0e       	add	r14, r25
    1444:	f1 1c       	adc	r15, r1
    1446:	09 81       	ldd	r16, Y+1	; 0x01
    1448:	10 e0       	ldi	r17, 0x00	; 0
    144a:	e7 01       	movw	r28, r14
    144c:	21 97       	sbiw	r28, 0x01	; 1
    144e:	43 e0       	ldi	r20, 0x03	; 3
    1450:	50 e0       	ldi	r21, 0x00	; 0
    1452:	6c e5       	ldi	r22, 0x5C	; 92
    1454:	70 e0       	ldi	r23, 0x00	; 0
    1456:	ce 01       	movw	r24, r28
    1458:	0e 94 28 0c 	call	0x1850	; 0x1850 <strncasecmp_P>
    145c:	89 2b       	or	r24, r25
    145e:	c1 f4       	brne	.+48     	; 0x1490 <strtod+0x9e>
    1460:	23 96       	adiw	r28, 0x03	; 3
    1462:	45 e0       	ldi	r20, 0x05	; 5
    1464:	50 e0       	ldi	r21, 0x00	; 0
    1466:	67 e5       	ldi	r22, 0x57	; 87
    1468:	70 e0       	ldi	r23, 0x00	; 0
    146a:	ce 01       	movw	r24, r28
    146c:	0e 94 28 0c 	call	0x1850	; 0x1850 <strncasecmp_P>
    1470:	89 2b       	or	r24, r25
    1472:	09 f4       	brne	.+2      	; 0x1476 <strtod+0x84>
    1474:	25 96       	adiw	r28, 0x05	; 5
    1476:	c1 14       	cp	r12, r1
    1478:	d1 04       	cpc	r13, r1
    147a:	19 f0       	breq	.+6      	; 0x1482 <strtod+0x90>
    147c:	f6 01       	movw	r30, r12
    147e:	d1 83       	std	Z+1, r29	; 0x01
    1480:	c0 83       	st	Z, r28
    1482:	11 11       	cpse	r17, r1
    1484:	f6 c0       	rjmp	.+492    	; 0x1672 <strtod+0x280>
    1486:	60 e0       	ldi	r22, 0x00	; 0
    1488:	70 e0       	ldi	r23, 0x00	; 0
    148a:	80 e8       	ldi	r24, 0x80	; 128
    148c:	9f e7       	ldi	r25, 0x7F	; 127
    148e:	fa c0       	rjmp	.+500    	; 0x1684 <strtod+0x292>
    1490:	43 e0       	ldi	r20, 0x03	; 3
    1492:	50 e0       	ldi	r21, 0x00	; 0
    1494:	64 e5       	ldi	r22, 0x54	; 84
    1496:	70 e0       	ldi	r23, 0x00	; 0
    1498:	ce 01       	movw	r24, r28
    149a:	0e 94 28 0c 	call	0x1850	; 0x1850 <strncasecmp_P>
    149e:	89 2b       	or	r24, r25
    14a0:	59 f4       	brne	.+22     	; 0x14b8 <strtod+0xc6>
    14a2:	c1 14       	cp	r12, r1
    14a4:	d1 04       	cpc	r13, r1
    14a6:	09 f4       	brne	.+2      	; 0x14aa <strtod+0xb8>
    14a8:	e9 c0       	rjmp	.+466    	; 0x167c <strtod+0x28a>
    14aa:	f2 e0       	ldi	r31, 0x02	; 2
    14ac:	ef 0e       	add	r14, r31
    14ae:	f1 1c       	adc	r15, r1
    14b0:	f6 01       	movw	r30, r12
    14b2:	f1 82       	std	Z+1, r15	; 0x01
    14b4:	e0 82       	st	Z, r14
    14b6:	e2 c0       	rjmp	.+452    	; 0x167c <strtod+0x28a>
    14b8:	20 e0       	ldi	r18, 0x00	; 0
    14ba:	30 e0       	ldi	r19, 0x00	; 0
    14bc:	a9 01       	movw	r20, r18
    14be:	c0 e0       	ldi	r28, 0x00	; 0
    14c0:	d0 e0       	ldi	r29, 0x00	; 0
    14c2:	f7 01       	movw	r30, r14
    14c4:	80 ed       	ldi	r24, 0xD0	; 208
    14c6:	a8 2e       	mov	r10, r24
    14c8:	a0 0e       	add	r10, r16
    14ca:	89 e0       	ldi	r24, 0x09	; 9
    14cc:	8a 15       	cp	r24, r10
    14ce:	30 f1       	brcs	.+76     	; 0x151c <strtod+0x12a>
    14d0:	91 2f       	mov	r25, r17
    14d2:	92 60       	ori	r25, 0x02	; 2
    14d4:	b9 2e       	mov	r11, r25
    14d6:	81 2f       	mov	r24, r17
    14d8:	88 70       	andi	r24, 0x08	; 8
    14da:	12 ff       	sbrs	r17, 2
    14dc:	04 c0       	rjmp	.+8      	; 0x14e6 <strtod+0xf4>
    14de:	81 11       	cpse	r24, r1
    14e0:	24 c0       	rjmp	.+72     	; 0x152a <strtod+0x138>
    14e2:	21 96       	adiw	r28, 0x01	; 1
    14e4:	22 c0       	rjmp	.+68     	; 0x152a <strtod+0x138>
    14e6:	81 11       	cpse	r24, r1
    14e8:	21 97       	sbiw	r28, 0x01	; 1
    14ea:	a5 e0       	ldi	r26, 0x05	; 5
    14ec:	b0 e0       	ldi	r27, 0x00	; 0
    14ee:	0e 94 43 0c 	call	0x1886	; 0x1886 <__muluhisi3>
    14f2:	dc 01       	movw	r26, r24
    14f4:	cb 01       	movw	r24, r22
    14f6:	88 0f       	add	r24, r24
    14f8:	99 1f       	adc	r25, r25
    14fa:	aa 1f       	adc	r26, r26
    14fc:	bb 1f       	adc	r27, r27
    14fe:	9c 01       	movw	r18, r24
    1500:	ad 01       	movw	r20, r26
    1502:	2a 0d       	add	r18, r10
    1504:	31 1d       	adc	r19, r1
    1506:	41 1d       	adc	r20, r1
    1508:	51 1d       	adc	r21, r1
    150a:	28 39       	cpi	r18, 0x98	; 152
    150c:	89 e9       	ldi	r24, 0x99	; 153
    150e:	38 07       	cpc	r19, r24
    1510:	48 07       	cpc	r20, r24
    1512:	89 e1       	ldi	r24, 0x19	; 25
    1514:	58 07       	cpc	r21, r24
    1516:	48 f0       	brcs	.+18     	; 0x152a <strtod+0x138>
    1518:	16 60       	ori	r17, 0x06	; 6
    151a:	06 c0       	rjmp	.+12     	; 0x1528 <strtod+0x136>
    151c:	9e ef       	ldi	r25, 0xFE	; 254
    151e:	a9 12       	cpse	r10, r25
    1520:	0a c0       	rjmp	.+20     	; 0x1536 <strtod+0x144>
    1522:	13 fd       	sbrc	r17, 3
    1524:	40 c0       	rjmp	.+128    	; 0x15a6 <strtod+0x1b4>
    1526:	18 60       	ori	r17, 0x08	; 8
    1528:	b1 2e       	mov	r11, r17
    152a:	8f ef       	ldi	r24, 0xFF	; 255
    152c:	e8 1a       	sub	r14, r24
    152e:	f8 0a       	sbc	r15, r24
    1530:	00 81       	ld	r16, Z
    1532:	1b 2d       	mov	r17, r11
    1534:	c6 cf       	rjmp	.-116    	; 0x14c2 <strtod+0xd0>
    1536:	80 2f       	mov	r24, r16
    1538:	8f 7d       	andi	r24, 0xDF	; 223
    153a:	85 34       	cpi	r24, 0x45	; 69
    153c:	a1 f5       	brne	.+104    	; 0x15a6 <strtod+0x1b4>
    153e:	80 81       	ld	r24, Z
    1540:	8d 32       	cpi	r24, 0x2D	; 45
    1542:	11 f4       	brne	.+4      	; 0x1548 <strtod+0x156>
    1544:	10 61       	ori	r17, 0x10	; 16
    1546:	06 c0       	rjmp	.+12     	; 0x1554 <strtod+0x162>
    1548:	8b 32       	cpi	r24, 0x2B	; 43
    154a:	21 f0       	breq	.+8      	; 0x1554 <strtod+0x162>
    154c:	31 96       	adiw	r30, 0x01	; 1
    154e:	61 e0       	ldi	r22, 0x01	; 1
    1550:	70 e0       	ldi	r23, 0x00	; 0
    1552:	04 c0       	rjmp	.+8      	; 0x155c <strtod+0x16a>
    1554:	81 81       	ldd	r24, Z+1	; 0x01
    1556:	32 96       	adiw	r30, 0x02	; 2
    1558:	62 e0       	ldi	r22, 0x02	; 2
    155a:	70 e0       	ldi	r23, 0x00	; 0
    155c:	80 53       	subi	r24, 0x30	; 48
    155e:	8a 30       	cpi	r24, 0x0A	; 10
    1560:	18 f0       	brcs	.+6      	; 0x1568 <strtod+0x176>
    1562:	e6 1b       	sub	r30, r22
    1564:	f7 0b       	sbc	r31, r23
    1566:	1f c0       	rjmp	.+62     	; 0x15a6 <strtod+0x1b4>
    1568:	60 e0       	ldi	r22, 0x00	; 0
    156a:	70 e0       	ldi	r23, 0x00	; 0
    156c:	60 38       	cpi	r22, 0x80	; 128
    156e:	9c e0       	ldi	r25, 0x0C	; 12
    1570:	79 07       	cpc	r23, r25
    1572:	5c f4       	brge	.+22     	; 0x158a <strtod+0x198>
    1574:	db 01       	movw	r26, r22
    1576:	aa 0f       	add	r26, r26
    1578:	bb 1f       	adc	r27, r27
    157a:	aa 0f       	add	r26, r26
    157c:	bb 1f       	adc	r27, r27
    157e:	6a 0f       	add	r22, r26
    1580:	7b 1f       	adc	r23, r27
    1582:	66 0f       	add	r22, r22
    1584:	77 1f       	adc	r23, r23
    1586:	68 0f       	add	r22, r24
    1588:	71 1d       	adc	r23, r1
    158a:	31 96       	adiw	r30, 0x01	; 1
    158c:	df 01       	movw	r26, r30
    158e:	11 97       	sbiw	r26, 0x01	; 1
    1590:	8c 91       	ld	r24, X
    1592:	80 53       	subi	r24, 0x30	; 48
    1594:	8a 30       	cpi	r24, 0x0A	; 10
    1596:	50 f3       	brcs	.-44     	; 0x156c <strtod+0x17a>
    1598:	14 ff       	sbrs	r17, 4
    159a:	03 c0       	rjmp	.+6      	; 0x15a2 <strtod+0x1b0>
    159c:	71 95       	neg	r23
    159e:	61 95       	neg	r22
    15a0:	71 09       	sbc	r23, r1
    15a2:	c6 0f       	add	r28, r22
    15a4:	d7 1f       	adc	r29, r23
    15a6:	11 ff       	sbrs	r17, 1
    15a8:	08 c0       	rjmp	.+16     	; 0x15ba <strtod+0x1c8>
    15aa:	c1 14       	cp	r12, r1
    15ac:	d1 04       	cpc	r13, r1
    15ae:	29 f0       	breq	.+10     	; 0x15ba <strtod+0x1c8>
    15b0:	cf 01       	movw	r24, r30
    15b2:	01 97       	sbiw	r24, 0x01	; 1
    15b4:	f6 01       	movw	r30, r12
    15b6:	91 83       	std	Z+1, r25	; 0x01
    15b8:	80 83       	st	Z, r24
    15ba:	ca 01       	movw	r24, r20
    15bc:	b9 01       	movw	r22, r18
    15be:	0e 94 2f 07 	call	0xe5e	; 0xe5e <__floatunsisf>
    15c2:	21 2f       	mov	r18, r17
    15c4:	23 70       	andi	r18, 0x03	; 3
    15c6:	23 30       	cpi	r18, 0x03	; 3
    15c8:	19 f0       	breq	.+6      	; 0x15d0 <strtod+0x1de>
    15ca:	4b 01       	movw	r8, r22
    15cc:	5c 01       	movw	r10, r24
    15ce:	06 c0       	rjmp	.+12     	; 0x15dc <strtod+0x1ea>
    15d0:	4b 01       	movw	r8, r22
    15d2:	5c 01       	movw	r10, r24
    15d4:	b7 fa       	bst	r11, 7
    15d6:	b0 94       	com	r11
    15d8:	b7 f8       	bld	r11, 7
    15da:	b0 94       	com	r11
    15dc:	20 e0       	ldi	r18, 0x00	; 0
    15de:	30 e0       	ldi	r19, 0x00	; 0
    15e0:	a9 01       	movw	r20, r18
    15e2:	c5 01       	movw	r24, r10
    15e4:	b4 01       	movw	r22, r8
    15e6:	0e 94 82 06 	call	0xd04	; 0xd04 <__cmpsf2>
    15ea:	88 23       	and	r24, r24
    15ec:	09 f4       	brne	.+2      	; 0x15f0 <strtod+0x1fe>
    15ee:	3e c0       	rjmp	.+124    	; 0x166c <strtod+0x27a>
    15f0:	d7 ff       	sbrs	r29, 7
    15f2:	06 c0       	rjmp	.+12     	; 0x1600 <strtod+0x20e>
    15f4:	d1 95       	neg	r29
    15f6:	c1 95       	neg	r28
    15f8:	d1 09       	sbc	r29, r1
    15fa:	03 e7       	ldi	r16, 0x73	; 115
    15fc:	10 e0       	ldi	r17, 0x00	; 0
    15fe:	02 c0       	rjmp	.+4      	; 0x1604 <strtod+0x212>
    1600:	0b e8       	ldi	r16, 0x8B	; 139
    1602:	10 e0       	ldi	r17, 0x00	; 0
    1604:	68 01       	movw	r12, r16
    1606:	f8 e1       	ldi	r31, 0x18	; 24
    1608:	cf 1a       	sub	r12, r31
    160a:	d1 08       	sbc	r13, r1
    160c:	90 e2       	ldi	r25, 0x20	; 32
    160e:	e9 2e       	mov	r14, r25
    1610:	f1 2c       	mov	r15, r1
    1612:	ce 15       	cp	r28, r14
    1614:	df 05       	cpc	r29, r15
    1616:	74 f0       	brlt	.+28     	; 0x1634 <strtod+0x242>
    1618:	f8 01       	movw	r30, r16
    161a:	25 91       	lpm	r18, Z+
    161c:	35 91       	lpm	r19, Z+
    161e:	45 91       	lpm	r20, Z+
    1620:	54 91       	lpm	r21, Z
    1622:	c5 01       	movw	r24, r10
    1624:	b4 01       	movw	r22, r8
    1626:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <__mulsf3>
    162a:	4b 01       	movw	r8, r22
    162c:	5c 01       	movw	r10, r24
    162e:	ce 19       	sub	r28, r14
    1630:	df 09       	sbc	r29, r15
    1632:	ef cf       	rjmp	.-34     	; 0x1612 <strtod+0x220>
    1634:	04 50       	subi	r16, 0x04	; 4
    1636:	11 09       	sbc	r17, r1
    1638:	f5 94       	asr	r15
    163a:	e7 94       	ror	r14
    163c:	0c 15       	cp	r16, r12
    163e:	1d 05       	cpc	r17, r13
    1640:	41 f7       	brne	.-48     	; 0x1612 <strtod+0x220>
    1642:	8a 2d       	mov	r24, r10
    1644:	88 0f       	add	r24, r24
    1646:	8b 2d       	mov	r24, r11
    1648:	88 1f       	adc	r24, r24
    164a:	8f 3f       	cpi	r24, 0xFF	; 255
    164c:	49 f0       	breq	.+18     	; 0x1660 <strtod+0x26e>
    164e:	20 e0       	ldi	r18, 0x00	; 0
    1650:	30 e0       	ldi	r19, 0x00	; 0
    1652:	a9 01       	movw	r20, r18
    1654:	c5 01       	movw	r24, r10
    1656:	b4 01       	movw	r22, r8
    1658:	0e 94 82 06 	call	0xd04	; 0xd04 <__cmpsf2>
    165c:	81 11       	cpse	r24, r1
    165e:	06 c0       	rjmp	.+12     	; 0x166c <strtod+0x27a>
    1660:	82 e2       	ldi	r24, 0x22	; 34
    1662:	90 e0       	ldi	r25, 0x00	; 0
    1664:	90 93 c3 02 	sts	0x02C3, r25	; 0x8002c3 <errno+0x1>
    1668:	80 93 c2 02 	sts	0x02C2, r24	; 0x8002c2 <errno>
    166c:	c5 01       	movw	r24, r10
    166e:	b4 01       	movw	r22, r8
    1670:	09 c0       	rjmp	.+18     	; 0x1684 <strtod+0x292>
    1672:	60 e0       	ldi	r22, 0x00	; 0
    1674:	70 e0       	ldi	r23, 0x00	; 0
    1676:	80 e8       	ldi	r24, 0x80	; 128
    1678:	9f ef       	ldi	r25, 0xFF	; 255
    167a:	04 c0       	rjmp	.+8      	; 0x1684 <strtod+0x292>
    167c:	60 e0       	ldi	r22, 0x00	; 0
    167e:	70 e0       	ldi	r23, 0x00	; 0
    1680:	80 ec       	ldi	r24, 0xC0	; 192
    1682:	9f e7       	ldi	r25, 0x7F	; 127
    1684:	cd b7       	in	r28, 0x3d	; 61
    1686:	de b7       	in	r29, 0x3e	; 62
    1688:	ec e0       	ldi	r30, 0x0C	; 12
    168a:	0c 94 70 0c 	jmp	0x18e0	; 0x18e0 <__epilogue_restores__+0xc>

0000168e <__ftoa_engine>:
    168e:	28 30       	cpi	r18, 0x08	; 8
    1690:	08 f0       	brcs	.+2      	; 0x1694 <__ftoa_engine+0x6>
    1692:	27 e0       	ldi	r18, 0x07	; 7
    1694:	33 27       	eor	r19, r19
    1696:	da 01       	movw	r26, r20
    1698:	99 0f       	add	r25, r25
    169a:	31 1d       	adc	r19, r1
    169c:	87 fd       	sbrc	r24, 7
    169e:	91 60       	ori	r25, 0x01	; 1
    16a0:	00 96       	adiw	r24, 0x00	; 0
    16a2:	61 05       	cpc	r22, r1
    16a4:	71 05       	cpc	r23, r1
    16a6:	39 f4       	brne	.+14     	; 0x16b6 <__ftoa_engine+0x28>
    16a8:	32 60       	ori	r19, 0x02	; 2
    16aa:	2e 5f       	subi	r18, 0xFE	; 254
    16ac:	3d 93       	st	X+, r19
    16ae:	30 e3       	ldi	r19, 0x30	; 48
    16b0:	2a 95       	dec	r18
    16b2:	e1 f7       	brne	.-8      	; 0x16ac <__ftoa_engine+0x1e>
    16b4:	08 95       	ret
    16b6:	9f 3f       	cpi	r25, 0xFF	; 255
    16b8:	30 f0       	brcs	.+12     	; 0x16c6 <__ftoa_engine+0x38>
    16ba:	80 38       	cpi	r24, 0x80	; 128
    16bc:	71 05       	cpc	r23, r1
    16be:	61 05       	cpc	r22, r1
    16c0:	09 f0       	breq	.+2      	; 0x16c4 <__ftoa_engine+0x36>
    16c2:	3c 5f       	subi	r19, 0xFC	; 252
    16c4:	3c 5f       	subi	r19, 0xFC	; 252
    16c6:	3d 93       	st	X+, r19
    16c8:	91 30       	cpi	r25, 0x01	; 1
    16ca:	08 f0       	brcs	.+2      	; 0x16ce <__ftoa_engine+0x40>
    16cc:	80 68       	ori	r24, 0x80	; 128
    16ce:	91 1d       	adc	r25, r1
    16d0:	df 93       	push	r29
    16d2:	cf 93       	push	r28
    16d4:	1f 93       	push	r17
    16d6:	0f 93       	push	r16
    16d8:	ff 92       	push	r15
    16da:	ef 92       	push	r14
    16dc:	19 2f       	mov	r17, r25
    16de:	98 7f       	andi	r25, 0xF8	; 248
    16e0:	96 95       	lsr	r25
    16e2:	e9 2f       	mov	r30, r25
    16e4:	96 95       	lsr	r25
    16e6:	96 95       	lsr	r25
    16e8:	e9 0f       	add	r30, r25
    16ea:	ff 27       	eor	r31, r31
    16ec:	e7 51       	subi	r30, 0x17	; 23
    16ee:	ff 4f       	sbci	r31, 0xFF	; 255
    16f0:	99 27       	eor	r25, r25
    16f2:	33 27       	eor	r19, r19
    16f4:	ee 24       	eor	r14, r14
    16f6:	ff 24       	eor	r15, r15
    16f8:	a7 01       	movw	r20, r14
    16fa:	e7 01       	movw	r28, r14
    16fc:	05 90       	lpm	r0, Z+
    16fe:	08 94       	sec
    1700:	07 94       	ror	r0
    1702:	28 f4       	brcc	.+10     	; 0x170e <__ftoa_engine+0x80>
    1704:	36 0f       	add	r19, r22
    1706:	e7 1e       	adc	r14, r23
    1708:	f8 1e       	adc	r15, r24
    170a:	49 1f       	adc	r20, r25
    170c:	51 1d       	adc	r21, r1
    170e:	66 0f       	add	r22, r22
    1710:	77 1f       	adc	r23, r23
    1712:	88 1f       	adc	r24, r24
    1714:	99 1f       	adc	r25, r25
    1716:	06 94       	lsr	r0
    1718:	a1 f7       	brne	.-24     	; 0x1702 <__ftoa_engine+0x74>
    171a:	05 90       	lpm	r0, Z+
    171c:	07 94       	ror	r0
    171e:	28 f4       	brcc	.+10     	; 0x172a <__ftoa_engine+0x9c>
    1720:	e7 0e       	add	r14, r23
    1722:	f8 1e       	adc	r15, r24
    1724:	49 1f       	adc	r20, r25
    1726:	56 1f       	adc	r21, r22
    1728:	c1 1d       	adc	r28, r1
    172a:	77 0f       	add	r23, r23
    172c:	88 1f       	adc	r24, r24
    172e:	99 1f       	adc	r25, r25
    1730:	66 1f       	adc	r22, r22
    1732:	06 94       	lsr	r0
    1734:	a1 f7       	brne	.-24     	; 0x171e <__ftoa_engine+0x90>
    1736:	05 90       	lpm	r0, Z+
    1738:	07 94       	ror	r0
    173a:	28 f4       	brcc	.+10     	; 0x1746 <__ftoa_engine+0xb8>
    173c:	f8 0e       	add	r15, r24
    173e:	49 1f       	adc	r20, r25
    1740:	56 1f       	adc	r21, r22
    1742:	c7 1f       	adc	r28, r23
    1744:	d1 1d       	adc	r29, r1
    1746:	88 0f       	add	r24, r24
    1748:	99 1f       	adc	r25, r25
    174a:	66 1f       	adc	r22, r22
    174c:	77 1f       	adc	r23, r23
    174e:	06 94       	lsr	r0
    1750:	a1 f7       	brne	.-24     	; 0x173a <__ftoa_engine+0xac>
    1752:	05 90       	lpm	r0, Z+
    1754:	07 94       	ror	r0
    1756:	20 f4       	brcc	.+8      	; 0x1760 <__ftoa_engine+0xd2>
    1758:	49 0f       	add	r20, r25
    175a:	56 1f       	adc	r21, r22
    175c:	c7 1f       	adc	r28, r23
    175e:	d8 1f       	adc	r29, r24
    1760:	99 0f       	add	r25, r25
    1762:	66 1f       	adc	r22, r22
    1764:	77 1f       	adc	r23, r23
    1766:	88 1f       	adc	r24, r24
    1768:	06 94       	lsr	r0
    176a:	a9 f7       	brne	.-22     	; 0x1756 <__ftoa_engine+0xc8>
    176c:	84 91       	lpm	r24, Z
    176e:	10 95       	com	r17
    1770:	17 70       	andi	r17, 0x07	; 7
    1772:	41 f0       	breq	.+16     	; 0x1784 <__ftoa_engine+0xf6>
    1774:	d6 95       	lsr	r29
    1776:	c7 95       	ror	r28
    1778:	57 95       	ror	r21
    177a:	47 95       	ror	r20
    177c:	f7 94       	ror	r15
    177e:	e7 94       	ror	r14
    1780:	1a 95       	dec	r17
    1782:	c1 f7       	brne	.-16     	; 0x1774 <__ftoa_engine+0xe6>
    1784:	ef e8       	ldi	r30, 0x8F	; 143
    1786:	f0 e0       	ldi	r31, 0x00	; 0
    1788:	68 94       	set
    178a:	15 90       	lpm	r1, Z+
    178c:	15 91       	lpm	r17, Z+
    178e:	35 91       	lpm	r19, Z+
    1790:	65 91       	lpm	r22, Z+
    1792:	95 91       	lpm	r25, Z+
    1794:	05 90       	lpm	r0, Z+
    1796:	7f e2       	ldi	r23, 0x2F	; 47
    1798:	73 95       	inc	r23
    179a:	e1 18       	sub	r14, r1
    179c:	f1 0a       	sbc	r15, r17
    179e:	43 0b       	sbc	r20, r19
    17a0:	56 0b       	sbc	r21, r22
    17a2:	c9 0b       	sbc	r28, r25
    17a4:	d0 09       	sbc	r29, r0
    17a6:	c0 f7       	brcc	.-16     	; 0x1798 <__ftoa_engine+0x10a>
    17a8:	e1 0c       	add	r14, r1
    17aa:	f1 1e       	adc	r15, r17
    17ac:	43 1f       	adc	r20, r19
    17ae:	56 1f       	adc	r21, r22
    17b0:	c9 1f       	adc	r28, r25
    17b2:	d0 1d       	adc	r29, r0
    17b4:	7e f4       	brtc	.+30     	; 0x17d4 <__ftoa_engine+0x146>
    17b6:	70 33       	cpi	r23, 0x30	; 48
    17b8:	11 f4       	brne	.+4      	; 0x17be <__ftoa_engine+0x130>
    17ba:	8a 95       	dec	r24
    17bc:	e6 cf       	rjmp	.-52     	; 0x178a <__ftoa_engine+0xfc>
    17be:	e8 94       	clt
    17c0:	01 50       	subi	r16, 0x01	; 1
    17c2:	30 f0       	brcs	.+12     	; 0x17d0 <__ftoa_engine+0x142>
    17c4:	08 0f       	add	r16, r24
    17c6:	0a f4       	brpl	.+2      	; 0x17ca <__ftoa_engine+0x13c>
    17c8:	00 27       	eor	r16, r16
    17ca:	02 17       	cp	r16, r18
    17cc:	08 f4       	brcc	.+2      	; 0x17d0 <__ftoa_engine+0x142>
    17ce:	20 2f       	mov	r18, r16
    17d0:	23 95       	inc	r18
    17d2:	02 2f       	mov	r16, r18
    17d4:	7a 33       	cpi	r23, 0x3A	; 58
    17d6:	28 f0       	brcs	.+10     	; 0x17e2 <__ftoa_engine+0x154>
    17d8:	79 e3       	ldi	r23, 0x39	; 57
    17da:	7d 93       	st	X+, r23
    17dc:	2a 95       	dec	r18
    17de:	e9 f7       	brne	.-6      	; 0x17da <__ftoa_engine+0x14c>
    17e0:	10 c0       	rjmp	.+32     	; 0x1802 <__ftoa_engine+0x174>
    17e2:	7d 93       	st	X+, r23
    17e4:	2a 95       	dec	r18
    17e6:	89 f6       	brne	.-94     	; 0x178a <__ftoa_engine+0xfc>
    17e8:	06 94       	lsr	r0
    17ea:	97 95       	ror	r25
    17ec:	67 95       	ror	r22
    17ee:	37 95       	ror	r19
    17f0:	17 95       	ror	r17
    17f2:	17 94       	ror	r1
    17f4:	e1 18       	sub	r14, r1
    17f6:	f1 0a       	sbc	r15, r17
    17f8:	43 0b       	sbc	r20, r19
    17fa:	56 0b       	sbc	r21, r22
    17fc:	c9 0b       	sbc	r28, r25
    17fe:	d0 09       	sbc	r29, r0
    1800:	98 f0       	brcs	.+38     	; 0x1828 <__ftoa_engine+0x19a>
    1802:	23 95       	inc	r18
    1804:	7e 91       	ld	r23, -X
    1806:	73 95       	inc	r23
    1808:	7a 33       	cpi	r23, 0x3A	; 58
    180a:	08 f0       	brcs	.+2      	; 0x180e <__ftoa_engine+0x180>
    180c:	70 e3       	ldi	r23, 0x30	; 48
    180e:	7c 93       	st	X, r23
    1810:	20 13       	cpse	r18, r16
    1812:	b8 f7       	brcc	.-18     	; 0x1802 <__ftoa_engine+0x174>
    1814:	7e 91       	ld	r23, -X
    1816:	70 61       	ori	r23, 0x10	; 16
    1818:	7d 93       	st	X+, r23
    181a:	30 f0       	brcs	.+12     	; 0x1828 <__ftoa_engine+0x19a>
    181c:	83 95       	inc	r24
    181e:	71 e3       	ldi	r23, 0x31	; 49
    1820:	7d 93       	st	X+, r23
    1822:	70 e3       	ldi	r23, 0x30	; 48
    1824:	2a 95       	dec	r18
    1826:	e1 f7       	brne	.-8      	; 0x1820 <__ftoa_engine+0x192>
    1828:	11 24       	eor	r1, r1
    182a:	ef 90       	pop	r14
    182c:	ff 90       	pop	r15
    182e:	0f 91       	pop	r16
    1830:	1f 91       	pop	r17
    1832:	cf 91       	pop	r28
    1834:	df 91       	pop	r29
    1836:	99 27       	eor	r25, r25
    1838:	87 fd       	sbrc	r24, 7
    183a:	90 95       	com	r25
    183c:	08 95       	ret

0000183e <isspace>:
    183e:	91 11       	cpse	r25, r1
    1840:	0c 94 40 0c 	jmp	0x1880	; 0x1880 <__ctype_isfalse>
    1844:	80 32       	cpi	r24, 0x20	; 32
    1846:	19 f0       	breq	.+6      	; 0x184e <isspace+0x10>
    1848:	89 50       	subi	r24, 0x09	; 9
    184a:	85 50       	subi	r24, 0x05	; 5
    184c:	c8 f7       	brcc	.-14     	; 0x1840 <isspace+0x2>
    184e:	08 95       	ret

00001850 <strncasecmp_P>:
    1850:	fb 01       	movw	r30, r22
    1852:	dc 01       	movw	r26, r24
    1854:	41 50       	subi	r20, 0x01	; 1
    1856:	50 40       	sbci	r21, 0x00	; 0
    1858:	88 f0       	brcs	.+34     	; 0x187c <strncasecmp_P+0x2c>
    185a:	8d 91       	ld	r24, X+
    185c:	81 34       	cpi	r24, 0x41	; 65
    185e:	1c f0       	brlt	.+6      	; 0x1866 <strncasecmp_P+0x16>
    1860:	8b 35       	cpi	r24, 0x5B	; 91
    1862:	0c f4       	brge	.+2      	; 0x1866 <strncasecmp_P+0x16>
    1864:	80 5e       	subi	r24, 0xE0	; 224
    1866:	65 91       	lpm	r22, Z+
    1868:	61 34       	cpi	r22, 0x41	; 65
    186a:	1c f0       	brlt	.+6      	; 0x1872 <strncasecmp_P+0x22>
    186c:	6b 35       	cpi	r22, 0x5B	; 91
    186e:	0c f4       	brge	.+2      	; 0x1872 <strncasecmp_P+0x22>
    1870:	60 5e       	subi	r22, 0xE0	; 224
    1872:	86 1b       	sub	r24, r22
    1874:	61 11       	cpse	r22, r1
    1876:	71 f3       	breq	.-36     	; 0x1854 <strncasecmp_P+0x4>
    1878:	99 0b       	sbc	r25, r25
    187a:	08 95       	ret
    187c:	88 1b       	sub	r24, r24
    187e:	fc cf       	rjmp	.-8      	; 0x1878 <strncasecmp_P+0x28>

00001880 <__ctype_isfalse>:
    1880:	99 27       	eor	r25, r25
    1882:	88 27       	eor	r24, r24

00001884 <__ctype_istrue>:
    1884:	08 95       	ret

00001886 <__muluhisi3>:
    1886:	0e 94 85 0c 	call	0x190a	; 0x190a <__umulhisi3>
    188a:	a5 9f       	mul	r26, r21
    188c:	90 0d       	add	r25, r0
    188e:	b4 9f       	mul	r27, r20
    1890:	90 0d       	add	r25, r0
    1892:	a4 9f       	mul	r26, r20
    1894:	80 0d       	add	r24, r0
    1896:	91 1d       	adc	r25, r1
    1898:	11 24       	eor	r1, r1
    189a:	08 95       	ret

0000189c <__prologue_saves__>:
    189c:	2f 92       	push	r2
    189e:	3f 92       	push	r3
    18a0:	4f 92       	push	r4
    18a2:	5f 92       	push	r5
    18a4:	6f 92       	push	r6
    18a6:	7f 92       	push	r7
    18a8:	8f 92       	push	r8
    18aa:	9f 92       	push	r9
    18ac:	af 92       	push	r10
    18ae:	bf 92       	push	r11
    18b0:	cf 92       	push	r12
    18b2:	df 92       	push	r13
    18b4:	ef 92       	push	r14
    18b6:	ff 92       	push	r15
    18b8:	0f 93       	push	r16
    18ba:	1f 93       	push	r17
    18bc:	cf 93       	push	r28
    18be:	df 93       	push	r29
    18c0:	cd b7       	in	r28, 0x3d	; 61
    18c2:	de b7       	in	r29, 0x3e	; 62
    18c4:	ca 1b       	sub	r28, r26
    18c6:	db 0b       	sbc	r29, r27
    18c8:	0f b6       	in	r0, 0x3f	; 63
    18ca:	f8 94       	cli
    18cc:	de bf       	out	0x3e, r29	; 62
    18ce:	0f be       	out	0x3f, r0	; 63
    18d0:	cd bf       	out	0x3d, r28	; 61
    18d2:	09 94       	ijmp

000018d4 <__epilogue_restores__>:
    18d4:	2a 88       	ldd	r2, Y+18	; 0x12
    18d6:	39 88       	ldd	r3, Y+17	; 0x11
    18d8:	48 88       	ldd	r4, Y+16	; 0x10
    18da:	5f 84       	ldd	r5, Y+15	; 0x0f
    18dc:	6e 84       	ldd	r6, Y+14	; 0x0e
    18de:	7d 84       	ldd	r7, Y+13	; 0x0d
    18e0:	8c 84       	ldd	r8, Y+12	; 0x0c
    18e2:	9b 84       	ldd	r9, Y+11	; 0x0b
    18e4:	aa 84       	ldd	r10, Y+10	; 0x0a
    18e6:	b9 84       	ldd	r11, Y+9	; 0x09
    18e8:	c8 84       	ldd	r12, Y+8	; 0x08
    18ea:	df 80       	ldd	r13, Y+7	; 0x07
    18ec:	ee 80       	ldd	r14, Y+6	; 0x06
    18ee:	fd 80       	ldd	r15, Y+5	; 0x05
    18f0:	0c 81       	ldd	r16, Y+4	; 0x04
    18f2:	1b 81       	ldd	r17, Y+3	; 0x03
    18f4:	aa 81       	ldd	r26, Y+2	; 0x02
    18f6:	b9 81       	ldd	r27, Y+1	; 0x01
    18f8:	ce 0f       	add	r28, r30
    18fa:	d1 1d       	adc	r29, r1
    18fc:	0f b6       	in	r0, 0x3f	; 63
    18fe:	f8 94       	cli
    1900:	de bf       	out	0x3e, r29	; 62
    1902:	0f be       	out	0x3f, r0	; 63
    1904:	cd bf       	out	0x3d, r28	; 61
    1906:	ed 01       	movw	r28, r26
    1908:	08 95       	ret

0000190a <__umulhisi3>:
    190a:	a2 9f       	mul	r26, r18
    190c:	b0 01       	movw	r22, r0
    190e:	b3 9f       	mul	r27, r19
    1910:	c0 01       	movw	r24, r0
    1912:	a3 9f       	mul	r26, r19
    1914:	70 0d       	add	r23, r0
    1916:	81 1d       	adc	r24, r1
    1918:	11 24       	eor	r1, r1
    191a:	91 1d       	adc	r25, r1
    191c:	b2 9f       	mul	r27, r18
    191e:	70 0d       	add	r23, r0
    1920:	81 1d       	adc	r24, r1
    1922:	11 24       	eor	r1, r1
    1924:	91 1d       	adc	r25, r1
    1926:	08 95       	ret

00001928 <_exit>:
    1928:	f8 94       	cli

0000192a <__stop_program>:
    192a:	ff cf       	rjmp	.-2      	; 0x192a <__stop_program>
