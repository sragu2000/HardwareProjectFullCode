
FullCode.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000194a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000146  00800060  0000194a  000019de  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000011e  008001a6  008001a6  00001b24  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001b24  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001b80  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000178  00000000  00000000  00001bbc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000227a  00000000  00000000  00001d34  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000883  00000000  00000000  00003fae  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001154  00000000  00000000  00004831  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000043c  00000000  00000000  00005988  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007b2  00000000  00000000  00005dc4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001862  00000000  00000000  00006576  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000170  00000000  00000000  00007dd8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 c5 00 	jmp	0x18a	; 0x18a <__ctors_end>
       4:	0c 94 0c 06 	jmp	0xc18	; 0xc18 <__vector_1>
       8:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
       c:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      10:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      14:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      18:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      1c:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      20:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      24:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      28:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      2c:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      30:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      34:	0c 94 fa 02 	jmp	0x5f4	; 0x5f4 <__vector_13>
      38:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      3c:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      40:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      44:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      48:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      4c:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      50:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>

00000054 <__trampolines_end>:
      54:	4e 41       	sbci	r20, 0x1E	; 30
      56:	4e 49       	Address 0x00000056 is out of bounds.
.word	0xffff	; ????

00000057 <pstr_inity>:
      57:	49 4e 49 54 59                                      INITY

0000005c <pstr_inf>:
      5c:	49 4e 46                                            INF

0000005f <pwr_m10>:
      5f:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
      6f:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

00000077 <pwr_p10>:
      77:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
      87:	ca 1b 0e 5a ae c5 9d 74 00 40 7a 10 f3 5a 00 a0     ...Z...t.@z..Z..
      97:	72 4e 18 09 00 10 a5 d4 e8 00 00 e8 76 48 17 00     rN..........vH..
      a7:	00 e4 0b 54 02 00 00 ca 9a 3b 00 00 00 e1 f5 05     ...T.....;......
      b7:	00 00 80 96 98 00 00 00 40 42 0f 00 00 00 a0 86     ........@B......
      c7:	01 00 00 00 10 27 00 00 00 00 e8 03 00 00 00 00     .....'..........
      d7:	64 00 00 00 00 00 0a 00 00 00 00 00 01 00 00 00     d...............
      e7:	00 00 2c 76 d8 88 dc 67 4f 08 23 df c1 df ae 59     ..,v...gO.#....Y
      f7:	e1 b1 b7 96 e5 e3 e4 53 c6 3a e6 51 99 76 96 e8     .......S.:.Q.v..
     107:	e6 c2 84 26 eb 89 8c 9b 62 ed 40 7c 6f fc ef bc     ...&....b.@|o...
     117:	9c 9f 40 f2 ba a5 6f a5 f4 90 05 5a 2a f7 5c 93     ..@...o....Z*.\.
     127:	6b 6c f9 67 6d c1 1b fc e0 e4 0d 47 fe f5 20 e6     kl.gm......G.. .
     137:	b5 00 d0 ed 90 2e 03 00 94 35 77 05 00 80 84 1e     .........5w.....
     147:	08 00 00 20 4e 0a 00 00 00 c8 0c 33 33 33 33 0f     ... N......3333.
     157:	98 6e 12 83 11 41 ef 8d 21 14 89 3b e6 55 16 cf     .n...A..!..;.U..
     167:	fe e6 db 18 d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb     ......K8..|.....
     177:	e4 24 20 32 84 72 5e 22 81 00 c9 f1 24 ec a1 e5     .$ 2.r^"....$...
     187:	3d 27 00                                            ='.

0000018a <__ctors_end>:
     18a:	11 24       	eor	r1, r1
     18c:	1f be       	out	0x3f, r1	; 63
     18e:	cf e5       	ldi	r28, 0x5F	; 95
     190:	d8 e0       	ldi	r29, 0x08	; 8
     192:	de bf       	out	0x3e, r29	; 62
     194:	cd bf       	out	0x3d, r28	; 61

00000196 <__do_copy_data>:
     196:	11 e0       	ldi	r17, 0x01	; 1
     198:	a0 e6       	ldi	r26, 0x60	; 96
     19a:	b0 e0       	ldi	r27, 0x00	; 0
     19c:	ea e4       	ldi	r30, 0x4A	; 74
     19e:	f9 e1       	ldi	r31, 0x19	; 25
     1a0:	02 c0       	rjmp	.+4      	; 0x1a6 <__do_copy_data+0x10>
     1a2:	05 90       	lpm	r0, Z+
     1a4:	0d 92       	st	X+, r0
     1a6:	a6 3a       	cpi	r26, 0xA6	; 166
     1a8:	b1 07       	cpc	r27, r17
     1aa:	d9 f7       	brne	.-10     	; 0x1a2 <__do_copy_data+0xc>

000001ac <__do_clear_bss>:
     1ac:	22 e0       	ldi	r18, 0x02	; 2
     1ae:	a6 ea       	ldi	r26, 0xA6	; 166
     1b0:	b1 e0       	ldi	r27, 0x01	; 1
     1b2:	01 c0       	rjmp	.+2      	; 0x1b6 <.do_clear_bss_start>

000001b4 <.do_clear_bss_loop>:
     1b4:	1d 92       	st	X+, r1

000001b6 <.do_clear_bss_start>:
     1b6:	a4 3c       	cpi	r26, 0xC4	; 196
     1b8:	b2 07       	cpc	r27, r18
     1ba:	e1 f7       	brne	.-8      	; 0x1b4 <.do_clear_bss_loop>
     1bc:	0e 94 13 05 	call	0xa26	; 0xa26 <main>
     1c0:	0c 94 a3 0c 	jmp	0x1946	; 0x1946 <_exit>

000001c4 <__bad_interrupt>:
     1c4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001c8 <I2C_Init>:
     1c8:	11 b8       	out	0x01, r1	; 1
     1ca:	80 e2       	ldi	r24, 0x20	; 32
     1cc:	80 b9       	out	0x00, r24	; 0
     1ce:	08 95       	ret

000001d0 <LCD_Command>:
	while (str[i]!='\0')		/* Send string till null */
	{
		USART_TxChar(str[i]);
		i++;
	}
     1d0:	98 b3       	in	r25, 0x18	; 24
     1d2:	9f 70       	andi	r25, 0x0F	; 15
     1d4:	28 2f       	mov	r18, r24
     1d6:	20 7f       	andi	r18, 0xF0	; 240
     1d8:	92 2b       	or	r25, r18
     1da:	98 bb       	out	0x18, r25	; 24
     1dc:	98 b3       	in	r25, 0x18	; 24
     1de:	9e 7f       	andi	r25, 0xFE	; 254
     1e0:	98 bb       	out	0x18, r25	; 24
     1e2:	98 b3       	in	r25, 0x18	; 24
     1e4:	92 60       	ori	r25, 0x02	; 2
     1e6:	98 bb       	out	0x18, r25	; 24
     1e8:	32 e0       	ldi	r19, 0x02	; 2
     1ea:	3a 95       	dec	r19
     1ec:	f1 f7       	brne	.-4      	; 0x1ea <LCD_Command+0x1a>
     1ee:	00 c0       	rjmp	.+0      	; 0x1f0 <LCD_Command+0x20>
     1f0:	98 b3       	in	r25, 0x18	; 24
     1f2:	9d 7f       	andi	r25, 0xFD	; 253
     1f4:	98 bb       	out	0x18, r25	; 24
     1f6:	ef e8       	ldi	r30, 0x8F	; 143
     1f8:	f1 e0       	ldi	r31, 0x01	; 1
     1fa:	31 97       	sbiw	r30, 0x01	; 1
     1fc:	f1 f7       	brne	.-4      	; 0x1fa <LCD_Command+0x2a>
     1fe:	00 c0       	rjmp	.+0      	; 0x200 <LCD_Command+0x30>
     200:	00 00       	nop
     202:	28 b3       	in	r18, 0x18	; 24
     204:	f0 e1       	ldi	r31, 0x10	; 16
     206:	8f 9f       	mul	r24, r31
     208:	c0 01       	movw	r24, r0
     20a:	11 24       	eor	r1, r1
     20c:	92 2f       	mov	r25, r18
     20e:	9f 70       	andi	r25, 0x0F	; 15
     210:	89 2b       	or	r24, r25
     212:	88 bb       	out	0x18, r24	; 24
     214:	88 b3       	in	r24, 0x18	; 24
     216:	82 60       	ori	r24, 0x02	; 2
     218:	88 bb       	out	0x18, r24	; 24
     21a:	32 e0       	ldi	r19, 0x02	; 2
     21c:	3a 95       	dec	r19
     21e:	f1 f7       	brne	.-4      	; 0x21c <LCD_Command+0x4c>
     220:	00 c0       	rjmp	.+0      	; 0x222 <LCD_Command+0x52>
     222:	88 b3       	in	r24, 0x18	; 24
     224:	8d 7f       	andi	r24, 0xFD	; 253
     226:	88 bb       	out	0x18, r24	; 24
     228:	8f e9       	ldi	r24, 0x9F	; 159
     22a:	9f e0       	ldi	r25, 0x0F	; 15
     22c:	01 97       	sbiw	r24, 0x01	; 1
     22e:	f1 f7       	brne	.-4      	; 0x22c <LCD_Command+0x5c>
     230:	00 c0       	rjmp	.+0      	; 0x232 <LCD_Command+0x62>
     232:	00 00       	nop
     234:	08 95       	ret

00000236 <LCD_Char>:
     236:	98 b3       	in	r25, 0x18	; 24
     238:	9f 70       	andi	r25, 0x0F	; 15
     23a:	28 2f       	mov	r18, r24
     23c:	20 7f       	andi	r18, 0xF0	; 240
     23e:	92 2b       	or	r25, r18
     240:	98 bb       	out	0x18, r25	; 24
     242:	98 b3       	in	r25, 0x18	; 24
     244:	91 60       	ori	r25, 0x01	; 1
     246:	98 bb       	out	0x18, r25	; 24
     248:	98 b3       	in	r25, 0x18	; 24
     24a:	92 60       	ori	r25, 0x02	; 2
     24c:	98 bb       	out	0x18, r25	; 24
     24e:	32 e0       	ldi	r19, 0x02	; 2
     250:	3a 95       	dec	r19
     252:	f1 f7       	brne	.-4      	; 0x250 <LCD_Char+0x1a>
     254:	00 c0       	rjmp	.+0      	; 0x256 <LCD_Char+0x20>
     256:	98 b3       	in	r25, 0x18	; 24
     258:	9d 7f       	andi	r25, 0xFD	; 253
     25a:	98 bb       	out	0x18, r25	; 24
     25c:	ef e8       	ldi	r30, 0x8F	; 143
     25e:	f1 e0       	ldi	r31, 0x01	; 1
     260:	31 97       	sbiw	r30, 0x01	; 1
     262:	f1 f7       	brne	.-4      	; 0x260 <LCD_Char+0x2a>
     264:	00 c0       	rjmp	.+0      	; 0x266 <LCD_Char+0x30>
     266:	00 00       	nop
     268:	28 b3       	in	r18, 0x18	; 24
     26a:	f0 e1       	ldi	r31, 0x10	; 16
     26c:	8f 9f       	mul	r24, r31
     26e:	c0 01       	movw	r24, r0
     270:	11 24       	eor	r1, r1
     272:	92 2f       	mov	r25, r18
     274:	9f 70       	andi	r25, 0x0F	; 15
     276:	89 2b       	or	r24, r25
     278:	88 bb       	out	0x18, r24	; 24
     27a:	88 b3       	in	r24, 0x18	; 24
     27c:	82 60       	ori	r24, 0x02	; 2
     27e:	88 bb       	out	0x18, r24	; 24
     280:	32 e0       	ldi	r19, 0x02	; 2
     282:	3a 95       	dec	r19
     284:	f1 f7       	brne	.-4      	; 0x282 <LCD_Char+0x4c>
     286:	00 c0       	rjmp	.+0      	; 0x288 <LCD_Char+0x52>
     288:	88 b3       	in	r24, 0x18	; 24
     28a:	8d 7f       	andi	r24, 0xFD	; 253
     28c:	88 bb       	out	0x18, r24	; 24
     28e:	8f e9       	ldi	r24, 0x9F	; 159
     290:	9f e0       	ldi	r25, 0x0F	; 15
     292:	01 97       	sbiw	r24, 0x01	; 1
     294:	f1 f7       	brne	.-4      	; 0x292 <LCD_Char+0x5c>
     296:	00 c0       	rjmp	.+0      	; 0x298 <LCD_Char+0x62>
     298:	00 00       	nop
     29a:	08 95       	ret

0000029c <LCD_Init>:
     29c:	8f ef       	ldi	r24, 0xFF	; 255
     29e:	87 bb       	out	0x17, r24	; 23
     2a0:	8f e3       	ldi	r24, 0x3F	; 63
     2a2:	9c e9       	ldi	r25, 0x9C	; 156
     2a4:	01 97       	sbiw	r24, 0x01	; 1
     2a6:	f1 f7       	brne	.-4      	; 0x2a4 <LCD_Init+0x8>
     2a8:	00 c0       	rjmp	.+0      	; 0x2aa <LCD_Init+0xe>
     2aa:	00 00       	nop
     2ac:	83 e3       	ldi	r24, 0x33	; 51
     2ae:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <LCD_Command>
     2b2:	82 e3       	ldi	r24, 0x32	; 50
     2b4:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <LCD_Command>
     2b8:	88 e2       	ldi	r24, 0x28	; 40
     2ba:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <LCD_Command>
     2be:	8c e0       	ldi	r24, 0x0C	; 12
     2c0:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <LCD_Command>
     2c4:	86 e0       	ldi	r24, 0x06	; 6
     2c6:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <LCD_Command>
     2ca:	81 e0       	ldi	r24, 0x01	; 1
     2cc:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <LCD_Command>
     2d0:	8f e9       	ldi	r24, 0x9F	; 159
     2d2:	9f e0       	ldi	r25, 0x0F	; 15
     2d4:	01 97       	sbiw	r24, 0x01	; 1
     2d6:	f1 f7       	brne	.-4      	; 0x2d4 <LCD_Init+0x38>
     2d8:	00 c0       	rjmp	.+0      	; 0x2da <LCD_Init+0x3e>
     2da:	00 00       	nop
     2dc:	80 e8       	ldi	r24, 0x80	; 128
     2de:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <LCD_Command>
     2e2:	08 95       	ret

000002e4 <LCD_String>:
     2e4:	0f 93       	push	r16
     2e6:	1f 93       	push	r17
     2e8:	cf 93       	push	r28
     2ea:	df 93       	push	r29
     2ec:	8c 01       	movw	r16, r24
     2ee:	c0 e0       	ldi	r28, 0x00	; 0
     2f0:	d0 e0       	ldi	r29, 0x00	; 0
     2f2:	03 c0       	rjmp	.+6      	; 0x2fa <LCD_String+0x16>
     2f4:	0e 94 1b 01 	call	0x236	; 0x236 <LCD_Char>
     2f8:	21 96       	adiw	r28, 0x01	; 1
     2fa:	f8 01       	movw	r30, r16
     2fc:	ec 0f       	add	r30, r28
     2fe:	fd 1f       	adc	r31, r29
     300:	80 81       	ld	r24, Z
     302:	81 11       	cpse	r24, r1
     304:	f7 cf       	rjmp	.-18     	; 0x2f4 <LCD_String+0x10>
     306:	df 91       	pop	r29
     308:	cf 91       	pop	r28
     30a:	1f 91       	pop	r17
     30c:	0f 91       	pop	r16
     30e:	08 95       	ret

00000310 <LCD_String_xy>:
     310:	cf 93       	push	r28
     312:	df 93       	push	r29
     314:	ea 01       	movw	r28, r20
     316:	81 11       	cpse	r24, r1
     318:	08 c0       	rjmp	.+16     	; 0x32a <LCD_String_xy+0x1a>
     31a:	60 31       	cpi	r22, 0x10	; 16
     31c:	30 f4       	brcc	.+12     	; 0x32a <LCD_String_xy+0x1a>
     31e:	86 2f       	mov	r24, r22
     320:	8f 70       	andi	r24, 0x0F	; 15
     322:	80 68       	ori	r24, 0x80	; 128
     324:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <LCD_Command>
     328:	09 c0       	rjmp	.+18     	; 0x33c <LCD_String_xy+0x2c>
     32a:	81 30       	cpi	r24, 0x01	; 1
     32c:	39 f4       	brne	.+14     	; 0x33c <LCD_String_xy+0x2c>
     32e:	60 31       	cpi	r22, 0x10	; 16
     330:	28 f4       	brcc	.+10     	; 0x33c <LCD_String_xy+0x2c>
     332:	86 2f       	mov	r24, r22
     334:	8f 70       	andi	r24, 0x0F	; 15
     336:	80 6c       	ori	r24, 0xC0	; 192
     338:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <LCD_Command>
     33c:	ce 01       	movw	r24, r28
     33e:	0e 94 72 01 	call	0x2e4	; 0x2e4 <LCD_String>
     342:	df 91       	pop	r29
     344:	cf 91       	pop	r28
     346:	08 95       	ret

00000348 <LCD_Clear>:
     348:	81 e0       	ldi	r24, 0x01	; 1
     34a:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <LCD_Command>
     34e:	8f e9       	ldi	r24, 0x9F	; 159
     350:	9f e0       	ldi	r25, 0x0F	; 15
     352:	01 97       	sbiw	r24, 0x01	; 1
     354:	f1 f7       	brne	.-4      	; 0x352 <LCD_Clear+0xa>
     356:	00 c0       	rjmp	.+0      	; 0x358 <LCD_Clear+0x10>
     358:	00 00       	nop
     35a:	80 e8       	ldi	r24, 0x80	; 128
     35c:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <LCD_Command>
     360:	08 95       	ret

00000362 <ADC_Init>:
     362:	1a ba       	out	0x1a, r1	; 26
     364:	87 e8       	ldi	r24, 0x87	; 135
     366:	86 b9       	out	0x06, r24	; 6
     368:	80 e4       	ldi	r24, 0x40	; 64
     36a:	87 b9       	out	0x07, r24	; 7
     36c:	08 95       	ret

0000036e <ADC_Read>:
     36e:	97 b1       	in	r25, 0x07	; 7
     370:	8f 70       	andi	r24, 0x0F	; 15
     372:	98 2b       	or	r25, r24
     374:	97 b9       	out	0x07, r25	; 7
     376:	86 b1       	in	r24, 0x06	; 6
     378:	80 64       	ori	r24, 0x40	; 64
     37a:	86 b9       	out	0x06, r24	; 6
     37c:	34 9b       	sbis	0x06, 4	; 6
     37e:	fe cf       	rjmp	.-4      	; 0x37c <ADC_Read+0xe>
     380:	8a e1       	ldi	r24, 0x1A	; 26
     382:	8a 95       	dec	r24
     384:	f1 f7       	brne	.-4      	; 0x382 <ADC_Read+0x14>
     386:	00 c0       	rjmp	.+0      	; 0x388 <ADC_Read+0x1a>
     388:	24 b1       	in	r18, 0x04	; 4
     38a:	85 b1       	in	r24, 0x05	; 5
     38c:	90 e0       	ldi	r25, 0x00	; 0
     38e:	98 2f       	mov	r25, r24
     390:	88 27       	eor	r24, r24
     392:	82 0f       	add	r24, r18
     394:	91 1d       	adc	r25, r1
     396:	08 95       	ret

00000398 <PWM_init>:
     398:	89 e6       	ldi	r24, 0x69	; 105
     39a:	83 bf       	out	0x33, r24	; 51
     39c:	87 b3       	in	r24, 0x17	; 23
     39e:	88 60       	ori	r24, 0x08	; 8
     3a0:	87 bb       	out	0x17, r24	; 23
     3a2:	08 95       	ret

000003a4 <USART_Init>:
     3a4:	2a b1       	in	r18, 0x0a	; 10
     3a6:	28 69       	ori	r18, 0x98	; 152
     3a8:	2a b9       	out	0x0a, r18	; 10
     3aa:	20 b5       	in	r18, 0x20	; 32
     3ac:	26 68       	ori	r18, 0x86	; 134
     3ae:	20 bd       	out	0x20, r18	; 32
     3b0:	dc 01       	movw	r26, r24
     3b2:	cb 01       	movw	r24, r22
     3b4:	88 0f       	add	r24, r24
     3b6:	99 1f       	adc	r25, r25
     3b8:	aa 1f       	adc	r26, r26
     3ba:	bb 1f       	adc	r27, r27
     3bc:	88 0f       	add	r24, r24
     3be:	99 1f       	adc	r25, r25
     3c0:	aa 1f       	adc	r26, r26
     3c2:	bb 1f       	adc	r27, r27
     3c4:	9c 01       	movw	r18, r24
     3c6:	ad 01       	movw	r20, r26
     3c8:	22 0f       	add	r18, r18
     3ca:	33 1f       	adc	r19, r19
     3cc:	44 1f       	adc	r20, r20
     3ce:	55 1f       	adc	r21, r21
     3d0:	22 0f       	add	r18, r18
     3d2:	33 1f       	adc	r19, r19
     3d4:	44 1f       	adc	r20, r20
     3d6:	55 1f       	adc	r21, r21
     3d8:	60 e0       	ldi	r22, 0x00	; 0
     3da:	72 e1       	ldi	r23, 0x12	; 18
     3dc:	8a e7       	ldi	r24, 0x7A	; 122
     3de:	90 e0       	ldi	r25, 0x00	; 0
     3e0:	0e 94 5d 08 	call	0x10ba	; 0x10ba <__udivmodsi4>
     3e4:	8f ef       	ldi	r24, 0xFF	; 255
     3e6:	82 0f       	add	r24, r18
     3e8:	89 b9       	out	0x09, r24	; 9
     3ea:	da 01       	movw	r26, r20
     3ec:	c9 01       	movw	r24, r18
     3ee:	01 97       	sbiw	r24, 0x01	; 1
     3f0:	a1 09       	sbc	r26, r1
     3f2:	b1 09       	sbc	r27, r1
     3f4:	89 2f       	mov	r24, r25
     3f6:	9a 2f       	mov	r25, r26
     3f8:	ab 2f       	mov	r26, r27
     3fa:	bb 27       	eor	r27, r27
     3fc:	80 bd       	out	0x20, r24	; 32
     3fe:	08 95       	ret

00000400 <USART_TxChar>:
     400:	5d 9b       	sbis	0x0b, 5	; 11
     402:	fe cf       	rjmp	.-4      	; 0x400 <USART_TxChar>
     404:	8c b9       	out	0x0c, r24	; 12
     406:	08 95       	ret

00000408 <get_altitude>:
	sei(); //It is a macro that executes an assembler instruction to enable interrupts.

}

void get_altitude(uint16_t alt_pointer){  //unsigned 16-bit integer - integers between 0 and 65,535
	cli(); //Command Line Interface - CLIs accept as input commands that are entered by keyboard
     408:	f8 94       	cli
	uint8_t alt_index;  //unsigned 8-bit integer- integer has a range of 0 to 255
	uint8_t index = alt_pointer+1;
     40a:	8f 5f       	subi	r24, 0xFF	; 255
	alt_index=0;
     40c:	90 e0       	ldi	r25, 0x00	; 0
	/* parse Altitude in GGA string stored in buffer */
	for( ; GGA_Buffer[index]!=','; index++){
     40e:	07 c0       	rjmp	.+14     	; 0x41e <get_altitude+0x16>
		Altitude_Buffer[alt_index]= GGA_Buffer[index];
     410:	e9 2f       	mov	r30, r25
     412:	f0 e0       	ldi	r31, 0x00	; 0
     414:	e6 54       	subi	r30, 0x46	; 70
     416:	fd 4f       	sbci	r31, 0xFD	; 253
     418:	20 83       	st	Z, r18
		alt_index++;
     41a:	9f 5f       	subi	r25, 0xFF	; 255
	cli(); //Command Line Interface - CLIs accept as input commands that are entered by keyboard
	uint8_t alt_index;  //unsigned 8-bit integer- integer has a range of 0 to 255
	uint8_t index = alt_pointer+1;
	alt_index=0;
	/* parse Altitude in GGA string stored in buffer */
	for( ; GGA_Buffer[index]!=','; index++){
     41c:	8f 5f       	subi	r24, 0xFF	; 255
     41e:	48 2f       	mov	r20, r24
     420:	50 e0       	ldi	r21, 0x00	; 0
     422:	fa 01       	movw	r30, r20
     424:	e5 55       	subi	r30, 0x55	; 85
     426:	fe 4f       	sbci	r31, 0xFE	; 254
     428:	20 81       	ld	r18, Z
     42a:	2c 32       	cpi	r18, 0x2C	; 44
     42c:	89 f7       	brne	.-30     	; 0x410 <get_altitude+0x8>
		Altitude_Buffer[alt_index]= GGA_Buffer[index];
		alt_index++;
	}
	
	Altitude_Buffer[alt_index]   = GGA_Buffer[index+1];
     42e:	e9 2f       	mov	r30, r25
     430:	f0 e0       	ldi	r31, 0x00	; 0
     432:	da 01       	movw	r26, r20
     434:	a4 55       	subi	r26, 0x54	; 84
     436:	be 4f       	sbci	r27, 0xFE	; 254
     438:	8c 91       	ld	r24, X
     43a:	e6 54       	subi	r30, 0x46	; 70
     43c:	fd 4f       	sbci	r31, 0xFD	; 253
     43e:	80 83       	st	Z, r24
	sei();//It is a macro that executes an assembler instruction to enable interrupts.
     440:	78 94       	sei
     442:	08 95       	ret

00000444 <convert_to_degrees_lat>:
}


void convert_to_degrees_lat(char *raw){
     444:	8f 92       	push	r8
     446:	9f 92       	push	r9
     448:	af 92       	push	r10
     44a:	bf 92       	push	r11
     44c:	cf 92       	push	r12
     44e:	df 92       	push	r13
     450:	ef 92       	push	r14
     452:	ff 92       	push	r15
     454:	0f 93       	push	r16
     456:	1f 93       	push	r17
	float decimal_value,temp;
	
	int32_t degrees;
	
	float position;
	value = atof(raw); /* convert string into float for conversion */
     458:	0e 94 9f 08 	call	0x113e	; 0x113e <atof>
	
	/* convert raw latitude/longitude into degree format */
	decimal_value = (value/100);
     45c:	20 e0       	ldi	r18, 0x00	; 0
     45e:	30 e0       	ldi	r19, 0x00	; 0
     460:	48 ec       	ldi	r20, 0xC8	; 200
     462:	52 e4       	ldi	r21, 0x42	; 66
     464:	0e 94 96 06 	call	0xd2c	; 0xd2c <__divsf3>
     468:	6b 01       	movw	r12, r22
     46a:	7c 01       	movw	r14, r24
	degrees = (int)(decimal_value);
     46c:	0e 94 08 07 	call	0xe10	; 0xe10 <__fixsfsi>
	temp = (decimal_value - (int)decimal_value)/0.6;
     470:	07 2e       	mov	r0, r23
     472:	00 0c       	add	r0, r0
     474:	88 0b       	sbc	r24, r24
     476:	99 0b       	sbc	r25, r25
     478:	0e 94 40 07 	call	0xe80	; 0xe80 <__floatsisf>
     47c:	4b 01       	movw	r8, r22
     47e:	5c 01       	movw	r10, r24
     480:	9b 01       	movw	r18, r22
     482:	ac 01       	movw	r20, r24
     484:	c7 01       	movw	r24, r14
     486:	b6 01       	movw	r22, r12
     488:	0e 94 24 06 	call	0xc48	; 0xc48 <__subsf3>
     48c:	2a e9       	ldi	r18, 0x9A	; 154
     48e:	39 e9       	ldi	r19, 0x99	; 153
     490:	49 e1       	ldi	r20, 0x19	; 25
     492:	5f e3       	ldi	r21, 0x3F	; 63
     494:	0e 94 96 06 	call	0xd2c	; 0xd2c <__divsf3>
     498:	9b 01       	movw	r18, r22
     49a:	ac 01       	movw	r20, r24
	position = (float)degrees + temp;
     49c:	c5 01       	movw	r24, r10
     49e:	b4 01       	movw	r22, r8
     4a0:	0e 94 25 06 	call	0xc4a	; 0xc4a <__addsf3>
	
	dtostrf(position, 6, 4, lat_degrees_buffer); /* dtostrf is a function that convert float value into string.Here the position is a float value and it convert as a string degree buffer variable*/
     4a4:	06 ea       	ldi	r16, 0xA6	; 166
     4a6:	12 e0       	ldi	r17, 0x02	; 2
     4a8:	24 e0       	ldi	r18, 0x04	; 4
     4aa:	46 e0       	ldi	r20, 0x06	; 6
     4ac:	0e 94 7f 08 	call	0x10fe	; 0x10fe <dtostrf>
}
     4b0:	1f 91       	pop	r17
     4b2:	0f 91       	pop	r16
     4b4:	ff 90       	pop	r15
     4b6:	ef 90       	pop	r14
     4b8:	df 90       	pop	r13
     4ba:	cf 90       	pop	r12
     4bc:	bf 90       	pop	r11
     4be:	af 90       	pop	r10
     4c0:	9f 90       	pop	r9
     4c2:	8f 90       	pop	r8
     4c4:	08 95       	ret

000004c6 <get_latitude>:




void get_latitude(uint16_t lat_pointer){  //unsigned 16-bit integer - integers between 0 and 65,535
	cli(); //Command Line Interface - CLIs accept as input commands that are entered by keyboard
     4c6:	f8 94       	cli
	uint8_t lat_index; //unsigned 8-bit integer- integer has a range of 0 to 255
	uint8_t index = lat_pointer+1;//unsigned 8-bit integer- integer has a range of 0 to 255
     4c8:	8f 5f       	subi	r24, 0xFF	; 255
	lat_index=0;
     4ca:	90 e0       	ldi	r25, 0x00	; 0
	
	/* parse Latitude in GGA string stored in buffer */
	for(;GGA_Buffer[index]!=',';index++){
     4cc:	07 c0       	rjmp	.+14     	; 0x4dc <get_latitude+0x16>
		Latitude_Buffer[lat_index]= GGA_Buffer[index];
     4ce:	e9 2f       	mov	r30, r25
     4d0:	f0 e0       	ldi	r31, 0x00	; 0
     4d2:	e1 58       	subi	r30, 0x81	; 129
     4d4:	fd 4f       	sbci	r31, 0xFD	; 253
     4d6:	20 83       	st	Z, r18
		lat_index++;
     4d8:	9f 5f       	subi	r25, 0xFF	; 255
	uint8_t lat_index; //unsigned 8-bit integer- integer has a range of 0 to 255
	uint8_t index = lat_pointer+1;//unsigned 8-bit integer- integer has a range of 0 to 255
	lat_index=0;
	
	/* parse Latitude in GGA string stored in buffer */
	for(;GGA_Buffer[index]!=',';index++){
     4da:	8f 5f       	subi	r24, 0xFF	; 255
     4dc:	e8 2f       	mov	r30, r24
     4de:	f0 e0       	ldi	r31, 0x00	; 0
     4e0:	e5 55       	subi	r30, 0x55	; 85
     4e2:	fe 4f       	sbci	r31, 0xFE	; 254
     4e4:	20 81       	ld	r18, Z
     4e6:	2c 32       	cpi	r18, 0x2C	; 44
     4e8:	91 f7       	brne	.-28     	; 0x4ce <get_latitude+0x8>
		Latitude_Buffer[lat_index]= GGA_Buffer[index];
		lat_index++;
	}
	
	Latitude_Buffer[lat_index++] = GGA_Buffer[index++];
     4ea:	31 e0       	ldi	r19, 0x01	; 1
     4ec:	39 0f       	add	r19, r25
     4ee:	e9 2f       	mov	r30, r25
     4f0:	f0 e0       	ldi	r31, 0x00	; 0
     4f2:	8f 5f       	subi	r24, 0xFF	; 255
     4f4:	e1 58       	subi	r30, 0x81	; 129
     4f6:	fd 4f       	sbci	r31, 0xFD	; 253
     4f8:	20 83       	st	Z, r18
	Latitude_Buffer[lat_index]= GGA_Buffer[index];		/* get direction */
     4fa:	23 2f       	mov	r18, r19
     4fc:	30 e0       	ldi	r19, 0x00	; 0
     4fe:	e8 2f       	mov	r30, r24
     500:	f0 e0       	ldi	r31, 0x00	; 0
     502:	e5 55       	subi	r30, 0x55	; 85
     504:	fe 4f       	sbci	r31, 0xFE	; 254
     506:	80 81       	ld	r24, Z
     508:	f9 01       	movw	r30, r18
     50a:	e1 58       	subi	r30, 0x81	; 129
     50c:	fd 4f       	sbci	r31, 0xFD	; 253
     50e:	80 83       	st	Z, r24
	convert_to_degrees_lat(Latitude_Buffer);   // convert raw latitude into degree format and pass that value as string
     510:	8f e7       	ldi	r24, 0x7F	; 127
     512:	92 e0       	ldi	r25, 0x02	; 2
     514:	0e 94 22 02 	call	0x444	; 0x444 <convert_to_degrees_lat>
	sei(); //It is a macro that executes an assembler instruction to enable interrupts.
     518:	78 94       	sei
     51a:	08 95       	ret

0000051c <convert_to_degrees_long>:
	position = (float)degrees + temp;
	
	dtostrf(position, 6, 4, lat_degrees_buffer); /* dtostrf is a function that convert float value into string.Here the position is a float value and it convert as a string degree buffer variable*/
}

void convert_to_degrees_long(char *raw){
     51c:	8f 92       	push	r8
     51e:	9f 92       	push	r9
     520:	af 92       	push	r10
     522:	bf 92       	push	r11
     524:	cf 92       	push	r12
     526:	df 92       	push	r13
     528:	ef 92       	push	r14
     52a:	ff 92       	push	r15
     52c:	0f 93       	push	r16
     52e:	1f 93       	push	r17
	float decimal_value,temp;
	
	int32_t degrees;
	
	float position;
	value = atof(raw); /* convert string into float for conversion */
     530:	0e 94 9f 08 	call	0x113e	; 0x113e <atof>
	
	/* convert raw latitude/longitude into degree format */
	decimal_value = (value/100);
     534:	20 e0       	ldi	r18, 0x00	; 0
     536:	30 e0       	ldi	r19, 0x00	; 0
     538:	48 ec       	ldi	r20, 0xC8	; 200
     53a:	52 e4       	ldi	r21, 0x42	; 66
     53c:	0e 94 96 06 	call	0xd2c	; 0xd2c <__divsf3>
     540:	6b 01       	movw	r12, r22
     542:	7c 01       	movw	r14, r24
	degrees = (int)(decimal_value);
     544:	0e 94 08 07 	call	0xe10	; 0xe10 <__fixsfsi>
	temp = (decimal_value - (int)decimal_value)/0.6;
     548:	07 2e       	mov	r0, r23
     54a:	00 0c       	add	r0, r0
     54c:	88 0b       	sbc	r24, r24
     54e:	99 0b       	sbc	r25, r25
     550:	0e 94 40 07 	call	0xe80	; 0xe80 <__floatsisf>
     554:	4b 01       	movw	r8, r22
     556:	5c 01       	movw	r10, r24
     558:	9b 01       	movw	r18, r22
     55a:	ac 01       	movw	r20, r24
     55c:	c7 01       	movw	r24, r14
     55e:	b6 01       	movw	r22, r12
     560:	0e 94 24 06 	call	0xc48	; 0xc48 <__subsf3>
     564:	2a e9       	ldi	r18, 0x9A	; 154
     566:	39 e9       	ldi	r19, 0x99	; 153
     568:	49 e1       	ldi	r20, 0x19	; 25
     56a:	5f e3       	ldi	r21, 0x3F	; 63
     56c:	0e 94 96 06 	call	0xd2c	; 0xd2c <__divsf3>
     570:	9b 01       	movw	r18, r22
     572:	ac 01       	movw	r20, r24
	position = (float)degrees + temp;
     574:	c5 01       	movw	r24, r10
     576:	b4 01       	movw	r22, r8
     578:	0e 94 25 06 	call	0xc4a	; 0xc4a <__addsf3>
	
	dtostrf(position, 6, 4, long_degrees_buffer); /* dtostrf is a function that convert float value into string.Here the position is a float value and it convert as a string degree buffer variable*/
     57c:	0d e4       	ldi	r16, 0x4D	; 77
     57e:	12 e0       	ldi	r17, 0x02	; 2
     580:	24 e0       	ldi	r18, 0x04	; 4
     582:	46 e0       	ldi	r20, 0x06	; 6
     584:	0e 94 7f 08 	call	0x10fe	; 0x10fe <dtostrf>
}
     588:	1f 91       	pop	r17
     58a:	0f 91       	pop	r16
     58c:	ff 90       	pop	r15
     58e:	ef 90       	pop	r14
     590:	df 90       	pop	r13
     592:	cf 90       	pop	r12
     594:	bf 90       	pop	r11
     596:	af 90       	pop	r10
     598:	9f 90       	pop	r9
     59a:	8f 90       	pop	r8
     59c:	08 95       	ret

0000059e <get_longitude>:
	convert_to_degrees_lat(Latitude_Buffer);   // convert raw latitude into degree format and pass that value as string
	sei(); //It is a macro that executes an assembler instruction to enable interrupts.
}

void get_longitude(uint16_t long_pointer){
	cli(); //Command Line Interface - CLIs accept as input commands that are entered by keyboard
     59e:	f8 94       	cli
	uint8_t long_index;  //unsigned 8-bit integer- integer has a range of 0 to 255
	uint8_t index = long_pointer+1;
     5a0:	8f 5f       	subi	r24, 0xFF	; 255
	long_index=0;
     5a2:	90 e0       	ldi	r25, 0x00	; 0
	
	/* parse Longitude in GGA string stored in buffer */
	for( ; GGA_Buffer[index]!=','; index++){
     5a4:	07 c0       	rjmp	.+14     	; 0x5b4 <get_longitude+0x16>
		Longitude_Buffer[long_index]= GGA_Buffer[index];
     5a6:	e9 2f       	mov	r30, r25
     5a8:	f0 e0       	ldi	r31, 0x00	; 0
     5aa:	ef 59       	subi	r30, 0x9F	; 159
     5ac:	fd 4f       	sbci	r31, 0xFD	; 253
     5ae:	20 83       	st	Z, r18
		long_index++;
     5b0:	9f 5f       	subi	r25, 0xFF	; 255
	uint8_t long_index;  //unsigned 8-bit integer- integer has a range of 0 to 255
	uint8_t index = long_pointer+1;
	long_index=0;
	
	/* parse Longitude in GGA string stored in buffer */
	for( ; GGA_Buffer[index]!=','; index++){
     5b2:	8f 5f       	subi	r24, 0xFF	; 255
     5b4:	e8 2f       	mov	r30, r24
     5b6:	f0 e0       	ldi	r31, 0x00	; 0
     5b8:	e5 55       	subi	r30, 0x55	; 85
     5ba:	fe 4f       	sbci	r31, 0xFE	; 254
     5bc:	20 81       	ld	r18, Z
     5be:	2c 32       	cpi	r18, 0x2C	; 44
     5c0:	91 f7       	brne	.-28     	; 0x5a6 <get_longitude+0x8>
		Longitude_Buffer[long_index]= GGA_Buffer[index];
		long_index++;
	}
	
	Longitude_Buffer[long_index++] = GGA_Buffer[index++];
     5c2:	31 e0       	ldi	r19, 0x01	; 1
     5c4:	39 0f       	add	r19, r25
     5c6:	e9 2f       	mov	r30, r25
     5c8:	f0 e0       	ldi	r31, 0x00	; 0
     5ca:	8f 5f       	subi	r24, 0xFF	; 255
     5cc:	ef 59       	subi	r30, 0x9F	; 159
     5ce:	fd 4f       	sbci	r31, 0xFD	; 253
     5d0:	20 83       	st	Z, r18
	Longitude_Buffer[long_index]   = GGA_Buffer[index]; /* get direction */
     5d2:	23 2f       	mov	r18, r19
     5d4:	30 e0       	ldi	r19, 0x00	; 0
     5d6:	e8 2f       	mov	r30, r24
     5d8:	f0 e0       	ldi	r31, 0x00	; 0
     5da:	e5 55       	subi	r30, 0x55	; 85
     5dc:	fe 4f       	sbci	r31, 0xFE	; 254
     5de:	80 81       	ld	r24, Z
     5e0:	f9 01       	movw	r30, r18
     5e2:	ef 59       	subi	r30, 0x9F	; 159
     5e4:	fd 4f       	sbci	r31, 0xFD	; 253
     5e6:	80 83       	st	Z, r24
	convert_to_degrees_long(Longitude_Buffer); // convert raw longitude into degree format and pass that value as string
     5e8:	81 e6       	ldi	r24, 0x61	; 97
     5ea:	92 e0       	ldi	r25, 0x02	; 2
     5ec:	0e 94 8e 02 	call	0x51c	; 0x51c <convert_to_degrees_long>
	sei(); //It is a macro that executes an assembler instruction to enable interrupts.
     5f0:	78 94       	sei
     5f2:	08 95       	ret

000005f4 <__vector_13>:
	
	dtostrf(position, 6, 4, long_degrees_buffer); /* dtostrf is a function that convert float value into string.Here the position is a float value and it convert as a string degree buffer variable*/
}

ISR (USART_RXC_vect)
{
     5f4:	1f 92       	push	r1
     5f6:	0f 92       	push	r0
     5f8:	0f b6       	in	r0, 0x3f	; 63
     5fa:	0f 92       	push	r0
     5fc:	11 24       	eor	r1, r1
     5fe:	2f 93       	push	r18
     600:	3f 93       	push	r19
     602:	4f 93       	push	r20
     604:	5f 93       	push	r21
     606:	8f 93       	push	r24
     608:	9f 93       	push	r25
     60a:	ef 93       	push	r30
     60c:	ff 93       	push	r31
	uint8_t oldsrg = SREG;  //unsigned 8-bit integer- integer has a range of 0 to 255
     60e:	9f b7       	in	r25, 0x3f	; 63
	cli();					//Command Line Interface - CLIs accept as input commands that are entered by keyboard
     610:	f8 94       	cli
	char received_char = UDR;
     612:	8c b1       	in	r24, 0x0c	; 12
	
	if(received_char =='$'){                                                    /* check for '$' */
     614:	84 32       	cpi	r24, 0x24	; 36
     616:	59 f4       	brne	.+22     	; 0x62e <__vector_13+0x3a>
		GGA_Index = 0;
     618:	10 92 7b 02 	sts	0x027B, r1	; 0x80027b <GGA_Index+0x1>
     61c:	10 92 7a 02 	sts	0x027A, r1	; 0x80027a <GGA_Index>
		CommaCounter = 0;
     620:	10 92 79 02 	sts	0x0279, r1	; 0x800279 <CommaCounter+0x1>
     624:	10 92 78 02 	sts	0x0278, r1	; 0x800278 <CommaCounter>
		IsItGGAString = false;
     628:	10 92 a6 01 	sts	0x01A6, r1	; 0x8001a6 <__data_end>
     62c:	45 c0       	rjmp	.+138    	; 0x6b8 <__vector_13+0xc4>
	}
	else if(IsItGGAString == true){                                             /* if true save GGA info. into buffer */
     62e:	20 91 a6 01 	lds	r18, 0x01A6	; 0x8001a6 <__data_end>
     632:	22 23       	and	r18, r18
     634:	29 f1       	breq	.+74     	; 0x680 <__vector_13+0x8c>
		if(received_char == ',' ) GGA_Pointers[CommaCounter++] = GGA_Index;     /* store instances of ',' in buffer */
     636:	8c 32       	cpi	r24, 0x2C	; 44
     638:	99 f4       	brne	.+38     	; 0x660 <__vector_13+0x6c>
     63a:	20 91 78 02 	lds	r18, 0x0278	; 0x800278 <CommaCounter>
     63e:	30 91 79 02 	lds	r19, 0x0279	; 0x800279 <CommaCounter+0x1>
     642:	a9 01       	movw	r20, r18
     644:	4f 5f       	subi	r20, 0xFF	; 255
     646:	5f 4f       	sbci	r21, 0xFF	; 255
     648:	50 93 79 02 	sts	0x0279, r21	; 0x800279 <CommaCounter+0x1>
     64c:	40 93 78 02 	sts	0x0278, r20	; 0x800278 <CommaCounter>
     650:	40 91 7a 02 	lds	r20, 0x027A	; 0x80027a <GGA_Index>
     654:	50 91 7b 02 	lds	r21, 0x027B	; 0x80027b <GGA_Index+0x1>
     658:	f9 01       	movw	r30, r18
     65a:	ee 56       	subi	r30, 0x6E	; 110
     65c:	fd 4f       	sbci	r31, 0xFD	; 253
     65e:	40 83       	st	Z, r20
		GGA_Buffer[GGA_Index++] = received_char;
     660:	20 91 7a 02 	lds	r18, 0x027A	; 0x80027a <GGA_Index>
     664:	30 91 7b 02 	lds	r19, 0x027B	; 0x80027b <GGA_Index+0x1>
     668:	a9 01       	movw	r20, r18
     66a:	4f 5f       	subi	r20, 0xFF	; 255
     66c:	5f 4f       	sbci	r21, 0xFF	; 255
     66e:	50 93 7b 02 	sts	0x027B, r21	; 0x80027b <GGA_Index+0x1>
     672:	40 93 7a 02 	sts	0x027A, r20	; 0x80027a <GGA_Index>
     676:	f9 01       	movw	r30, r18
     678:	e5 55       	subi	r30, 0x55	; 85
     67a:	fe 4f       	sbci	r31, 0xFE	; 254
     67c:	80 83       	st	Z, r24
     67e:	1c c0       	rjmp	.+56     	; 0x6b8 <__vector_13+0xc4>
	}
	else if(GGA_CODE[0] == 'G' && GGA_CODE[1] == 'G' && GGA_CODE[2] == 'A'){    /* check for GGA string */
     680:	20 91 7c 02 	lds	r18, 0x027C	; 0x80027c <GGA_CODE>
     684:	27 34       	cpi	r18, 0x47	; 71
     686:	89 f4       	brne	.+34     	; 0x6aa <__vector_13+0xb6>
     688:	20 91 7d 02 	lds	r18, 0x027D	; 0x80027d <GGA_CODE+0x1>
     68c:	27 34       	cpi	r18, 0x47	; 71
     68e:	69 f4       	brne	.+26     	; 0x6aa <__vector_13+0xb6>
     690:	20 91 7e 02 	lds	r18, 0x027E	; 0x80027e <GGA_CODE+0x2>
     694:	21 34       	cpi	r18, 0x41	; 65
     696:	49 f4       	brne	.+18     	; 0x6aa <__vector_13+0xb6>
		IsItGGAString = true;
     698:	81 e0       	ldi	r24, 0x01	; 1
     69a:	80 93 a6 01 	sts	0x01A6, r24	; 0x8001a6 <__data_end>
		GGA_CODE[0] = 0; GGA_CODE[1] = 0; GGA_CODE[2] = 0;
     69e:	ec e7       	ldi	r30, 0x7C	; 124
     6a0:	f2 e0       	ldi	r31, 0x02	; 2
     6a2:	10 82       	st	Z, r1
     6a4:	11 82       	std	Z+1, r1	; 0x01
     6a6:	12 82       	std	Z+2, r1	; 0x02
     6a8:	07 c0       	rjmp	.+14     	; 0x6b8 <__vector_13+0xc4>
	}
	else{
		GGA_CODE[0] = GGA_CODE[1];  GGA_CODE[1] = GGA_CODE[2]; GGA_CODE[2] = received_char;
     6aa:	ec e7       	ldi	r30, 0x7C	; 124
     6ac:	f2 e0       	ldi	r31, 0x02	; 2
     6ae:	21 81       	ldd	r18, Z+1	; 0x01
     6b0:	20 83       	st	Z, r18
     6b2:	22 81       	ldd	r18, Z+2	; 0x02
     6b4:	21 83       	std	Z+1, r18	; 0x01
     6b6:	82 83       	std	Z+2, r24	; 0x02
	}
	SREG = oldsrg;
     6b8:	9f bf       	out	0x3f, r25	; 63
}
     6ba:	ff 91       	pop	r31
     6bc:	ef 91       	pop	r30
     6be:	9f 91       	pop	r25
     6c0:	8f 91       	pop	r24
     6c2:	5f 91       	pop	r21
     6c4:	4f 91       	pop	r20
     6c6:	3f 91       	pop	r19
     6c8:	2f 91       	pop	r18
     6ca:	0f 90       	pop	r0
     6cc:	0f be       	out	0x3f, r0	; 63
     6ce:	0f 90       	pop	r0
     6d0:	1f 90       	pop	r1
     6d2:	18 95       	reti

000006d4 <sendMessage>:

void sendMessage(char* msg,char* lat,char* lngtd,char* altitude){
     6d4:	cf 92       	push	r12
     6d6:	df 92       	push	r13
     6d8:	ef 92       	push	r14
     6da:	ff 92       	push	r15
     6dc:	0f 93       	push	r16
     6de:	1f 93       	push	r17
     6e0:	cf 93       	push	r28
     6e2:	df 93       	push	r29
     6e4:	cd b7       	in	r28, 0x3d	; 61
     6e6:	de b7       	in	r29, 0x3e	; 62
     6e8:	a3 97       	sbiw	r28, 0x23	; 35
     6ea:	0f b6       	in	r0, 0x3f	; 63
     6ec:	f8 94       	cli
     6ee:	de bf       	out	0x3e, r29	; 62
     6f0:	0f be       	out	0x3f, r0	; 63
     6f2:	cd bf       	out	0x3d, r28	; 61
     6f4:	7c 01       	movw	r14, r24
     6f6:	6a 01       	movw	r12, r20
     6f8:	89 01       	movw	r16, r18
	unsigned char cmd_1[4]="AT";
     6fa:	81 e4       	ldi	r24, 0x41	; 65
     6fc:	94 e5       	ldi	r25, 0x54	; 84
     6fe:	9a 83       	std	Y+2, r25	; 0x02
     700:	89 83       	std	Y+1, r24	; 0x01
     702:	1c 82       	std	Y+4, r1	; 0x04
     704:	1b 82       	std	Y+3, r1	; 0x03
	unsigned char cmd_2[10]="AT+CMGF=1";
     706:	8a e0       	ldi	r24, 0x0A	; 10
     708:	e7 ec       	ldi	r30, 0xC7	; 199
     70a:	f0 e0       	ldi	r31, 0x00	; 0
     70c:	de 01       	movw	r26, r28
     70e:	15 96       	adiw	r26, 0x05	; 5
     710:	01 90       	ld	r0, Z+
     712:	0d 92       	st	X+, r0
     714:	8a 95       	dec	r24
     716:	e1 f7       	brne	.-8      	; 0x710 <sendMessage+0x3c>
	unsigned char cmd_3[10]="AT+CMGS=";
     718:	89 e0       	ldi	r24, 0x09	; 9
     71a:	e0 e6       	ldi	r30, 0x60	; 96
     71c:	f0 e0       	ldi	r31, 0x00	; 0
     71e:	de 01       	movw	r26, r28
     720:	1f 96       	adiw	r26, 0x0f	; 15
     722:	01 90       	ld	r0, Z+
     724:	0d 92       	st	X+, r0
     726:	8a 95       	dec	r24
     728:	e1 f7       	brne	.-8      	; 0x722 <sendMessage+0x4e>
     72a:	18 8e       	std	Y+24, r1	; 0x18
	char* cmd_4 = msg;
	strcat(cmd_4,"\r   Location\r   Latitude : ");
     72c:	d7 01       	movw	r26, r14
     72e:	0d 90       	ld	r0, X+
     730:	00 20       	and	r0, r0
     732:	e9 f7       	brne	.-6      	; 0x72e <sendMessage+0x5a>
     734:	11 97       	sbiw	r26, 0x01	; 1
     736:	8c e1       	ldi	r24, 0x1C	; 28
     738:	ea e6       	ldi	r30, 0x6A	; 106
     73a:	f0 e0       	ldi	r31, 0x00	; 0
     73c:	01 90       	ld	r0, Z+
     73e:	0d 92       	st	X+, r0
     740:	8a 95       	dec	r24
     742:	e1 f7       	brne	.-8      	; 0x73c <sendMessage+0x68>
	strcat(cmd_4,lat);
     744:	c7 01       	movw	r24, r14
     746:	0e 94 a3 08 	call	0x1146	; 0x1146 <strcat>
	strcat(cmd_4,"\r   Longitude : ");
     74a:	d7 01       	movw	r26, r14
     74c:	0d 90       	ld	r0, X+
     74e:	00 20       	and	r0, r0
     750:	e9 f7       	brne	.-6      	; 0x74c <sendMessage+0x78>
     752:	11 97       	sbiw	r26, 0x01	; 1
     754:	81 e1       	ldi	r24, 0x11	; 17
     756:	e6 e8       	ldi	r30, 0x86	; 134
     758:	f0 e0       	ldi	r31, 0x00	; 0
     75a:	01 90       	ld	r0, Z+
     75c:	0d 92       	st	X+, r0
     75e:	8a 95       	dec	r24
     760:	e1 f7       	brne	.-8      	; 0x75a <sendMessage+0x86>
	strcat(cmd_4,lngtd);
     762:	b6 01       	movw	r22, r12
     764:	c7 01       	movw	r24, r14
     766:	0e 94 a3 08 	call	0x1146	; 0x1146 <strcat>
	strcat(cmd_4,"\r   Altitude : ");
     76a:	d7 01       	movw	r26, r14
     76c:	0d 90       	ld	r0, X+
     76e:	00 20       	and	r0, r0
     770:	e9 f7       	brne	.-6      	; 0x76c <sendMessage+0x98>
     772:	11 97       	sbiw	r26, 0x01	; 1
     774:	80 e1       	ldi	r24, 0x10	; 16
     776:	e7 e9       	ldi	r30, 0x97	; 151
     778:	f0 e0       	ldi	r31, 0x00	; 0
     77a:	01 90       	ld	r0, Z+
     77c:	0d 92       	st	X+, r0
     77e:	8a 95       	dec	r24
     780:	e1 f7       	brne	.-8      	; 0x77a <sendMessage+0xa6>
	strcat(cmd_4,altitude);
     782:	b8 01       	movw	r22, r16
     784:	c7 01       	movw	r24, r14
     786:	0e 94 a3 08 	call	0x1146	; 0x1146 <strcat>
	unsigned char num[11] = "0771234567";
     78a:	8b e0       	ldi	r24, 0x0B	; 11
     78c:	e1 ed       	ldi	r30, 0xD1	; 209
     78e:	f0 e0       	ldi	r31, 0x00	; 0
     790:	de 01       	movw	r26, r28
     792:	59 96       	adiw	r26, 0x19	; 25
     794:	01 90       	ld	r0, Z+
     796:	0d 92       	st	X+, r0
     798:	8a 95       	dec	r24
     79a:	e1 f7       	brne	.-8      	; 0x794 <sendMessage+0xc0>
	LCD_Clear();
     79c:	0e 94 a4 01 	call	0x348	; 0x348 <LCD_Clear>
	LCD_String_xy(1,0,"Message");
     7a0:	47 ea       	ldi	r20, 0xA7	; 167
     7a2:	50 e0       	ldi	r21, 0x00	; 0
     7a4:	60 e0       	ldi	r22, 0x00	; 0
     7a6:	81 e0       	ldi	r24, 0x01	; 1
     7a8:	0e 94 88 01 	call	0x310	; 0x310 <LCD_String_xy>
	LCD_Command(0xc0);
     7ac:	80 ec       	ldi	r24, 0xC0	; 192
     7ae:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <LCD_Command>
	LCD_String_xy(2,3,"Forwarding");
     7b2:	4f ea       	ldi	r20, 0xAF	; 175
     7b4:	50 e0       	ldi	r21, 0x00	; 0
     7b6:	63 e0       	ldi	r22, 0x03	; 3
     7b8:	82 e0       	ldi	r24, 0x02	; 2
     7ba:	0e 94 88 01 	call	0x310	; 0x310 <LCD_String_xy>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     7be:	2f ef       	ldi	r18, 0xFF	; 255
     7c0:	84 e3       	ldi	r24, 0x34	; 52
     7c2:	9c e0       	ldi	r25, 0x0C	; 12
     7c4:	21 50       	subi	r18, 0x01	; 1
     7c6:	80 40       	sbci	r24, 0x00	; 0
     7c8:	90 40       	sbci	r25, 0x00	; 0
     7ca:	e1 f7       	brne	.-8      	; 0x7c4 <sendMessage+0xf0>
     7cc:	00 c0       	rjmp	.+0      	; 0x7ce <sendMessage+0xfa>
     7ce:	00 00       	nop
	_delay_ms(500);
	for (int i=0;cmd_1[i]!='\0';i++) /*checking communication*/
     7d0:	00 e0       	ldi	r16, 0x00	; 0
     7d2:	10 e0       	ldi	r17, 0x00	; 0
     7d4:	0a c0       	rjmp	.+20     	; 0x7ea <sendMessage+0x116>
	{
		USART_TxChar(cmd_1[i]);
     7d6:	0e 94 00 02 	call	0x400	; 0x400 <USART_TxChar>
     7da:	8f e0       	ldi	r24, 0x0F	; 15
     7dc:	97 e2       	ldi	r25, 0x27	; 39
     7de:	01 97       	sbiw	r24, 0x01	; 1
     7e0:	f1 f7       	brne	.-4      	; 0x7de <sendMessage+0x10a>
     7e2:	00 c0       	rjmp	.+0      	; 0x7e4 <sendMessage+0x110>
     7e4:	00 00       	nop
	LCD_Clear();
	LCD_String_xy(1,0,"Message");
	LCD_Command(0xc0);
	LCD_String_xy(2,3,"Forwarding");
	_delay_ms(500);
	for (int i=0;cmd_1[i]!='\0';i++) /*checking communication*/
     7e6:	0f 5f       	subi	r16, 0xFF	; 255
     7e8:	1f 4f       	sbci	r17, 0xFF	; 255
     7ea:	e1 e0       	ldi	r30, 0x01	; 1
     7ec:	f0 e0       	ldi	r31, 0x00	; 0
     7ee:	ec 0f       	add	r30, r28
     7f0:	fd 1f       	adc	r31, r29
     7f2:	e0 0f       	add	r30, r16
     7f4:	f1 1f       	adc	r31, r17
     7f6:	80 81       	ld	r24, Z
     7f8:	81 11       	cpse	r24, r1
     7fa:	ed cf       	rjmp	.-38     	; 0x7d6 <sendMessage+0x102>
	{
		USART_TxChar(cmd_1[i]);
		_delay_ms(5);
	}
	USART_TxChar('\r'); /*carriage return ---> begining from the first line without going to next line*/
     7fc:	8d e0       	ldi	r24, 0x0D	; 13
     7fe:	0e 94 00 02 	call	0x400	; 0x400 <USART_TxChar>
     802:	8f e0       	ldi	r24, 0x0F	; 15
     804:	97 e2       	ldi	r25, 0x27	; 39
     806:	01 97       	sbiw	r24, 0x01	; 1
     808:	f1 f7       	brne	.-4      	; 0x806 <__DATA_REGION_LENGTH__+0x6>
     80a:	00 c0       	rjmp	.+0      	; 0x80c <__DATA_REGION_LENGTH__+0xc>
     80c:	00 00       	nop
	_delay_ms(5);
	
	for (int i=0;cmd_2[i]!='\0';i++) /* set the operating mode to SMS text mode*/
     80e:	00 e0       	ldi	r16, 0x00	; 0
     810:	10 e0       	ldi	r17, 0x00	; 0
     812:	0a c0       	rjmp	.+20     	; 0x828 <__DATA_REGION_LENGTH__+0x28>
	{
		USART_TxChar(cmd_2[i]);
     814:	0e 94 00 02 	call	0x400	; 0x400 <USART_TxChar>
     818:	8f e0       	ldi	r24, 0x0F	; 15
     81a:	97 e2       	ldi	r25, 0x27	; 39
     81c:	01 97       	sbiw	r24, 0x01	; 1
     81e:	f1 f7       	brne	.-4      	; 0x81c <__DATA_REGION_LENGTH__+0x1c>
     820:	00 c0       	rjmp	.+0      	; 0x822 <__DATA_REGION_LENGTH__+0x22>
     822:	00 00       	nop
		_delay_ms(5);
	}
	USART_TxChar('\r'); /*carriage return ---> begining from the first line without going to next line*/
	_delay_ms(5);
	
	for (int i=0;cmd_2[i]!='\0';i++) /* set the operating mode to SMS text mode*/
     824:	0f 5f       	subi	r16, 0xFF	; 255
     826:	1f 4f       	sbci	r17, 0xFF	; 255
     828:	e5 e0       	ldi	r30, 0x05	; 5
     82a:	f0 e0       	ldi	r31, 0x00	; 0
     82c:	ec 0f       	add	r30, r28
     82e:	fd 1f       	adc	r31, r29
     830:	e0 0f       	add	r30, r16
     832:	f1 1f       	adc	r31, r17
     834:	80 81       	ld	r24, Z
     836:	81 11       	cpse	r24, r1
     838:	ed cf       	rjmp	.-38     	; 0x814 <__DATA_REGION_LENGTH__+0x14>
	{
		USART_TxChar(cmd_2[i]);
		_delay_ms(5);
	}
	USART_TxChar('\r');
     83a:	8d e0       	ldi	r24, 0x0D	; 13
     83c:	0e 94 00 02 	call	0x400	; 0x400 <USART_TxChar>
     840:	8f e0       	ldi	r24, 0x0F	; 15
     842:	97 e2       	ldi	r25, 0x27	; 39
     844:	01 97       	sbiw	r24, 0x01	; 1
     846:	f1 f7       	brne	.-4      	; 0x844 <__DATA_REGION_LENGTH__+0x44>
     848:	00 c0       	rjmp	.+0      	; 0x84a <__DATA_REGION_LENGTH__+0x4a>
     84a:	00 00       	nop
	_delay_ms(5);
	
	for (int i=0;cmd_3[i]!='\0';i++) /* send SMS in text mode*/
     84c:	00 e0       	ldi	r16, 0x00	; 0
     84e:	10 e0       	ldi	r17, 0x00	; 0
     850:	0a c0       	rjmp	.+20     	; 0x866 <__stack+0x7>
	{
		USART_TxChar(cmd_3[i]);
     852:	0e 94 00 02 	call	0x400	; 0x400 <USART_TxChar>
     856:	8f e0       	ldi	r24, 0x0F	; 15
     858:	97 e2       	ldi	r25, 0x27	; 39
     85a:	01 97       	sbiw	r24, 0x01	; 1
     85c:	f1 f7       	brne	.-4      	; 0x85a <__DATA_REGION_LENGTH__+0x5a>
     85e:	00 c0       	rjmp	.+0      	; 0x860 <__stack+0x1>
     860:	00 00       	nop
		_delay_ms(5);
	}
	USART_TxChar('\r');
	_delay_ms(5);
	
	for (int i=0;cmd_3[i]!='\0';i++) /* send SMS in text mode*/
     862:	0f 5f       	subi	r16, 0xFF	; 255
     864:	1f 4f       	sbci	r17, 0xFF	; 255
     866:	ef e0       	ldi	r30, 0x0F	; 15
     868:	f0 e0       	ldi	r31, 0x00	; 0
     86a:	ec 0f       	add	r30, r28
     86c:	fd 1f       	adc	r31, r29
     86e:	e0 0f       	add	r30, r16
     870:	f1 1f       	adc	r31, r17
     872:	80 81       	ld	r24, Z
     874:	81 11       	cpse	r24, r1
     876:	ed cf       	rjmp	.-38     	; 0x852 <__DATA_REGION_LENGTH__+0x52>
	{
		USART_TxChar(cmd_3[i]);
		_delay_ms(5);
	}
	UDR='"';
     878:	82 e2       	ldi	r24, 0x22	; 34
     87a:	8c b9       	out	0x0c, r24	; 12
     87c:	9f ef       	ldi	r25, 0xFF	; 255
     87e:	20 e7       	ldi	r18, 0x70	; 112
     880:	82 e0       	ldi	r24, 0x02	; 2
     882:	91 50       	subi	r25, 0x01	; 1
     884:	20 40       	sbci	r18, 0x00	; 0
     886:	80 40       	sbci	r24, 0x00	; 0
     888:	e1 f7       	brne	.-8      	; 0x882 <__stack+0x23>
     88a:	00 c0       	rjmp	.+0      	; 0x88c <__stack+0x2d>
     88c:	00 00       	nop
	_delay_ms(100);
	for (int i=0;num[i]!='\0';i++) /* SMS to be sent */
     88e:	00 e0       	ldi	r16, 0x00	; 0
     890:	10 e0       	ldi	r17, 0x00	; 0
     892:	0a c0       	rjmp	.+20     	; 0x8a8 <__stack+0x49>
	{
		USART_TxChar(num[i]);
     894:	0e 94 00 02 	call	0x400	; 0x400 <USART_TxChar>
     898:	8f e0       	ldi	r24, 0x0F	; 15
     89a:	97 e2       	ldi	r25, 0x27	; 39
     89c:	01 97       	sbiw	r24, 0x01	; 1
     89e:	f1 f7       	brne	.-4      	; 0x89c <__stack+0x3d>
     8a0:	00 c0       	rjmp	.+0      	; 0x8a2 <__stack+0x43>
     8a2:	00 00       	nop
		USART_TxChar(cmd_3[i]);
		_delay_ms(5);
	}
	UDR='"';
	_delay_ms(100);
	for (int i=0;num[i]!='\0';i++) /* SMS to be sent */
     8a4:	0f 5f       	subi	r16, 0xFF	; 255
     8a6:	1f 4f       	sbci	r17, 0xFF	; 255
     8a8:	e9 e1       	ldi	r30, 0x19	; 25
     8aa:	f0 e0       	ldi	r31, 0x00	; 0
     8ac:	ec 0f       	add	r30, r28
     8ae:	fd 1f       	adc	r31, r29
     8b0:	e0 0f       	add	r30, r16
     8b2:	f1 1f       	adc	r31, r17
     8b4:	80 81       	ld	r24, Z
     8b6:	81 11       	cpse	r24, r1
     8b8:	ed cf       	rjmp	.-38     	; 0x894 <__stack+0x35>
	{
		USART_TxChar(num[i]);
		_delay_ms(5);
	}
	UDR='"';
     8ba:	82 e2       	ldi	r24, 0x22	; 34
     8bc:	8c b9       	out	0x0c, r24	; 12
     8be:	8f e0       	ldi	r24, 0x0F	; 15
     8c0:	97 e2       	ldi	r25, 0x27	; 39
     8c2:	01 97       	sbiw	r24, 0x01	; 1
     8c4:	f1 f7       	brne	.-4      	; 0x8c2 <__stack+0x63>
     8c6:	00 c0       	rjmp	.+0      	; 0x8c8 <__stack+0x69>
     8c8:	00 00       	nop
	_delay_ms(5);
	UDR='\r';
     8ca:	8d e0       	ldi	r24, 0x0D	; 13
     8cc:	8c b9       	out	0x0c, r24	; 12
     8ce:	8f e0       	ldi	r24, 0x0F	; 15
     8d0:	97 e2       	ldi	r25, 0x27	; 39
     8d2:	01 97       	sbiw	r24, 0x01	; 1
     8d4:	f1 f7       	brne	.-4      	; 0x8d2 <__stack+0x73>
     8d6:	00 c0       	rjmp	.+0      	; 0x8d8 <__stack+0x79>
     8d8:	00 00       	nop
	_delay_ms(5);

	for (int i=0;cmd_4[i]!='\0';i++) /* message */
     8da:	00 e0       	ldi	r16, 0x00	; 0
     8dc:	10 e0       	ldi	r17, 0x00	; 0
     8de:	0a c0       	rjmp	.+20     	; 0x8f4 <__stack+0x95>
	{
		USART_TxChar(cmd_4[i]);
     8e0:	0e 94 00 02 	call	0x400	; 0x400 <USART_TxChar>
     8e4:	8f e0       	ldi	r24, 0x0F	; 15
     8e6:	97 e2       	ldi	r25, 0x27	; 39
     8e8:	01 97       	sbiw	r24, 0x01	; 1
     8ea:	f1 f7       	brne	.-4      	; 0x8e8 <__stack+0x89>
     8ec:	00 c0       	rjmp	.+0      	; 0x8ee <__stack+0x8f>
     8ee:	00 00       	nop
	UDR='"';
	_delay_ms(5);
	UDR='\r';
	_delay_ms(5);

	for (int i=0;cmd_4[i]!='\0';i++) /* message */
     8f0:	0f 5f       	subi	r16, 0xFF	; 255
     8f2:	1f 4f       	sbci	r17, 0xFF	; 255
     8f4:	f7 01       	movw	r30, r14
     8f6:	e0 0f       	add	r30, r16
     8f8:	f1 1f       	adc	r31, r17
     8fa:	80 81       	ld	r24, Z
     8fc:	81 11       	cpse	r24, r1
     8fe:	f0 cf       	rjmp	.-32     	; 0x8e0 <__stack+0x81>
     900:	9f ef       	ldi	r25, 0xFF	; 255
     902:	21 ee       	ldi	r18, 0xE1	; 225
     904:	84 e0       	ldi	r24, 0x04	; 4
     906:	91 50       	subi	r25, 0x01	; 1
     908:	20 40       	sbci	r18, 0x00	; 0
     90a:	80 40       	sbci	r24, 0x00	; 0
     90c:	e1 f7       	brne	.-8      	; 0x906 <__stack+0xa7>
     90e:	00 c0       	rjmp	.+0      	; 0x910 <__stack+0xb1>
     910:	00 00       	nop
	{
		USART_TxChar(cmd_4[i]);
		_delay_ms(5);
	}
	_delay_ms(200);
	LCD_Clear();
     912:	0e 94 a4 01 	call	0x348	; 0x348 <LCD_Clear>
	LCD_String_xy(1,0,"Message sent");
     916:	4a eb       	ldi	r20, 0xBA	; 186
     918:	50 e0       	ldi	r21, 0x00	; 0
     91a:	60 e0       	ldi	r22, 0x00	; 0
     91c:	81 e0       	ldi	r24, 0x01	; 1
     91e:	0e 94 88 01 	call	0x310	; 0x310 <LCD_String_xy>
     922:	9f ef       	ldi	r25, 0xFF	; 255
     924:	22 e5       	ldi	r18, 0x52	; 82
     926:	87 e0       	ldi	r24, 0x07	; 7
     928:	91 50       	subi	r25, 0x01	; 1
     92a:	20 40       	sbci	r18, 0x00	; 0
     92c:	80 40       	sbci	r24, 0x00	; 0
     92e:	e1 f7       	brne	.-8      	; 0x928 <__stack+0xc9>
     930:	00 c0       	rjmp	.+0      	; 0x932 <__stack+0xd3>
     932:	00 00       	nop
	_delay_ms(300);
	LCD_Clear();
     934:	0e 94 a4 01 	call	0x348	; 0x348 <LCD_Clear>
     938:	a3 96       	adiw	r28, 0x23	; 35
     93a:	0f b6       	in	r0, 0x3f	; 63
     93c:	f8 94       	cli
     93e:	de bf       	out	0x3e, r29	; 62
     940:	0f be       	out	0x3f, r0	; 63
     942:	cd bf       	out	0x3d, r28	; 61
     944:	df 91       	pop	r29
     946:	cf 91       	pop	r28
     948:	1f 91       	pop	r17
     94a:	0f 91       	pop	r16
     94c:	ff 90       	pop	r15
     94e:	ef 90       	pop	r14
     950:	df 90       	pop	r13
     952:	cf 90       	pop	r12
     954:	08 95       	ret

00000956 <ringAlarm>:
	}//while end
}//main end


void ringAlarm(){
	portHigh(PORTD,buzzer);//buzzer
     956:	82 b3       	in	r24, 0x12	; 18
     958:	80 68       	ori	r24, 0x80	; 128
     95a:	82 bb       	out	0x12, r24	; 18
     95c:	08 95       	ret

0000095e <stopAlarm>:
}
void stopAlarm(){
	portLow(PORTD,buzzer);
     95e:	82 b3       	in	r24, 0x12	; 18
     960:	8f 77       	andi	r24, 0x7F	; 127
     962:	82 bb       	out	0x12, r24	; 18
     964:	08 95       	ret

00000966 <onHazardLight>:
}
void onHazardLight(){
	portHigh(PORTD,led);
     966:	82 b3       	in	r24, 0x12	; 18
     968:	80 64       	ori	r24, 0x40	; 64
     96a:	82 bb       	out	0x12, r24	; 18
     96c:	08 95       	ret

0000096e <offHazardLight>:
}
void offHazardLight(){
	portLow(PORTD,led);
     96e:	82 b3       	in	r24, 0x12	; 18
     970:	8f 7b       	andi	r24, 0xBF	; 191
     972:	82 bb       	out	0x12, r24	; 18
     974:	08 95       	ret

00000976 <playRadio>:
}
void playRadio(){
	portHigh(PORTD,musicSystem);
     976:	82 b3       	in	r24, 0x12	; 18
     978:	80 62       	ori	r24, 0x20	; 32
     97a:	82 bb       	out	0x12, r24	; 18
     97c:	08 95       	ret

0000097e <isDriverSleepingIR>:
}
int isDriverSleepingIR(){
     97e:	cf 93       	push	r28
     980:	df 93       	push	r29
	LCD_Clear();
     982:	0e 94 a4 01 	call	0x348	; 0x348 <LCD_Clear>
	LCD_String("Checking Eyes");
     986:	8c ed       	ldi	r24, 0xDC	; 220
     988:	90 e0       	ldi	r25, 0x00	; 0
     98a:	0e 94 72 01 	call	0x2e4	; 0x2e4 <LCD_String>
	int timeInterval=5;
	int flag=0;
	for(int i=1;i<=timeInterval;i++){
     98e:	81 e0       	ldi	r24, 0x01	; 1
     990:	90 e0       	ldi	r25, 0x00	; 0
}
int isDriverSleepingIR(){
	LCD_Clear();
	LCD_String("Checking Eyes");
	int timeInterval=5;
	int flag=0;
     992:	c0 e0       	ldi	r28, 0x00	; 0
     994:	d0 e0       	ldi	r29, 0x00	; 0
	for(int i=1;i<=timeInterval;i++){
     996:	0f c0       	rjmp	.+30     	; 0x9b6 <isDriverSleepingIR+0x38>
		if(pinRead(PINC,irsensor)==0x40){
     998:	9e 9b       	sbis	0x13, 6	; 19
     99a:	02 c0       	rjmp	.+4      	; 0x9a0 <isDriverSleepingIR+0x22>
			flag++;
     99c:	21 96       	adiw	r28, 0x01	; 1
     99e:	01 c0       	rjmp	.+2      	; 0x9a2 <isDriverSleepingIR+0x24>
		}else{
			flag--;
     9a0:	21 97       	sbiw	r28, 0x01	; 1
     9a2:	2f e7       	ldi	r18, 0x7F	; 127
     9a4:	38 e3       	ldi	r19, 0x38	; 56
     9a6:	41 e0       	ldi	r20, 0x01	; 1
     9a8:	21 50       	subi	r18, 0x01	; 1
     9aa:	30 40       	sbci	r19, 0x00	; 0
     9ac:	40 40       	sbci	r20, 0x00	; 0
     9ae:	e1 f7       	brne	.-8      	; 0x9a8 <isDriverSleepingIR+0x2a>
     9b0:	00 c0       	rjmp	.+0      	; 0x9b2 <isDriverSleepingIR+0x34>
     9b2:	00 00       	nop
int isDriverSleepingIR(){
	LCD_Clear();
	LCD_String("Checking Eyes");
	int timeInterval=5;
	int flag=0;
	for(int i=1;i<=timeInterval;i++){
     9b4:	01 96       	adiw	r24, 0x01	; 1
     9b6:	86 30       	cpi	r24, 0x06	; 6
     9b8:	91 05       	cpc	r25, r1
     9ba:	74 f3       	brlt	.-36     	; 0x998 <isDriverSleepingIR+0x1a>
		}else{
			flag--;
		}
		_delay_ms(50);
	}
	LCD_Command(0xc0);
     9bc:	80 ec       	ldi	r24, 0xC0	; 192
     9be:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <LCD_Command>
	LCD_String("  -Finished");
     9c2:	8a ee       	ldi	r24, 0xEA	; 234
     9c4:	90 e0       	ldi	r25, 0x00	; 0
     9c6:	0e 94 72 01 	call	0x2e4	; 0x2e4 <LCD_String>
	if(flag==timeInterval){
     9ca:	25 97       	sbiw	r28, 0x05	; 5
     9cc:	19 f4       	brne	.+6      	; 0x9d4 <isDriverSleepingIR+0x56>
		return 1;
     9ce:	81 e0       	ldi	r24, 0x01	; 1
     9d0:	90 e0       	ldi	r25, 0x00	; 0
     9d2:	02 c0       	rjmp	.+4      	; 0x9d8 <isDriverSleepingIR+0x5a>
	}else{
		return 0;
     9d4:	80 e0       	ldi	r24, 0x00	; 0
     9d6:	90 e0       	ldi	r25, 0x00	; 0
	}
}
     9d8:	df 91       	pop	r29
     9da:	cf 91       	pop	r28
     9dc:	08 95       	ret

000009de <sendLocation>:

void sendLocation(char* message){
     9de:	0f 93       	push	r16
     9e0:	1f 93       	push	r17
     9e2:	cf 93       	push	r28
     9e4:	df 93       	push	r29
     9e6:	8c 01       	movw	r16, r24
	get_latitude(GGA_Pointers[0]);char* lat=lat_degrees_buffer;
     9e8:	c2 e9       	ldi	r28, 0x92	; 146
     9ea:	d2 e0       	ldi	r29, 0x02	; 2
     9ec:	88 81       	ld	r24, Y
     9ee:	90 e0       	ldi	r25, 0x00	; 0
     9f0:	0e 94 63 02 	call	0x4c6	; 0x4c6 <get_latitude>
	get_longitude(GGA_Pointers[2]);char* lngtd=long_degrees_buffer;
     9f4:	8a 81       	ldd	r24, Y+2	; 0x02
     9f6:	90 e0       	ldi	r25, 0x00	; 0
     9f8:	0e 94 cf 02 	call	0x59e	; 0x59e <get_longitude>
	get_altitude(GGA_Pointers[7]);char* altitude=Altitude_Buffer;
     9fc:	8f 81       	ldd	r24, Y+7	; 0x07
     9fe:	90 e0       	ldi	r25, 0x00	; 0
     a00:	0e 94 04 02 	call	0x408	; 0x408 <get_altitude>
	PORTD=0x08;// change signal using mux
     a04:	88 e0       	ldi	r24, 0x08	; 8
     a06:	82 bb       	out	0x12, r24	; 18
	sendMessage(message,lat,lngtd,altitude);
     a08:	2a eb       	ldi	r18, 0xBA	; 186
     a0a:	32 e0       	ldi	r19, 0x02	; 2
     a0c:	4d e4       	ldi	r20, 0x4D	; 77
     a0e:	52 e0       	ldi	r21, 0x02	; 2
     a10:	66 ea       	ldi	r22, 0xA6	; 166
     a12:	72 e0       	ldi	r23, 0x02	; 2
     a14:	c8 01       	movw	r24, r16
     a16:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <sendMessage>
	PORTD=0x00;// turn back to normal
     a1a:	12 ba       	out	0x12, r1	; 18
}
     a1c:	df 91       	pop	r29
     a1e:	cf 91       	pop	r28
     a20:	1f 91       	pop	r17
     a22:	0f 91       	pop	r16
     a24:	08 95       	ret

00000a26 <main>:
#define F_CPU 8000000UL
#define SREG   _SFR_IO8(0x3f)
#include "headerfiles.h"
int main(void){
	DDRD=0xE8;
     a26:	88 ee       	ldi	r24, 0xE8	; 232
     a28:	81 bb       	out	0x11, r24	; 17
	PORTD=0x04;
     a2a:	84 e0       	ldi	r24, 0x04	; 4
     a2c:	82 bb       	out	0x12, r24	; 18
	LCD_Init();LCD_String("Initializing..");_delay_ms(50);LCD_Clear();
     a2e:	0e 94 4e 01 	call	0x29c	; 0x29c <LCD_Init>
     a32:	86 ef       	ldi	r24, 0xF6	; 246
     a34:	90 e0       	ldi	r25, 0x00	; 0
     a36:	0e 94 72 01 	call	0x2e4	; 0x2e4 <LCD_String>
     a3a:	2f e7       	ldi	r18, 0x7F	; 127
     a3c:	88 e3       	ldi	r24, 0x38	; 56
     a3e:	91 e0       	ldi	r25, 0x01	; 1
     a40:	21 50       	subi	r18, 0x01	; 1
     a42:	80 40       	sbci	r24, 0x00	; 0
     a44:	90 40       	sbci	r25, 0x00	; 0
     a46:	e1 f7       	brne	.-8      	; 0xa40 <main+0x1a>
     a48:	00 c0       	rjmp	.+0      	; 0xa4a <main+0x24>
     a4a:	00 00       	nop
     a4c:	0e 94 a4 01 	call	0x348	; 0x348 <LCD_Clear>
	I2C_Init();
     a50:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <I2C_Init>
	PWM_init();
     a54:	0e 94 cc 01 	call	0x398	; 0x398 <PWM_init>
	GGA_Index=0;
     a58:	10 92 7b 02 	sts	0x027B, r1	; 0x80027b <GGA_Index+0x1>
     a5c:	10 92 7a 02 	sts	0x027A, r1	; 0x80027a <GGA_Index>
	USART_Init(9600);
     a60:	60 e8       	ldi	r22, 0x80	; 128
     a62:	75 e2       	ldi	r23, 0x25	; 37
     a64:	80 e0       	ldi	r24, 0x00	; 0
     a66:	90 e0       	ldi	r25, 0x00	; 0
     a68:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <USART_Init>
	sei();
     a6c:	78 94       	sei
	LCD_String("Welcome");
     a6e:	85 e0       	ldi	r24, 0x05	; 5
     a70:	91 e0       	ldi	r25, 0x01	; 1
     a72:	0e 94 72 01 	call	0x2e4	; 0x2e4 <LCD_String>
     a76:	2f ef       	ldi	r18, 0xFF	; 255
     a78:	80 e7       	ldi	r24, 0x70	; 112
     a7a:	92 e0       	ldi	r25, 0x02	; 2
     a7c:	21 50       	subi	r18, 0x01	; 1
     a7e:	80 40       	sbci	r24, 0x00	; 0
     a80:	90 40       	sbci	r25, 0x00	; 0
     a82:	e1 f7       	brne	.-8      	; 0xa7c <main+0x56>
     a84:	00 c0       	rjmp	.+0      	; 0xa86 <main+0x60>
     a86:	00 00       	nop
	_delay_ms(100); //actual delay is 3000ms
	LCD_Clear();
     a88:	0e 94 a4 01 	call	0x348	; 0x348 <LCD_Clear>
	while (1){

		//flame detection
		if(pinRead(PINC,flame)==0x10){
     a8c:	9c 9b       	sbis	0x13, 4	; 19
     a8e:	1e c0       	rjmp	.+60     	; 0xacc <main+0xa6>
			LCD_Clear();
     a90:	0e 94 a4 01 	call	0x348	; 0x348 <LCD_Clear>
			LCD_String("Flame Detected !");
     a94:	8d e0       	ldi	r24, 0x0D	; 13
     a96:	91 e0       	ldi	r25, 0x01	; 1
     a98:	0e 94 72 01 	call	0x2e4	; 0x2e4 <LCD_String>
			ringAlarm();
     a9c:	0e 94 ab 04 	call	0x956	; 0x956 <ringAlarm>
			onHazardLight();
     aa0:	0e 94 b3 04 	call	0x966	; 0x966 <onHazardLight>
     aa4:	2f ef       	ldi	r18, 0xFF	; 255
     aa6:	84 e3       	ldi	r24, 0x34	; 52
     aa8:	9c e0       	ldi	r25, 0x0C	; 12
     aaa:	21 50       	subi	r18, 0x01	; 1
     aac:	80 40       	sbci	r24, 0x00	; 0
     aae:	90 40       	sbci	r25, 0x00	; 0
     ab0:	e1 f7       	brne	.-8      	; 0xaaa <main+0x84>
     ab2:	00 c0       	rjmp	.+0      	; 0xab4 <main+0x8e>
     ab4:	00 00       	nop
			_delay_ms(500);
			stopAlarm();
     ab6:	0e 94 af 04 	call	0x95e	; 0x95e <stopAlarm>
			offHazardLight();
     aba:	0e 94 b7 04 	call	0x96e	; 0x96e <offHazardLight>
			LCD_Clear();
     abe:	0e 94 a4 01 	call	0x348	; 0x348 <LCD_Clear>
			sendLocation("Flame is Detected");
     ac2:	8e e1       	ldi	r24, 0x1E	; 30
     ac4:	91 e0       	ldi	r25, 0x01	; 1
     ac6:	0e 94 ef 04 	call	0x9de	; 0x9de <sendLocation>
     aca:	e0 cf       	rjmp	.-64     	; 0xa8c <main+0x66>
		}
		else{
			ADC_Init();
     acc:	0e 94 b1 01 	call	0x362	; 0x362 <ADC_Init>
			int pressure = ADC_Read(1);
     ad0:	81 e0       	ldi	r24, 0x01	; 1
     ad2:	0e 94 b7 01 	call	0x36e	; 0x36e <ADC_Read>
			if (pressure > 109){// if value gt 109 vehicle is moving in proteus 21
     ad6:	8e 36       	cpi	r24, 0x6E	; 110
     ad8:	91 05       	cpc	r25, r1
     ada:	0c f4       	brge	.+2      	; 0xade <main+0xb8>
     adc:	86 c0       	rjmp	.+268    	; 0xbea <main+0x1c4>
				int val=ADC_Read(0);//acce
     ade:	80 e0       	ldi	r24, 0x00	; 0
     ae0:	0e 94 b7 01 	call	0x36e	; 0x36e <ADC_Read>
				float speed=(val/1024.0)*255.0;//adc->pwm
     ae4:	bc 01       	movw	r22, r24
     ae6:	99 0f       	add	r25, r25
     ae8:	88 0b       	sbc	r24, r24
     aea:	99 0b       	sbc	r25, r25
     aec:	0e 94 40 07 	call	0xe80	; 0xe80 <__floatsisf>
     af0:	20 e0       	ldi	r18, 0x00	; 0
     af2:	30 e0       	ldi	r19, 0x00	; 0
     af4:	40 e8       	ldi	r20, 0x80	; 128
     af6:	5a e3       	ldi	r21, 0x3A	; 58
     af8:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <__mulsf3>
     afc:	20 e0       	ldi	r18, 0x00	; 0
     afe:	30 e0       	ldi	r19, 0x00	; 0
     b00:	4f e7       	ldi	r20, 0x7F	; 127
     b02:	53 e4       	ldi	r21, 0x43	; 67
     b04:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <__mulsf3>
				OCR0=(int)speed;//set speed
     b08:	0e 94 08 07 	call	0xe10	; 0xe10 <__fixsfsi>
     b0c:	6c bf       	out	0x3c, r22	; 60
				LCD_Clear();
     b0e:	0e 94 a4 01 	call	0x348	; 0x348 <LCD_Clear>
				LCD_String("Driving mode");
     b12:	80 e3       	ldi	r24, 0x30	; 48
     b14:	91 e0       	ldi	r25, 0x01	; 1
     b16:	0e 94 72 01 	call	0x2e4	; 0x2e4 <LCD_String>
				if(pinRead(PINC,alcohol)==0x20){
     b1a:	9d 9b       	sbis	0x13, 5	; 19
     b1c:	1a c0       	rjmp	.+52     	; 0xb52 <main+0x12c>
					LCD_Clear();
     b1e:	0e 94 a4 01 	call	0x348	; 0x348 <LCD_Clear>
					LCD_String("Alcohol Detected");
     b22:	8d e3       	ldi	r24, 0x3D	; 61
     b24:	91 e0       	ldi	r25, 0x01	; 1
     b26:	0e 94 72 01 	call	0x2e4	; 0x2e4 <LCD_String>
					ringAlarm();
     b2a:	0e 94 ab 04 	call	0x956	; 0x956 <ringAlarm>
     b2e:	2f ef       	ldi	r18, 0xFF	; 255
     b30:	80 e7       	ldi	r24, 0x70	; 112
     b32:	92 e0       	ldi	r25, 0x02	; 2
     b34:	21 50       	subi	r18, 0x01	; 1
     b36:	80 40       	sbci	r24, 0x00	; 0
     b38:	90 40       	sbci	r25, 0x00	; 0
     b3a:	e1 f7       	brne	.-8      	; 0xb34 <main+0x10e>
     b3c:	00 c0       	rjmp	.+0      	; 0xb3e <main+0x118>
     b3e:	00 00       	nop
					_delay_ms(100);
					stopAlarm();
     b40:	0e 94 af 04 	call	0x95e	; 0x95e <stopAlarm>
					LCD_Clear();
     b44:	0e 94 a4 01 	call	0x348	; 0x348 <LCD_Clear>
					sendLocation("Alcohol Detected");
     b48:	8d e3       	ldi	r24, 0x3D	; 61
     b4a:	91 e0       	ldi	r25, 0x01	; 1
     b4c:	0e 94 ef 04 	call	0x9de	; 0x9de <sendLocation>
     b50:	9d cf       	rjmp	.-198    	; 0xa8c <main+0x66>
				}else{
					if(isDriverSleepingIR()&& (pinRead(PINC,0)==0x01)){
     b52:	0e 94 bf 04 	call	0x97e	; 0x97e <isDriverSleepingIR>
     b56:	89 2b       	or	r24, r25
     b58:	09 f4       	brne	.+2      	; 0xb5c <main+0x136>
     b5a:	98 cf       	rjmp	.-208    	; 0xa8c <main+0x66>
     b5c:	98 9b       	sbis	0x13, 0	; 19
     b5e:	96 cf       	rjmp	.-212    	; 0xa8c <main+0x66>
						LCD_Clear();
     b60:	0e 94 a4 01 	call	0x348	; 0x348 <LCD_Clear>
						LCD_String("Sleeping");
     b64:	87 e8       	ldi	r24, 0x87	; 135
     b66:	91 e0       	ldi	r25, 0x01	; 1
     b68:	0e 94 72 01 	call	0x2e4	; 0x2e4 <LCD_String>
						ringAlarm();
     b6c:	0e 94 ab 04 	call	0x956	; 0x956 <ringAlarm>
						onHazardLight();
     b70:	0e 94 b3 04 	call	0x966	; 0x966 <onHazardLight>
						LCD_Command(0xc0);
     b74:	80 ec       	ldi	r24, 0xC0	; 192
     b76:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <LCD_Command>
						LCD_String("Waiting..");
     b7a:	8e e4       	ldi	r24, 0x4E	; 78
     b7c:	91 e0       	ldi	r25, 0x01	; 1
     b7e:	0e 94 72 01 	call	0x2e4	; 0x2e4 <LCD_String>
						GICR = 1<<INT0;		/* Enable INT0*/
     b82:	80 e4       	ldi	r24, 0x40	; 64
     b84:	8b bf       	out	0x3b, r24	; 59
						MCUCR = 1<<ISC01 | 1<<ISC00;  /* Trigger INT0 on rising edge */
     b86:	83 e0       	ldi	r24, 0x03	; 3
     b88:	85 bf       	out	0x35, r24	; 53
						sei();			/* Enable Global Interrupt */
     b8a:	78 94       	sei
     b8c:	2f ef       	ldi	r18, 0xFF	; 255
     b8e:	84 e3       	ldi	r24, 0x34	; 52
     b90:	9c e0       	ldi	r25, 0x0C	; 12
     b92:	21 50       	subi	r18, 0x01	; 1
     b94:	80 40       	sbci	r24, 0x00	; 0
     b96:	90 40       	sbci	r25, 0x00	; 0
     b98:	e1 f7       	brne	.-8      	; 0xb92 <main+0x16c>
     b9a:	00 c0       	rjmp	.+0      	; 0xb9c <main+0x176>
     b9c:	00 00       	nop
						_delay_ms(500); //actual delay is 5000ms
						LCD_Clear();
     b9e:	0e 94 a4 01 	call	0x348	; 0x348 <LCD_Clear>
						LCD_String("Waiting");
     ba2:	88 e5       	ldi	r24, 0x58	; 88
     ba4:	91 e0       	ldi	r25, 0x01	; 1
     ba6:	0e 94 72 01 	call	0x2e4	; 0x2e4 <LCD_String>
						LCD_Command(0xc0);
     baa:	80 ec       	ldi	r24, 0xC0	; 192
     bac:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <LCD_Command>
						LCD_String("Complete");
     bb0:	80 e6       	ldi	r24, 0x60	; 96
     bb2:	91 e0       	ldi	r25, 0x01	; 1
     bb4:	0e 94 72 01 	call	0x2e4	; 0x2e4 <LCD_String>
						offHazardLight();
     bb8:	0e 94 b7 04 	call	0x96e	; 0x96e <offHazardLight>
						stopAlarm();
     bbc:	0e 94 af 04 	call	0x95e	; 0x95e <stopAlarm>
						OCR0=0;
     bc0:	1c be       	out	0x3c, r1	; 60
						LCD_Clear();
     bc2:	0e 94 a4 01 	call	0x348	; 0x348 <LCD_Clear>
						LCD_String("Speed is");
     bc6:	89 e6       	ldi	r24, 0x69	; 105
     bc8:	91 e0       	ldi	r25, 0x01	; 1
     bca:	0e 94 72 01 	call	0x2e4	; 0x2e4 <LCD_String>
						LCD_Command(0xc0);
     bce:	80 ec       	ldi	r24, 0xC0	; 192
     bd0:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <LCD_Command>
						LCD_String("Reducing..");
     bd4:	82 e7       	ldi	r24, 0x72	; 114
     bd6:	91 e0       	ldi	r25, 0x01	; 1
     bd8:	0e 94 72 01 	call	0x2e4	; 0x2e4 <LCD_String>
						sendLocation("Driver is Sleeping");
     bdc:	8d e7       	ldi	r24, 0x7D	; 125
     bde:	91 e0       	ldi	r25, 0x01	; 1
     be0:	0e 94 ef 04 	call	0x9de	; 0x9de <sendLocation>
						playRadio();
     be4:	0e 94 bb 04 	call	0x976	; 0x976 <playRadio>
     be8:	ff cf       	rjmp	.-2      	; 0xbe8 <main+0x1c2>
						while(1){}//let motor to slowdown fully
					}
				}
			}else{
				LCD_String("Vehicle is");
     bea:	80 e9       	ldi	r24, 0x90	; 144
     bec:	91 e0       	ldi	r25, 0x01	; 1
     bee:	0e 94 72 01 	call	0x2e4	; 0x2e4 <LCD_String>
				LCD_Command(0xc0);
     bf2:	80 ec       	ldi	r24, 0xC0	; 192
     bf4:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <LCD_Command>
				LCD_String("not moving");
     bf8:	8b e9       	ldi	r24, 0x9B	; 155
     bfa:	91 e0       	ldi	r25, 0x01	; 1
     bfc:	0e 94 72 01 	call	0x2e4	; 0x2e4 <LCD_String>
     c00:	2f e7       	ldi	r18, 0x7F	; 127
     c02:	88 e3       	ldi	r24, 0x38	; 56
     c04:	91 e0       	ldi	r25, 0x01	; 1
     c06:	21 50       	subi	r18, 0x01	; 1
     c08:	80 40       	sbci	r24, 0x00	; 0
     c0a:	90 40       	sbci	r25, 0x00	; 0
     c0c:	e1 f7       	brne	.-8      	; 0xc06 <main+0x1e0>
     c0e:	00 c0       	rjmp	.+0      	; 0xc10 <main+0x1ea>
     c10:	00 00       	nop
				_delay_ms(50);
				LCD_Clear();
     c12:	0e 94 a4 01 	call	0x348	; 0x348 <LCD_Clear>
     c16:	3a cf       	rjmp	.-396    	; 0xa8c <main+0x66>

00000c18 <__vector_1>:
	sendMessage(message,lat,lngtd,altitude);
	PORTD=0x00;// turn back to normal
}

ISR(INT0_vect)
{
     c18:	1f 92       	push	r1
     c1a:	0f 92       	push	r0
     c1c:	0f b6       	in	r0, 0x3f	; 63
     c1e:	0f 92       	push	r0
     c20:	11 24       	eor	r1, r1
	LCD_Clear();
     c22:	0e 94 a4 01 	call	0x348	; 0x348 <LCD_Clear>
	portLow(PORTD,6);
     c26:	82 b3       	in	r24, 0x12	; 18
     c28:	8f 7b       	andi	r24, 0xBF	; 191
     c2a:	82 bb       	out	0x12, r24	; 18
	portLow(PORTD,7);
     c2c:	82 b3       	in	r24, 0x12	; 18
     c2e:	8f 77       	andi	r24, 0x7F	; 127
     c30:	82 bb       	out	0x12, r24	; 18
     c32:	2f e7       	ldi	r18, 0x7F	; 127
     c34:	88 e3       	ldi	r24, 0x38	; 56
     c36:	91 e0       	ldi	r25, 0x01	; 1
     c38:	21 50       	subi	r18, 0x01	; 1
     c3a:	80 40       	sbci	r24, 0x00	; 0
     c3c:	90 40       	sbci	r25, 0x00	; 0
     c3e:	e1 f7       	brne	.-8      	; 0xc38 <__vector_1+0x20>
     c40:	00 c0       	rjmp	.+0      	; 0xc42 <__vector_1+0x2a>
     c42:	00 00       	nop
	_delay_ms(50);
	main();
     c44:	0e 94 13 05 	call	0xa26	; 0xa26 <main>

00000c48 <__subsf3>:
     c48:	50 58       	subi	r21, 0x80	; 128

00000c4a <__addsf3>:
     c4a:	bb 27       	eor	r27, r27
     c4c:	aa 27       	eor	r26, r26
     c4e:	0e 94 3c 06 	call	0xc78	; 0xc78 <__addsf3x>
     c52:	0c 94 b6 07 	jmp	0xf6c	; 0xf6c <__fp_round>
     c56:	0e 94 a8 07 	call	0xf50	; 0xf50 <__fp_pscA>
     c5a:	38 f0       	brcs	.+14     	; 0xc6a <__addsf3+0x20>
     c5c:	0e 94 af 07 	call	0xf5e	; 0xf5e <__fp_pscB>
     c60:	20 f0       	brcs	.+8      	; 0xc6a <__addsf3+0x20>
     c62:	39 f4       	brne	.+14     	; 0xc72 <__addsf3+0x28>
     c64:	9f 3f       	cpi	r25, 0xFF	; 255
     c66:	19 f4       	brne	.+6      	; 0xc6e <__addsf3+0x24>
     c68:	26 f4       	brtc	.+8      	; 0xc72 <__addsf3+0x28>
     c6a:	0c 94 a5 07 	jmp	0xf4a	; 0xf4a <__fp_nan>
     c6e:	0e f4       	brtc	.+2      	; 0xc72 <__addsf3+0x28>
     c70:	e0 95       	com	r30
     c72:	e7 fb       	bst	r30, 7
     c74:	0c 94 9f 07 	jmp	0xf3e	; 0xf3e <__fp_inf>

00000c78 <__addsf3x>:
     c78:	e9 2f       	mov	r30, r25
     c7a:	0e 94 c7 07 	call	0xf8e	; 0xf8e <__fp_split3>
     c7e:	58 f3       	brcs	.-42     	; 0xc56 <__addsf3+0xc>
     c80:	ba 17       	cp	r27, r26
     c82:	62 07       	cpc	r22, r18
     c84:	73 07       	cpc	r23, r19
     c86:	84 07       	cpc	r24, r20
     c88:	95 07       	cpc	r25, r21
     c8a:	20 f0       	brcs	.+8      	; 0xc94 <__addsf3x+0x1c>
     c8c:	79 f4       	brne	.+30     	; 0xcac <__addsf3x+0x34>
     c8e:	a6 f5       	brtc	.+104    	; 0xcf8 <__addsf3x+0x80>
     c90:	0c 94 e9 07 	jmp	0xfd2	; 0xfd2 <__fp_zero>
     c94:	0e f4       	brtc	.+2      	; 0xc98 <__addsf3x+0x20>
     c96:	e0 95       	com	r30
     c98:	0b 2e       	mov	r0, r27
     c9a:	ba 2f       	mov	r27, r26
     c9c:	a0 2d       	mov	r26, r0
     c9e:	0b 01       	movw	r0, r22
     ca0:	b9 01       	movw	r22, r18
     ca2:	90 01       	movw	r18, r0
     ca4:	0c 01       	movw	r0, r24
     ca6:	ca 01       	movw	r24, r20
     ca8:	a0 01       	movw	r20, r0
     caa:	11 24       	eor	r1, r1
     cac:	ff 27       	eor	r31, r31
     cae:	59 1b       	sub	r21, r25
     cb0:	99 f0       	breq	.+38     	; 0xcd8 <__addsf3x+0x60>
     cb2:	59 3f       	cpi	r21, 0xF9	; 249
     cb4:	50 f4       	brcc	.+20     	; 0xcca <__addsf3x+0x52>
     cb6:	50 3e       	cpi	r21, 0xE0	; 224
     cb8:	68 f1       	brcs	.+90     	; 0xd14 <__addsf3x+0x9c>
     cba:	1a 16       	cp	r1, r26
     cbc:	f0 40       	sbci	r31, 0x00	; 0
     cbe:	a2 2f       	mov	r26, r18
     cc0:	23 2f       	mov	r18, r19
     cc2:	34 2f       	mov	r19, r20
     cc4:	44 27       	eor	r20, r20
     cc6:	58 5f       	subi	r21, 0xF8	; 248
     cc8:	f3 cf       	rjmp	.-26     	; 0xcb0 <__addsf3x+0x38>
     cca:	46 95       	lsr	r20
     ccc:	37 95       	ror	r19
     cce:	27 95       	ror	r18
     cd0:	a7 95       	ror	r26
     cd2:	f0 40       	sbci	r31, 0x00	; 0
     cd4:	53 95       	inc	r21
     cd6:	c9 f7       	brne	.-14     	; 0xcca <__addsf3x+0x52>
     cd8:	7e f4       	brtc	.+30     	; 0xcf8 <__addsf3x+0x80>
     cda:	1f 16       	cp	r1, r31
     cdc:	ba 0b       	sbc	r27, r26
     cde:	62 0b       	sbc	r22, r18
     ce0:	73 0b       	sbc	r23, r19
     ce2:	84 0b       	sbc	r24, r20
     ce4:	ba f0       	brmi	.+46     	; 0xd14 <__addsf3x+0x9c>
     ce6:	91 50       	subi	r25, 0x01	; 1
     ce8:	a1 f0       	breq	.+40     	; 0xd12 <__addsf3x+0x9a>
     cea:	ff 0f       	add	r31, r31
     cec:	bb 1f       	adc	r27, r27
     cee:	66 1f       	adc	r22, r22
     cf0:	77 1f       	adc	r23, r23
     cf2:	88 1f       	adc	r24, r24
     cf4:	c2 f7       	brpl	.-16     	; 0xce6 <__addsf3x+0x6e>
     cf6:	0e c0       	rjmp	.+28     	; 0xd14 <__addsf3x+0x9c>
     cf8:	ba 0f       	add	r27, r26
     cfa:	62 1f       	adc	r22, r18
     cfc:	73 1f       	adc	r23, r19
     cfe:	84 1f       	adc	r24, r20
     d00:	48 f4       	brcc	.+18     	; 0xd14 <__addsf3x+0x9c>
     d02:	87 95       	ror	r24
     d04:	77 95       	ror	r23
     d06:	67 95       	ror	r22
     d08:	b7 95       	ror	r27
     d0a:	f7 95       	ror	r31
     d0c:	9e 3f       	cpi	r25, 0xFE	; 254
     d0e:	08 f0       	brcs	.+2      	; 0xd12 <__addsf3x+0x9a>
     d10:	b0 cf       	rjmp	.-160    	; 0xc72 <__addsf3+0x28>
     d12:	93 95       	inc	r25
     d14:	88 0f       	add	r24, r24
     d16:	08 f0       	brcs	.+2      	; 0xd1a <__addsf3x+0xa2>
     d18:	99 27       	eor	r25, r25
     d1a:	ee 0f       	add	r30, r30
     d1c:	97 95       	ror	r25
     d1e:	87 95       	ror	r24
     d20:	08 95       	ret

00000d22 <__cmpsf2>:
     d22:	0e 94 7b 07 	call	0xef6	; 0xef6 <__fp_cmp>
     d26:	08 f4       	brcc	.+2      	; 0xd2a <__cmpsf2+0x8>
     d28:	81 e0       	ldi	r24, 0x01	; 1
     d2a:	08 95       	ret

00000d2c <__divsf3>:
     d2c:	0e 94 aa 06 	call	0xd54	; 0xd54 <__divsf3x>
     d30:	0c 94 b6 07 	jmp	0xf6c	; 0xf6c <__fp_round>
     d34:	0e 94 af 07 	call	0xf5e	; 0xf5e <__fp_pscB>
     d38:	58 f0       	brcs	.+22     	; 0xd50 <__divsf3+0x24>
     d3a:	0e 94 a8 07 	call	0xf50	; 0xf50 <__fp_pscA>
     d3e:	40 f0       	brcs	.+16     	; 0xd50 <__divsf3+0x24>
     d40:	29 f4       	brne	.+10     	; 0xd4c <__divsf3+0x20>
     d42:	5f 3f       	cpi	r21, 0xFF	; 255
     d44:	29 f0       	breq	.+10     	; 0xd50 <__divsf3+0x24>
     d46:	0c 94 9f 07 	jmp	0xf3e	; 0xf3e <__fp_inf>
     d4a:	51 11       	cpse	r21, r1
     d4c:	0c 94 ea 07 	jmp	0xfd4	; 0xfd4 <__fp_szero>
     d50:	0c 94 a5 07 	jmp	0xf4a	; 0xf4a <__fp_nan>

00000d54 <__divsf3x>:
     d54:	0e 94 c7 07 	call	0xf8e	; 0xf8e <__fp_split3>
     d58:	68 f3       	brcs	.-38     	; 0xd34 <__divsf3+0x8>

00000d5a <__divsf3_pse>:
     d5a:	99 23       	and	r25, r25
     d5c:	b1 f3       	breq	.-20     	; 0xd4a <__divsf3+0x1e>
     d5e:	55 23       	and	r21, r21
     d60:	91 f3       	breq	.-28     	; 0xd46 <__divsf3+0x1a>
     d62:	95 1b       	sub	r25, r21
     d64:	55 0b       	sbc	r21, r21
     d66:	bb 27       	eor	r27, r27
     d68:	aa 27       	eor	r26, r26
     d6a:	62 17       	cp	r22, r18
     d6c:	73 07       	cpc	r23, r19
     d6e:	84 07       	cpc	r24, r20
     d70:	38 f0       	brcs	.+14     	; 0xd80 <__divsf3_pse+0x26>
     d72:	9f 5f       	subi	r25, 0xFF	; 255
     d74:	5f 4f       	sbci	r21, 0xFF	; 255
     d76:	22 0f       	add	r18, r18
     d78:	33 1f       	adc	r19, r19
     d7a:	44 1f       	adc	r20, r20
     d7c:	aa 1f       	adc	r26, r26
     d7e:	a9 f3       	breq	.-22     	; 0xd6a <__divsf3_pse+0x10>
     d80:	35 d0       	rcall	.+106    	; 0xdec <__divsf3_pse+0x92>
     d82:	0e 2e       	mov	r0, r30
     d84:	3a f0       	brmi	.+14     	; 0xd94 <__divsf3_pse+0x3a>
     d86:	e0 e8       	ldi	r30, 0x80	; 128
     d88:	32 d0       	rcall	.+100    	; 0xdee <__divsf3_pse+0x94>
     d8a:	91 50       	subi	r25, 0x01	; 1
     d8c:	50 40       	sbci	r21, 0x00	; 0
     d8e:	e6 95       	lsr	r30
     d90:	00 1c       	adc	r0, r0
     d92:	ca f7       	brpl	.-14     	; 0xd86 <__divsf3_pse+0x2c>
     d94:	2b d0       	rcall	.+86     	; 0xdec <__divsf3_pse+0x92>
     d96:	fe 2f       	mov	r31, r30
     d98:	29 d0       	rcall	.+82     	; 0xdec <__divsf3_pse+0x92>
     d9a:	66 0f       	add	r22, r22
     d9c:	77 1f       	adc	r23, r23
     d9e:	88 1f       	adc	r24, r24
     da0:	bb 1f       	adc	r27, r27
     da2:	26 17       	cp	r18, r22
     da4:	37 07       	cpc	r19, r23
     da6:	48 07       	cpc	r20, r24
     da8:	ab 07       	cpc	r26, r27
     daa:	b0 e8       	ldi	r27, 0x80	; 128
     dac:	09 f0       	breq	.+2      	; 0xdb0 <__divsf3_pse+0x56>
     dae:	bb 0b       	sbc	r27, r27
     db0:	80 2d       	mov	r24, r0
     db2:	bf 01       	movw	r22, r30
     db4:	ff 27       	eor	r31, r31
     db6:	93 58       	subi	r25, 0x83	; 131
     db8:	5f 4f       	sbci	r21, 0xFF	; 255
     dba:	3a f0       	brmi	.+14     	; 0xdca <__divsf3_pse+0x70>
     dbc:	9e 3f       	cpi	r25, 0xFE	; 254
     dbe:	51 05       	cpc	r21, r1
     dc0:	78 f0       	brcs	.+30     	; 0xde0 <__divsf3_pse+0x86>
     dc2:	0c 94 9f 07 	jmp	0xf3e	; 0xf3e <__fp_inf>
     dc6:	0c 94 ea 07 	jmp	0xfd4	; 0xfd4 <__fp_szero>
     dca:	5f 3f       	cpi	r21, 0xFF	; 255
     dcc:	e4 f3       	brlt	.-8      	; 0xdc6 <__divsf3_pse+0x6c>
     dce:	98 3e       	cpi	r25, 0xE8	; 232
     dd0:	d4 f3       	brlt	.-12     	; 0xdc6 <__divsf3_pse+0x6c>
     dd2:	86 95       	lsr	r24
     dd4:	77 95       	ror	r23
     dd6:	67 95       	ror	r22
     dd8:	b7 95       	ror	r27
     dda:	f7 95       	ror	r31
     ddc:	9f 5f       	subi	r25, 0xFF	; 255
     dde:	c9 f7       	brne	.-14     	; 0xdd2 <__divsf3_pse+0x78>
     de0:	88 0f       	add	r24, r24
     de2:	91 1d       	adc	r25, r1
     de4:	96 95       	lsr	r25
     de6:	87 95       	ror	r24
     de8:	97 f9       	bld	r25, 7
     dea:	08 95       	ret
     dec:	e1 e0       	ldi	r30, 0x01	; 1
     dee:	66 0f       	add	r22, r22
     df0:	77 1f       	adc	r23, r23
     df2:	88 1f       	adc	r24, r24
     df4:	bb 1f       	adc	r27, r27
     df6:	62 17       	cp	r22, r18
     df8:	73 07       	cpc	r23, r19
     dfa:	84 07       	cpc	r24, r20
     dfc:	ba 07       	cpc	r27, r26
     dfe:	20 f0       	brcs	.+8      	; 0xe08 <__divsf3_pse+0xae>
     e00:	62 1b       	sub	r22, r18
     e02:	73 0b       	sbc	r23, r19
     e04:	84 0b       	sbc	r24, r20
     e06:	ba 0b       	sbc	r27, r26
     e08:	ee 1f       	adc	r30, r30
     e0a:	88 f7       	brcc	.-30     	; 0xdee <__divsf3_pse+0x94>
     e0c:	e0 95       	com	r30
     e0e:	08 95       	ret

00000e10 <__fixsfsi>:
     e10:	0e 94 0f 07 	call	0xe1e	; 0xe1e <__fixunssfsi>
     e14:	68 94       	set
     e16:	b1 11       	cpse	r27, r1
     e18:	0c 94 ea 07 	jmp	0xfd4	; 0xfd4 <__fp_szero>
     e1c:	08 95       	ret

00000e1e <__fixunssfsi>:
     e1e:	0e 94 cf 07 	call	0xf9e	; 0xf9e <__fp_splitA>
     e22:	88 f0       	brcs	.+34     	; 0xe46 <__fixunssfsi+0x28>
     e24:	9f 57       	subi	r25, 0x7F	; 127
     e26:	98 f0       	brcs	.+38     	; 0xe4e <__fixunssfsi+0x30>
     e28:	b9 2f       	mov	r27, r25
     e2a:	99 27       	eor	r25, r25
     e2c:	b7 51       	subi	r27, 0x17	; 23
     e2e:	b0 f0       	brcs	.+44     	; 0xe5c <__fixunssfsi+0x3e>
     e30:	e1 f0       	breq	.+56     	; 0xe6a <__fixunssfsi+0x4c>
     e32:	66 0f       	add	r22, r22
     e34:	77 1f       	adc	r23, r23
     e36:	88 1f       	adc	r24, r24
     e38:	99 1f       	adc	r25, r25
     e3a:	1a f0       	brmi	.+6      	; 0xe42 <__fixunssfsi+0x24>
     e3c:	ba 95       	dec	r27
     e3e:	c9 f7       	brne	.-14     	; 0xe32 <__fixunssfsi+0x14>
     e40:	14 c0       	rjmp	.+40     	; 0xe6a <__fixunssfsi+0x4c>
     e42:	b1 30       	cpi	r27, 0x01	; 1
     e44:	91 f0       	breq	.+36     	; 0xe6a <__fixunssfsi+0x4c>
     e46:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <__fp_zero>
     e4a:	b1 e0       	ldi	r27, 0x01	; 1
     e4c:	08 95       	ret
     e4e:	0c 94 e9 07 	jmp	0xfd2	; 0xfd2 <__fp_zero>
     e52:	67 2f       	mov	r22, r23
     e54:	78 2f       	mov	r23, r24
     e56:	88 27       	eor	r24, r24
     e58:	b8 5f       	subi	r27, 0xF8	; 248
     e5a:	39 f0       	breq	.+14     	; 0xe6a <__fixunssfsi+0x4c>
     e5c:	b9 3f       	cpi	r27, 0xF9	; 249
     e5e:	cc f3       	brlt	.-14     	; 0xe52 <__fixunssfsi+0x34>
     e60:	86 95       	lsr	r24
     e62:	77 95       	ror	r23
     e64:	67 95       	ror	r22
     e66:	b3 95       	inc	r27
     e68:	d9 f7       	brne	.-10     	; 0xe60 <__fixunssfsi+0x42>
     e6a:	3e f4       	brtc	.+14     	; 0xe7a <__fixunssfsi+0x5c>
     e6c:	90 95       	com	r25
     e6e:	80 95       	com	r24
     e70:	70 95       	com	r23
     e72:	61 95       	neg	r22
     e74:	7f 4f       	sbci	r23, 0xFF	; 255
     e76:	8f 4f       	sbci	r24, 0xFF	; 255
     e78:	9f 4f       	sbci	r25, 0xFF	; 255
     e7a:	08 95       	ret

00000e7c <__floatunsisf>:
     e7c:	e8 94       	clt
     e7e:	09 c0       	rjmp	.+18     	; 0xe92 <__floatsisf+0x12>

00000e80 <__floatsisf>:
     e80:	97 fb       	bst	r25, 7
     e82:	3e f4       	brtc	.+14     	; 0xe92 <__floatsisf+0x12>
     e84:	90 95       	com	r25
     e86:	80 95       	com	r24
     e88:	70 95       	com	r23
     e8a:	61 95       	neg	r22
     e8c:	7f 4f       	sbci	r23, 0xFF	; 255
     e8e:	8f 4f       	sbci	r24, 0xFF	; 255
     e90:	9f 4f       	sbci	r25, 0xFF	; 255
     e92:	99 23       	and	r25, r25
     e94:	a9 f0       	breq	.+42     	; 0xec0 <__floatsisf+0x40>
     e96:	f9 2f       	mov	r31, r25
     e98:	96 e9       	ldi	r25, 0x96	; 150
     e9a:	bb 27       	eor	r27, r27
     e9c:	93 95       	inc	r25
     e9e:	f6 95       	lsr	r31
     ea0:	87 95       	ror	r24
     ea2:	77 95       	ror	r23
     ea4:	67 95       	ror	r22
     ea6:	b7 95       	ror	r27
     ea8:	f1 11       	cpse	r31, r1
     eaa:	f8 cf       	rjmp	.-16     	; 0xe9c <__floatsisf+0x1c>
     eac:	fa f4       	brpl	.+62     	; 0xeec <__floatsisf+0x6c>
     eae:	bb 0f       	add	r27, r27
     eb0:	11 f4       	brne	.+4      	; 0xeb6 <__floatsisf+0x36>
     eb2:	60 ff       	sbrs	r22, 0
     eb4:	1b c0       	rjmp	.+54     	; 0xeec <__floatsisf+0x6c>
     eb6:	6f 5f       	subi	r22, 0xFF	; 255
     eb8:	7f 4f       	sbci	r23, 0xFF	; 255
     eba:	8f 4f       	sbci	r24, 0xFF	; 255
     ebc:	9f 4f       	sbci	r25, 0xFF	; 255
     ebe:	16 c0       	rjmp	.+44     	; 0xeec <__floatsisf+0x6c>
     ec0:	88 23       	and	r24, r24
     ec2:	11 f0       	breq	.+4      	; 0xec8 <__floatsisf+0x48>
     ec4:	96 e9       	ldi	r25, 0x96	; 150
     ec6:	11 c0       	rjmp	.+34     	; 0xeea <__floatsisf+0x6a>
     ec8:	77 23       	and	r23, r23
     eca:	21 f0       	breq	.+8      	; 0xed4 <__floatsisf+0x54>
     ecc:	9e e8       	ldi	r25, 0x8E	; 142
     ece:	87 2f       	mov	r24, r23
     ed0:	76 2f       	mov	r23, r22
     ed2:	05 c0       	rjmp	.+10     	; 0xede <__floatsisf+0x5e>
     ed4:	66 23       	and	r22, r22
     ed6:	71 f0       	breq	.+28     	; 0xef4 <__floatsisf+0x74>
     ed8:	96 e8       	ldi	r25, 0x86	; 134
     eda:	86 2f       	mov	r24, r22
     edc:	70 e0       	ldi	r23, 0x00	; 0
     ede:	60 e0       	ldi	r22, 0x00	; 0
     ee0:	2a f0       	brmi	.+10     	; 0xeec <__floatsisf+0x6c>
     ee2:	9a 95       	dec	r25
     ee4:	66 0f       	add	r22, r22
     ee6:	77 1f       	adc	r23, r23
     ee8:	88 1f       	adc	r24, r24
     eea:	da f7       	brpl	.-10     	; 0xee2 <__floatsisf+0x62>
     eec:	88 0f       	add	r24, r24
     eee:	96 95       	lsr	r25
     ef0:	87 95       	ror	r24
     ef2:	97 f9       	bld	r25, 7
     ef4:	08 95       	ret

00000ef6 <__fp_cmp>:
     ef6:	99 0f       	add	r25, r25
     ef8:	00 08       	sbc	r0, r0
     efa:	55 0f       	add	r21, r21
     efc:	aa 0b       	sbc	r26, r26
     efe:	e0 e8       	ldi	r30, 0x80	; 128
     f00:	fe ef       	ldi	r31, 0xFE	; 254
     f02:	16 16       	cp	r1, r22
     f04:	17 06       	cpc	r1, r23
     f06:	e8 07       	cpc	r30, r24
     f08:	f9 07       	cpc	r31, r25
     f0a:	c0 f0       	brcs	.+48     	; 0xf3c <__fp_cmp+0x46>
     f0c:	12 16       	cp	r1, r18
     f0e:	13 06       	cpc	r1, r19
     f10:	e4 07       	cpc	r30, r20
     f12:	f5 07       	cpc	r31, r21
     f14:	98 f0       	brcs	.+38     	; 0xf3c <__fp_cmp+0x46>
     f16:	62 1b       	sub	r22, r18
     f18:	73 0b       	sbc	r23, r19
     f1a:	84 0b       	sbc	r24, r20
     f1c:	95 0b       	sbc	r25, r21
     f1e:	39 f4       	brne	.+14     	; 0xf2e <__fp_cmp+0x38>
     f20:	0a 26       	eor	r0, r26
     f22:	61 f0       	breq	.+24     	; 0xf3c <__fp_cmp+0x46>
     f24:	23 2b       	or	r18, r19
     f26:	24 2b       	or	r18, r20
     f28:	25 2b       	or	r18, r21
     f2a:	21 f4       	brne	.+8      	; 0xf34 <__fp_cmp+0x3e>
     f2c:	08 95       	ret
     f2e:	0a 26       	eor	r0, r26
     f30:	09 f4       	brne	.+2      	; 0xf34 <__fp_cmp+0x3e>
     f32:	a1 40       	sbci	r26, 0x01	; 1
     f34:	a6 95       	lsr	r26
     f36:	8f ef       	ldi	r24, 0xFF	; 255
     f38:	81 1d       	adc	r24, r1
     f3a:	81 1d       	adc	r24, r1
     f3c:	08 95       	ret

00000f3e <__fp_inf>:
     f3e:	97 f9       	bld	r25, 7
     f40:	9f 67       	ori	r25, 0x7F	; 127
     f42:	80 e8       	ldi	r24, 0x80	; 128
     f44:	70 e0       	ldi	r23, 0x00	; 0
     f46:	60 e0       	ldi	r22, 0x00	; 0
     f48:	08 95       	ret

00000f4a <__fp_nan>:
     f4a:	9f ef       	ldi	r25, 0xFF	; 255
     f4c:	80 ec       	ldi	r24, 0xC0	; 192
     f4e:	08 95       	ret

00000f50 <__fp_pscA>:
     f50:	00 24       	eor	r0, r0
     f52:	0a 94       	dec	r0
     f54:	16 16       	cp	r1, r22
     f56:	17 06       	cpc	r1, r23
     f58:	18 06       	cpc	r1, r24
     f5a:	09 06       	cpc	r0, r25
     f5c:	08 95       	ret

00000f5e <__fp_pscB>:
     f5e:	00 24       	eor	r0, r0
     f60:	0a 94       	dec	r0
     f62:	12 16       	cp	r1, r18
     f64:	13 06       	cpc	r1, r19
     f66:	14 06       	cpc	r1, r20
     f68:	05 06       	cpc	r0, r21
     f6a:	08 95       	ret

00000f6c <__fp_round>:
     f6c:	09 2e       	mov	r0, r25
     f6e:	03 94       	inc	r0
     f70:	00 0c       	add	r0, r0
     f72:	11 f4       	brne	.+4      	; 0xf78 <__fp_round+0xc>
     f74:	88 23       	and	r24, r24
     f76:	52 f0       	brmi	.+20     	; 0xf8c <__fp_round+0x20>
     f78:	bb 0f       	add	r27, r27
     f7a:	40 f4       	brcc	.+16     	; 0xf8c <__fp_round+0x20>
     f7c:	bf 2b       	or	r27, r31
     f7e:	11 f4       	brne	.+4      	; 0xf84 <__fp_round+0x18>
     f80:	60 ff       	sbrs	r22, 0
     f82:	04 c0       	rjmp	.+8      	; 0xf8c <__fp_round+0x20>
     f84:	6f 5f       	subi	r22, 0xFF	; 255
     f86:	7f 4f       	sbci	r23, 0xFF	; 255
     f88:	8f 4f       	sbci	r24, 0xFF	; 255
     f8a:	9f 4f       	sbci	r25, 0xFF	; 255
     f8c:	08 95       	ret

00000f8e <__fp_split3>:
     f8e:	57 fd       	sbrc	r21, 7
     f90:	90 58       	subi	r25, 0x80	; 128
     f92:	44 0f       	add	r20, r20
     f94:	55 1f       	adc	r21, r21
     f96:	59 f0       	breq	.+22     	; 0xfae <__fp_splitA+0x10>
     f98:	5f 3f       	cpi	r21, 0xFF	; 255
     f9a:	71 f0       	breq	.+28     	; 0xfb8 <__fp_splitA+0x1a>
     f9c:	47 95       	ror	r20

00000f9e <__fp_splitA>:
     f9e:	88 0f       	add	r24, r24
     fa0:	97 fb       	bst	r25, 7
     fa2:	99 1f       	adc	r25, r25
     fa4:	61 f0       	breq	.+24     	; 0xfbe <__fp_splitA+0x20>
     fa6:	9f 3f       	cpi	r25, 0xFF	; 255
     fa8:	79 f0       	breq	.+30     	; 0xfc8 <__fp_splitA+0x2a>
     faa:	87 95       	ror	r24
     fac:	08 95       	ret
     fae:	12 16       	cp	r1, r18
     fb0:	13 06       	cpc	r1, r19
     fb2:	14 06       	cpc	r1, r20
     fb4:	55 1f       	adc	r21, r21
     fb6:	f2 cf       	rjmp	.-28     	; 0xf9c <__fp_split3+0xe>
     fb8:	46 95       	lsr	r20
     fba:	f1 df       	rcall	.-30     	; 0xf9e <__fp_splitA>
     fbc:	08 c0       	rjmp	.+16     	; 0xfce <__fp_splitA+0x30>
     fbe:	16 16       	cp	r1, r22
     fc0:	17 06       	cpc	r1, r23
     fc2:	18 06       	cpc	r1, r24
     fc4:	99 1f       	adc	r25, r25
     fc6:	f1 cf       	rjmp	.-30     	; 0xfaa <__fp_splitA+0xc>
     fc8:	86 95       	lsr	r24
     fca:	71 05       	cpc	r23, r1
     fcc:	61 05       	cpc	r22, r1
     fce:	08 94       	sec
     fd0:	08 95       	ret

00000fd2 <__fp_zero>:
     fd2:	e8 94       	clt

00000fd4 <__fp_szero>:
     fd4:	bb 27       	eor	r27, r27
     fd6:	66 27       	eor	r22, r22
     fd8:	77 27       	eor	r23, r23
     fda:	cb 01       	movw	r24, r22
     fdc:	97 f9       	bld	r25, 7
     fde:	08 95       	ret

00000fe0 <__mulsf3>:
     fe0:	0e 94 03 08 	call	0x1006	; 0x1006 <__mulsf3x>
     fe4:	0c 94 b6 07 	jmp	0xf6c	; 0xf6c <__fp_round>
     fe8:	0e 94 a8 07 	call	0xf50	; 0xf50 <__fp_pscA>
     fec:	38 f0       	brcs	.+14     	; 0xffc <__mulsf3+0x1c>
     fee:	0e 94 af 07 	call	0xf5e	; 0xf5e <__fp_pscB>
     ff2:	20 f0       	brcs	.+8      	; 0xffc <__mulsf3+0x1c>
     ff4:	95 23       	and	r25, r21
     ff6:	11 f0       	breq	.+4      	; 0xffc <__mulsf3+0x1c>
     ff8:	0c 94 9f 07 	jmp	0xf3e	; 0xf3e <__fp_inf>
     ffc:	0c 94 a5 07 	jmp	0xf4a	; 0xf4a <__fp_nan>
    1000:	11 24       	eor	r1, r1
    1002:	0c 94 ea 07 	jmp	0xfd4	; 0xfd4 <__fp_szero>

00001006 <__mulsf3x>:
    1006:	0e 94 c7 07 	call	0xf8e	; 0xf8e <__fp_split3>
    100a:	70 f3       	brcs	.-36     	; 0xfe8 <__mulsf3+0x8>

0000100c <__mulsf3_pse>:
    100c:	95 9f       	mul	r25, r21
    100e:	c1 f3       	breq	.-16     	; 0x1000 <__mulsf3+0x20>
    1010:	95 0f       	add	r25, r21
    1012:	50 e0       	ldi	r21, 0x00	; 0
    1014:	55 1f       	adc	r21, r21
    1016:	62 9f       	mul	r22, r18
    1018:	f0 01       	movw	r30, r0
    101a:	72 9f       	mul	r23, r18
    101c:	bb 27       	eor	r27, r27
    101e:	f0 0d       	add	r31, r0
    1020:	b1 1d       	adc	r27, r1
    1022:	63 9f       	mul	r22, r19
    1024:	aa 27       	eor	r26, r26
    1026:	f0 0d       	add	r31, r0
    1028:	b1 1d       	adc	r27, r1
    102a:	aa 1f       	adc	r26, r26
    102c:	64 9f       	mul	r22, r20
    102e:	66 27       	eor	r22, r22
    1030:	b0 0d       	add	r27, r0
    1032:	a1 1d       	adc	r26, r1
    1034:	66 1f       	adc	r22, r22
    1036:	82 9f       	mul	r24, r18
    1038:	22 27       	eor	r18, r18
    103a:	b0 0d       	add	r27, r0
    103c:	a1 1d       	adc	r26, r1
    103e:	62 1f       	adc	r22, r18
    1040:	73 9f       	mul	r23, r19
    1042:	b0 0d       	add	r27, r0
    1044:	a1 1d       	adc	r26, r1
    1046:	62 1f       	adc	r22, r18
    1048:	83 9f       	mul	r24, r19
    104a:	a0 0d       	add	r26, r0
    104c:	61 1d       	adc	r22, r1
    104e:	22 1f       	adc	r18, r18
    1050:	74 9f       	mul	r23, r20
    1052:	33 27       	eor	r19, r19
    1054:	a0 0d       	add	r26, r0
    1056:	61 1d       	adc	r22, r1
    1058:	23 1f       	adc	r18, r19
    105a:	84 9f       	mul	r24, r20
    105c:	60 0d       	add	r22, r0
    105e:	21 1d       	adc	r18, r1
    1060:	82 2f       	mov	r24, r18
    1062:	76 2f       	mov	r23, r22
    1064:	6a 2f       	mov	r22, r26
    1066:	11 24       	eor	r1, r1
    1068:	9f 57       	subi	r25, 0x7F	; 127
    106a:	50 40       	sbci	r21, 0x00	; 0
    106c:	9a f0       	brmi	.+38     	; 0x1094 <__mulsf3_pse+0x88>
    106e:	f1 f0       	breq	.+60     	; 0x10ac <__mulsf3_pse+0xa0>
    1070:	88 23       	and	r24, r24
    1072:	4a f0       	brmi	.+18     	; 0x1086 <__mulsf3_pse+0x7a>
    1074:	ee 0f       	add	r30, r30
    1076:	ff 1f       	adc	r31, r31
    1078:	bb 1f       	adc	r27, r27
    107a:	66 1f       	adc	r22, r22
    107c:	77 1f       	adc	r23, r23
    107e:	88 1f       	adc	r24, r24
    1080:	91 50       	subi	r25, 0x01	; 1
    1082:	50 40       	sbci	r21, 0x00	; 0
    1084:	a9 f7       	brne	.-22     	; 0x1070 <__mulsf3_pse+0x64>
    1086:	9e 3f       	cpi	r25, 0xFE	; 254
    1088:	51 05       	cpc	r21, r1
    108a:	80 f0       	brcs	.+32     	; 0x10ac <__mulsf3_pse+0xa0>
    108c:	0c 94 9f 07 	jmp	0xf3e	; 0xf3e <__fp_inf>
    1090:	0c 94 ea 07 	jmp	0xfd4	; 0xfd4 <__fp_szero>
    1094:	5f 3f       	cpi	r21, 0xFF	; 255
    1096:	e4 f3       	brlt	.-8      	; 0x1090 <__mulsf3_pse+0x84>
    1098:	98 3e       	cpi	r25, 0xE8	; 232
    109a:	d4 f3       	brlt	.-12     	; 0x1090 <__mulsf3_pse+0x84>
    109c:	86 95       	lsr	r24
    109e:	77 95       	ror	r23
    10a0:	67 95       	ror	r22
    10a2:	b7 95       	ror	r27
    10a4:	f7 95       	ror	r31
    10a6:	e7 95       	ror	r30
    10a8:	9f 5f       	subi	r25, 0xFF	; 255
    10aa:	c1 f7       	brne	.-16     	; 0x109c <__mulsf3_pse+0x90>
    10ac:	fe 2b       	or	r31, r30
    10ae:	88 0f       	add	r24, r24
    10b0:	91 1d       	adc	r25, r1
    10b2:	96 95       	lsr	r25
    10b4:	87 95       	ror	r24
    10b6:	97 f9       	bld	r25, 7
    10b8:	08 95       	ret

000010ba <__udivmodsi4>:
    10ba:	a1 e2       	ldi	r26, 0x21	; 33
    10bc:	1a 2e       	mov	r1, r26
    10be:	aa 1b       	sub	r26, r26
    10c0:	bb 1b       	sub	r27, r27
    10c2:	fd 01       	movw	r30, r26
    10c4:	0d c0       	rjmp	.+26     	; 0x10e0 <__udivmodsi4_ep>

000010c6 <__udivmodsi4_loop>:
    10c6:	aa 1f       	adc	r26, r26
    10c8:	bb 1f       	adc	r27, r27
    10ca:	ee 1f       	adc	r30, r30
    10cc:	ff 1f       	adc	r31, r31
    10ce:	a2 17       	cp	r26, r18
    10d0:	b3 07       	cpc	r27, r19
    10d2:	e4 07       	cpc	r30, r20
    10d4:	f5 07       	cpc	r31, r21
    10d6:	20 f0       	brcs	.+8      	; 0x10e0 <__udivmodsi4_ep>
    10d8:	a2 1b       	sub	r26, r18
    10da:	b3 0b       	sbc	r27, r19
    10dc:	e4 0b       	sbc	r30, r20
    10de:	f5 0b       	sbc	r31, r21

000010e0 <__udivmodsi4_ep>:
    10e0:	66 1f       	adc	r22, r22
    10e2:	77 1f       	adc	r23, r23
    10e4:	88 1f       	adc	r24, r24
    10e6:	99 1f       	adc	r25, r25
    10e8:	1a 94       	dec	r1
    10ea:	69 f7       	brne	.-38     	; 0x10c6 <__udivmodsi4_loop>
    10ec:	60 95       	com	r22
    10ee:	70 95       	com	r23
    10f0:	80 95       	com	r24
    10f2:	90 95       	com	r25
    10f4:	9b 01       	movw	r18, r22
    10f6:	ac 01       	movw	r20, r24
    10f8:	bd 01       	movw	r22, r26
    10fa:	cf 01       	movw	r24, r30
    10fc:	08 95       	ret

000010fe <dtostrf>:
    10fe:	ef 92       	push	r14
    1100:	0f 93       	push	r16
    1102:	1f 93       	push	r17
    1104:	cf 93       	push	r28
    1106:	df 93       	push	r29
    1108:	e8 01       	movw	r28, r16
    110a:	47 fd       	sbrc	r20, 7
    110c:	02 c0       	rjmp	.+4      	; 0x1112 <dtostrf+0x14>
    110e:	34 e0       	ldi	r19, 0x04	; 4
    1110:	01 c0       	rjmp	.+2      	; 0x1114 <dtostrf+0x16>
    1112:	34 e1       	ldi	r19, 0x14	; 20
    1114:	04 2e       	mov	r0, r20
    1116:	00 0c       	add	r0, r0
    1118:	55 0b       	sbc	r21, r21
    111a:	57 ff       	sbrs	r21, 7
    111c:	03 c0       	rjmp	.+6      	; 0x1124 <dtostrf+0x26>
    111e:	51 95       	neg	r21
    1120:	41 95       	neg	r20
    1122:	51 09       	sbc	r21, r1
    1124:	e3 2e       	mov	r14, r19
    1126:	02 2f       	mov	r16, r18
    1128:	24 2f       	mov	r18, r20
    112a:	ae 01       	movw	r20, r28
    112c:	0e 94 ae 08 	call	0x115c	; 0x115c <dtoa_prf>
    1130:	ce 01       	movw	r24, r28
    1132:	df 91       	pop	r29
    1134:	cf 91       	pop	r28
    1136:	1f 91       	pop	r17
    1138:	0f 91       	pop	r16
    113a:	ef 90       	pop	r14
    113c:	08 95       	ret

0000113e <atof>:
    113e:	66 27       	eor	r22, r22
    1140:	77 27       	eor	r23, r23
    1142:	0c 94 08 0a 	jmp	0x1410	; 0x1410 <strtod>

00001146 <strcat>:
    1146:	fb 01       	movw	r30, r22
    1148:	dc 01       	movw	r26, r24
    114a:	0d 90       	ld	r0, X+
    114c:	00 20       	and	r0, r0
    114e:	e9 f7       	brne	.-6      	; 0x114a <strcat+0x4>
    1150:	11 97       	sbiw	r26, 0x01	; 1
    1152:	01 90       	ld	r0, Z+
    1154:	0d 92       	st	X+, r0
    1156:	00 20       	and	r0, r0
    1158:	e1 f7       	brne	.-8      	; 0x1152 <strcat+0xc>
    115a:	08 95       	ret

0000115c <dtoa_prf>:
    115c:	a9 e0       	ldi	r26, 0x09	; 9
    115e:	b0 e0       	ldi	r27, 0x00	; 0
    1160:	e4 eb       	ldi	r30, 0xB4	; 180
    1162:	f8 e0       	ldi	r31, 0x08	; 8
    1164:	0c 94 63 0c 	jmp	0x18c6	; 0x18c6 <__prologue_saves__+0xc>
    1168:	6a 01       	movw	r12, r20
    116a:	12 2f       	mov	r17, r18
    116c:	b0 2e       	mov	r11, r16
    116e:	2b e3       	ldi	r18, 0x3B	; 59
    1170:	20 17       	cp	r18, r16
    1172:	20 f0       	brcs	.+8      	; 0x117c <dtoa_prf+0x20>
    1174:	ff 24       	eor	r15, r15
    1176:	f3 94       	inc	r15
    1178:	f0 0e       	add	r15, r16
    117a:	02 c0       	rjmp	.+4      	; 0x1180 <dtoa_prf+0x24>
    117c:	2c e3       	ldi	r18, 0x3C	; 60
    117e:	f2 2e       	mov	r15, r18
    1180:	0f 2d       	mov	r16, r15
    1182:	27 e0       	ldi	r18, 0x07	; 7
    1184:	ae 01       	movw	r20, r28
    1186:	4f 5f       	subi	r20, 0xFF	; 255
    1188:	5f 4f       	sbci	r21, 0xFF	; 255
    118a:	0e 94 56 0b 	call	0x16ac	; 0x16ac <__ftoa_engine>
    118e:	bc 01       	movw	r22, r24
    1190:	49 81       	ldd	r20, Y+1	; 0x01
    1192:	84 2f       	mov	r24, r20
    1194:	89 70       	andi	r24, 0x09	; 9
    1196:	81 30       	cpi	r24, 0x01	; 1
    1198:	31 f0       	breq	.+12     	; 0x11a6 <dtoa_prf+0x4a>
    119a:	e1 fc       	sbrc	r14, 1
    119c:	06 c0       	rjmp	.+12     	; 0x11aa <dtoa_prf+0x4e>
    119e:	e0 fe       	sbrs	r14, 0
    11a0:	06 c0       	rjmp	.+12     	; 0x11ae <dtoa_prf+0x52>
    11a2:	90 e2       	ldi	r25, 0x20	; 32
    11a4:	05 c0       	rjmp	.+10     	; 0x11b0 <dtoa_prf+0x54>
    11a6:	9d e2       	ldi	r25, 0x2D	; 45
    11a8:	03 c0       	rjmp	.+6      	; 0x11b0 <dtoa_prf+0x54>
    11aa:	9b e2       	ldi	r25, 0x2B	; 43
    11ac:	01 c0       	rjmp	.+2      	; 0x11b0 <dtoa_prf+0x54>
    11ae:	90 e0       	ldi	r25, 0x00	; 0
    11b0:	5e 2d       	mov	r21, r14
    11b2:	50 71       	andi	r21, 0x10	; 16
    11b4:	43 ff       	sbrs	r20, 3
    11b6:	3c c0       	rjmp	.+120    	; 0x1230 <dtoa_prf+0xd4>
    11b8:	91 11       	cpse	r25, r1
    11ba:	02 c0       	rjmp	.+4      	; 0x11c0 <dtoa_prf+0x64>
    11bc:	83 e0       	ldi	r24, 0x03	; 3
    11be:	01 c0       	rjmp	.+2      	; 0x11c2 <dtoa_prf+0x66>
    11c0:	84 e0       	ldi	r24, 0x04	; 4
    11c2:	81 17       	cp	r24, r17
    11c4:	18 f4       	brcc	.+6      	; 0x11cc <dtoa_prf+0x70>
    11c6:	21 2f       	mov	r18, r17
    11c8:	28 1b       	sub	r18, r24
    11ca:	01 c0       	rjmp	.+2      	; 0x11ce <dtoa_prf+0x72>
    11cc:	20 e0       	ldi	r18, 0x00	; 0
    11ce:	51 11       	cpse	r21, r1
    11d0:	0b c0       	rjmp	.+22     	; 0x11e8 <dtoa_prf+0x8c>
    11d2:	f6 01       	movw	r30, r12
    11d4:	82 2f       	mov	r24, r18
    11d6:	30 e2       	ldi	r19, 0x20	; 32
    11d8:	88 23       	and	r24, r24
    11da:	19 f0       	breq	.+6      	; 0x11e2 <dtoa_prf+0x86>
    11dc:	31 93       	st	Z+, r19
    11de:	81 50       	subi	r24, 0x01	; 1
    11e0:	fb cf       	rjmp	.-10     	; 0x11d8 <dtoa_prf+0x7c>
    11e2:	c2 0e       	add	r12, r18
    11e4:	d1 1c       	adc	r13, r1
    11e6:	20 e0       	ldi	r18, 0x00	; 0
    11e8:	99 23       	and	r25, r25
    11ea:	29 f0       	breq	.+10     	; 0x11f6 <dtoa_prf+0x9a>
    11ec:	d6 01       	movw	r26, r12
    11ee:	9c 93       	st	X, r25
    11f0:	f6 01       	movw	r30, r12
    11f2:	31 96       	adiw	r30, 0x01	; 1
    11f4:	6f 01       	movw	r12, r30
    11f6:	c6 01       	movw	r24, r12
    11f8:	03 96       	adiw	r24, 0x03	; 3
    11fa:	e2 fe       	sbrs	r14, 2
    11fc:	0a c0       	rjmp	.+20     	; 0x1212 <dtoa_prf+0xb6>
    11fe:	3e e4       	ldi	r19, 0x4E	; 78
    1200:	d6 01       	movw	r26, r12
    1202:	3c 93       	st	X, r19
    1204:	41 e4       	ldi	r20, 0x41	; 65
    1206:	11 96       	adiw	r26, 0x01	; 1
    1208:	4c 93       	st	X, r20
    120a:	11 97       	sbiw	r26, 0x01	; 1
    120c:	12 96       	adiw	r26, 0x02	; 2
    120e:	3c 93       	st	X, r19
    1210:	06 c0       	rjmp	.+12     	; 0x121e <dtoa_prf+0xc2>
    1212:	3e e6       	ldi	r19, 0x6E	; 110
    1214:	f6 01       	movw	r30, r12
    1216:	30 83       	st	Z, r19
    1218:	41 e6       	ldi	r20, 0x61	; 97
    121a:	41 83       	std	Z+1, r20	; 0x01
    121c:	32 83       	std	Z+2, r19	; 0x02
    121e:	fc 01       	movw	r30, r24
    1220:	32 2f       	mov	r19, r18
    1222:	40 e2       	ldi	r20, 0x20	; 32
    1224:	33 23       	and	r19, r19
    1226:	09 f4       	brne	.+2      	; 0x122a <dtoa_prf+0xce>
    1228:	42 c0       	rjmp	.+132    	; 0x12ae <dtoa_prf+0x152>
    122a:	41 93       	st	Z+, r20
    122c:	31 50       	subi	r19, 0x01	; 1
    122e:	fa cf       	rjmp	.-12     	; 0x1224 <dtoa_prf+0xc8>
    1230:	42 ff       	sbrs	r20, 2
    1232:	44 c0       	rjmp	.+136    	; 0x12bc <dtoa_prf+0x160>
    1234:	91 11       	cpse	r25, r1
    1236:	02 c0       	rjmp	.+4      	; 0x123c <dtoa_prf+0xe0>
    1238:	83 e0       	ldi	r24, 0x03	; 3
    123a:	01 c0       	rjmp	.+2      	; 0x123e <dtoa_prf+0xe2>
    123c:	84 e0       	ldi	r24, 0x04	; 4
    123e:	81 17       	cp	r24, r17
    1240:	18 f4       	brcc	.+6      	; 0x1248 <dtoa_prf+0xec>
    1242:	21 2f       	mov	r18, r17
    1244:	28 1b       	sub	r18, r24
    1246:	01 c0       	rjmp	.+2      	; 0x124a <dtoa_prf+0xee>
    1248:	20 e0       	ldi	r18, 0x00	; 0
    124a:	51 11       	cpse	r21, r1
    124c:	0b c0       	rjmp	.+22     	; 0x1264 <dtoa_prf+0x108>
    124e:	f6 01       	movw	r30, r12
    1250:	82 2f       	mov	r24, r18
    1252:	30 e2       	ldi	r19, 0x20	; 32
    1254:	88 23       	and	r24, r24
    1256:	19 f0       	breq	.+6      	; 0x125e <dtoa_prf+0x102>
    1258:	31 93       	st	Z+, r19
    125a:	81 50       	subi	r24, 0x01	; 1
    125c:	fb cf       	rjmp	.-10     	; 0x1254 <dtoa_prf+0xf8>
    125e:	c2 0e       	add	r12, r18
    1260:	d1 1c       	adc	r13, r1
    1262:	20 e0       	ldi	r18, 0x00	; 0
    1264:	99 23       	and	r25, r25
    1266:	29 f0       	breq	.+10     	; 0x1272 <dtoa_prf+0x116>
    1268:	d6 01       	movw	r26, r12
    126a:	9c 93       	st	X, r25
    126c:	f6 01       	movw	r30, r12
    126e:	31 96       	adiw	r30, 0x01	; 1
    1270:	6f 01       	movw	r12, r30
    1272:	c6 01       	movw	r24, r12
    1274:	03 96       	adiw	r24, 0x03	; 3
    1276:	e2 fe       	sbrs	r14, 2
    1278:	0b c0       	rjmp	.+22     	; 0x1290 <dtoa_prf+0x134>
    127a:	39 e4       	ldi	r19, 0x49	; 73
    127c:	d6 01       	movw	r26, r12
    127e:	3c 93       	st	X, r19
    1280:	3e e4       	ldi	r19, 0x4E	; 78
    1282:	11 96       	adiw	r26, 0x01	; 1
    1284:	3c 93       	st	X, r19
    1286:	11 97       	sbiw	r26, 0x01	; 1
    1288:	36 e4       	ldi	r19, 0x46	; 70
    128a:	12 96       	adiw	r26, 0x02	; 2
    128c:	3c 93       	st	X, r19
    128e:	07 c0       	rjmp	.+14     	; 0x129e <dtoa_prf+0x142>
    1290:	39 e6       	ldi	r19, 0x69	; 105
    1292:	f6 01       	movw	r30, r12
    1294:	30 83       	st	Z, r19
    1296:	3e e6       	ldi	r19, 0x6E	; 110
    1298:	31 83       	std	Z+1, r19	; 0x01
    129a:	36 e6       	ldi	r19, 0x66	; 102
    129c:	32 83       	std	Z+2, r19	; 0x02
    129e:	fc 01       	movw	r30, r24
    12a0:	32 2f       	mov	r19, r18
    12a2:	40 e2       	ldi	r20, 0x20	; 32
    12a4:	33 23       	and	r19, r19
    12a6:	19 f0       	breq	.+6      	; 0x12ae <dtoa_prf+0x152>
    12a8:	41 93       	st	Z+, r20
    12aa:	31 50       	subi	r19, 0x01	; 1
    12ac:	fb cf       	rjmp	.-10     	; 0x12a4 <dtoa_prf+0x148>
    12ae:	fc 01       	movw	r30, r24
    12b0:	e2 0f       	add	r30, r18
    12b2:	f1 1d       	adc	r31, r1
    12b4:	10 82       	st	Z, r1
    12b6:	8e ef       	ldi	r24, 0xFE	; 254
    12b8:	9f ef       	ldi	r25, 0xFF	; 255
    12ba:	a6 c0       	rjmp	.+332    	; 0x1408 <dtoa_prf+0x2ac>
    12bc:	21 e0       	ldi	r18, 0x01	; 1
    12be:	30 e0       	ldi	r19, 0x00	; 0
    12c0:	91 11       	cpse	r25, r1
    12c2:	02 c0       	rjmp	.+4      	; 0x12c8 <dtoa_prf+0x16c>
    12c4:	20 e0       	ldi	r18, 0x00	; 0
    12c6:	30 e0       	ldi	r19, 0x00	; 0
    12c8:	16 16       	cp	r1, r22
    12ca:	17 06       	cpc	r1, r23
    12cc:	1c f4       	brge	.+6      	; 0x12d4 <dtoa_prf+0x178>
    12ce:	fb 01       	movw	r30, r22
    12d0:	31 96       	adiw	r30, 0x01	; 1
    12d2:	02 c0       	rjmp	.+4      	; 0x12d8 <dtoa_prf+0x17c>
    12d4:	e1 e0       	ldi	r30, 0x01	; 1
    12d6:	f0 e0       	ldi	r31, 0x00	; 0
    12d8:	2e 0f       	add	r18, r30
    12da:	3f 1f       	adc	r19, r31
    12dc:	bb 20       	and	r11, r11
    12de:	21 f0       	breq	.+8      	; 0x12e8 <dtoa_prf+0x18c>
    12e0:	eb 2d       	mov	r30, r11
    12e2:	f0 e0       	ldi	r31, 0x00	; 0
    12e4:	31 96       	adiw	r30, 0x01	; 1
    12e6:	02 c0       	rjmp	.+4      	; 0x12ec <dtoa_prf+0x190>
    12e8:	e0 e0       	ldi	r30, 0x00	; 0
    12ea:	f0 e0       	ldi	r31, 0x00	; 0
    12ec:	2e 0f       	add	r18, r30
    12ee:	3f 1f       	adc	r19, r31
    12f0:	e1 2f       	mov	r30, r17
    12f2:	f0 e0       	ldi	r31, 0x00	; 0
    12f4:	2e 17       	cp	r18, r30
    12f6:	3f 07       	cpc	r19, r31
    12f8:	1c f4       	brge	.+6      	; 0x1300 <dtoa_prf+0x1a4>
    12fa:	12 1b       	sub	r17, r18
    12fc:	21 2f       	mov	r18, r17
    12fe:	01 c0       	rjmp	.+2      	; 0x1302 <dtoa_prf+0x1a6>
    1300:	20 e0       	ldi	r18, 0x00	; 0
    1302:	8e 2d       	mov	r24, r14
    1304:	88 71       	andi	r24, 0x18	; 24
    1306:	59 f4       	brne	.+22     	; 0x131e <dtoa_prf+0x1c2>
    1308:	f6 01       	movw	r30, r12
    130a:	82 2f       	mov	r24, r18
    130c:	30 e2       	ldi	r19, 0x20	; 32
    130e:	88 23       	and	r24, r24
    1310:	19 f0       	breq	.+6      	; 0x1318 <dtoa_prf+0x1bc>
    1312:	31 93       	st	Z+, r19
    1314:	81 50       	subi	r24, 0x01	; 1
    1316:	fb cf       	rjmp	.-10     	; 0x130e <dtoa_prf+0x1b2>
    1318:	c2 0e       	add	r12, r18
    131a:	d1 1c       	adc	r13, r1
    131c:	20 e0       	ldi	r18, 0x00	; 0
    131e:	99 23       	and	r25, r25
    1320:	29 f0       	breq	.+10     	; 0x132c <dtoa_prf+0x1d0>
    1322:	d6 01       	movw	r26, r12
    1324:	9c 93       	st	X, r25
    1326:	f6 01       	movw	r30, r12
    1328:	31 96       	adiw	r30, 0x01	; 1
    132a:	6f 01       	movw	r12, r30
    132c:	51 11       	cpse	r21, r1
    132e:	0b c0       	rjmp	.+22     	; 0x1346 <dtoa_prf+0x1ea>
    1330:	f6 01       	movw	r30, r12
    1332:	82 2f       	mov	r24, r18
    1334:	90 e3       	ldi	r25, 0x30	; 48
    1336:	88 23       	and	r24, r24
    1338:	19 f0       	breq	.+6      	; 0x1340 <dtoa_prf+0x1e4>
    133a:	91 93       	st	Z+, r25
    133c:	81 50       	subi	r24, 0x01	; 1
    133e:	fb cf       	rjmp	.-10     	; 0x1336 <dtoa_prf+0x1da>
    1340:	c2 0e       	add	r12, r18
    1342:	d1 1c       	adc	r13, r1
    1344:	20 e0       	ldi	r18, 0x00	; 0
    1346:	0f 2d       	mov	r16, r15
    1348:	06 0f       	add	r16, r22
    134a:	9a 81       	ldd	r25, Y+2	; 0x02
    134c:	34 2f       	mov	r19, r20
    134e:	30 71       	andi	r19, 0x10	; 16
    1350:	44 ff       	sbrs	r20, 4
    1352:	03 c0       	rjmp	.+6      	; 0x135a <dtoa_prf+0x1fe>
    1354:	91 33       	cpi	r25, 0x31	; 49
    1356:	09 f4       	brne	.+2      	; 0x135a <dtoa_prf+0x1fe>
    1358:	01 50       	subi	r16, 0x01	; 1
    135a:	10 16       	cp	r1, r16
    135c:	24 f4       	brge	.+8      	; 0x1366 <dtoa_prf+0x20a>
    135e:	09 30       	cpi	r16, 0x09	; 9
    1360:	18 f0       	brcs	.+6      	; 0x1368 <dtoa_prf+0x20c>
    1362:	08 e0       	ldi	r16, 0x08	; 8
    1364:	01 c0       	rjmp	.+2      	; 0x1368 <dtoa_prf+0x20c>
    1366:	01 e0       	ldi	r16, 0x01	; 1
    1368:	ab 01       	movw	r20, r22
    136a:	77 ff       	sbrs	r23, 7
    136c:	02 c0       	rjmp	.+4      	; 0x1372 <dtoa_prf+0x216>
    136e:	40 e0       	ldi	r20, 0x00	; 0
    1370:	50 e0       	ldi	r21, 0x00	; 0
    1372:	fb 01       	movw	r30, r22
    1374:	e4 1b       	sub	r30, r20
    1376:	f5 0b       	sbc	r31, r21
    1378:	a1 e0       	ldi	r26, 0x01	; 1
    137a:	b0 e0       	ldi	r27, 0x00	; 0
    137c:	ac 0f       	add	r26, r28
    137e:	bd 1f       	adc	r27, r29
    1380:	ea 0f       	add	r30, r26
    1382:	fb 1f       	adc	r31, r27
    1384:	8e e2       	ldi	r24, 0x2E	; 46
    1386:	a8 2e       	mov	r10, r24
    1388:	4b 01       	movw	r8, r22
    138a:	80 1a       	sub	r8, r16
    138c:	91 08       	sbc	r9, r1
    138e:	0b 2d       	mov	r16, r11
    1390:	10 e0       	ldi	r17, 0x00	; 0
    1392:	11 95       	neg	r17
    1394:	01 95       	neg	r16
    1396:	11 09       	sbc	r17, r1
    1398:	4f 3f       	cpi	r20, 0xFF	; 255
    139a:	bf ef       	ldi	r27, 0xFF	; 255
    139c:	5b 07       	cpc	r21, r27
    139e:	21 f4       	brne	.+8      	; 0x13a8 <dtoa_prf+0x24c>
    13a0:	d6 01       	movw	r26, r12
    13a2:	ac 92       	st	X, r10
    13a4:	11 96       	adiw	r26, 0x01	; 1
    13a6:	6d 01       	movw	r12, r26
    13a8:	64 17       	cp	r22, r20
    13aa:	75 07       	cpc	r23, r21
    13ac:	2c f0       	brlt	.+10     	; 0x13b8 <dtoa_prf+0x25c>
    13ae:	84 16       	cp	r8, r20
    13b0:	95 06       	cpc	r9, r21
    13b2:	14 f4       	brge	.+4      	; 0x13b8 <dtoa_prf+0x25c>
    13b4:	81 81       	ldd	r24, Z+1	; 0x01
    13b6:	01 c0       	rjmp	.+2      	; 0x13ba <dtoa_prf+0x25e>
    13b8:	80 e3       	ldi	r24, 0x30	; 48
    13ba:	41 50       	subi	r20, 0x01	; 1
    13bc:	51 09       	sbc	r21, r1
    13be:	31 96       	adiw	r30, 0x01	; 1
    13c0:	d6 01       	movw	r26, r12
    13c2:	11 96       	adiw	r26, 0x01	; 1
    13c4:	7d 01       	movw	r14, r26
    13c6:	40 17       	cp	r20, r16
    13c8:	51 07       	cpc	r21, r17
    13ca:	24 f0       	brlt	.+8      	; 0x13d4 <dtoa_prf+0x278>
    13cc:	d6 01       	movw	r26, r12
    13ce:	8c 93       	st	X, r24
    13d0:	67 01       	movw	r12, r14
    13d2:	e2 cf       	rjmp	.-60     	; 0x1398 <dtoa_prf+0x23c>
    13d4:	64 17       	cp	r22, r20
    13d6:	75 07       	cpc	r23, r21
    13d8:	39 f4       	brne	.+14     	; 0x13e8 <dtoa_prf+0x28c>
    13da:	96 33       	cpi	r25, 0x36	; 54
    13dc:	20 f4       	brcc	.+8      	; 0x13e6 <dtoa_prf+0x28a>
    13de:	95 33       	cpi	r25, 0x35	; 53
    13e0:	19 f4       	brne	.+6      	; 0x13e8 <dtoa_prf+0x28c>
    13e2:	31 11       	cpse	r19, r1
    13e4:	01 c0       	rjmp	.+2      	; 0x13e8 <dtoa_prf+0x28c>
    13e6:	81 e3       	ldi	r24, 0x31	; 49
    13e8:	f6 01       	movw	r30, r12
    13ea:	80 83       	st	Z, r24
    13ec:	f7 01       	movw	r30, r14
    13ee:	82 2f       	mov	r24, r18
    13f0:	90 e2       	ldi	r25, 0x20	; 32
    13f2:	88 23       	and	r24, r24
    13f4:	19 f0       	breq	.+6      	; 0x13fc <dtoa_prf+0x2a0>
    13f6:	91 93       	st	Z+, r25
    13f8:	81 50       	subi	r24, 0x01	; 1
    13fa:	fb cf       	rjmp	.-10     	; 0x13f2 <dtoa_prf+0x296>
    13fc:	f7 01       	movw	r30, r14
    13fe:	e2 0f       	add	r30, r18
    1400:	f1 1d       	adc	r31, r1
    1402:	10 82       	st	Z, r1
    1404:	80 e0       	ldi	r24, 0x00	; 0
    1406:	90 e0       	ldi	r25, 0x00	; 0
    1408:	29 96       	adiw	r28, 0x09	; 9
    140a:	ec e0       	ldi	r30, 0x0C	; 12
    140c:	0c 94 7f 0c 	jmp	0x18fe	; 0x18fe <__epilogue_restores__+0xc>

00001410 <strtod>:
    1410:	a0 e0       	ldi	r26, 0x00	; 0
    1412:	b0 e0       	ldi	r27, 0x00	; 0
    1414:	ee e0       	ldi	r30, 0x0E	; 14
    1416:	fa e0       	ldi	r31, 0x0A	; 10
    1418:	0c 94 63 0c 	jmp	0x18c6	; 0x18c6 <__prologue_saves__+0xc>
    141c:	ec 01       	movw	r28, r24
    141e:	6b 01       	movw	r12, r22
    1420:	61 15       	cp	r22, r1
    1422:	71 05       	cpc	r23, r1
    1424:	19 f0       	breq	.+6      	; 0x142c <strtod+0x1c>
    1426:	fb 01       	movw	r30, r22
    1428:	91 83       	std	Z+1, r25	; 0x01
    142a:	80 83       	st	Z, r24
    142c:	7e 01       	movw	r14, r28
    142e:	ff ef       	ldi	r31, 0xFF	; 255
    1430:	ef 1a       	sub	r14, r31
    1432:	ff 0a       	sbc	r15, r31
    1434:	08 81       	ld	r16, Y
    1436:	80 2f       	mov	r24, r16
    1438:	90 e0       	ldi	r25, 0x00	; 0
    143a:	0e 94 2e 0c 	call	0x185c	; 0x185c <isspace>
    143e:	89 2b       	or	r24, r25
    1440:	11 f0       	breq	.+4      	; 0x1446 <strtod+0x36>
    1442:	e7 01       	movw	r28, r14
    1444:	f3 cf       	rjmp	.-26     	; 0x142c <strtod+0x1c>
    1446:	0d 32       	cpi	r16, 0x2D	; 45
    1448:	39 f4       	brne	.+14     	; 0x1458 <strtod+0x48>
    144a:	7e 01       	movw	r14, r28
    144c:	82 e0       	ldi	r24, 0x02	; 2
    144e:	e8 0e       	add	r14, r24
    1450:	f1 1c       	adc	r15, r1
    1452:	09 81       	ldd	r16, Y+1	; 0x01
    1454:	11 e0       	ldi	r17, 0x01	; 1
    1456:	08 c0       	rjmp	.+16     	; 0x1468 <strtod+0x58>
    1458:	0b 32       	cpi	r16, 0x2B	; 43
    145a:	29 f4       	brne	.+10     	; 0x1466 <strtod+0x56>
    145c:	7e 01       	movw	r14, r28
    145e:	92 e0       	ldi	r25, 0x02	; 2
    1460:	e9 0e       	add	r14, r25
    1462:	f1 1c       	adc	r15, r1
    1464:	09 81       	ldd	r16, Y+1	; 0x01
    1466:	10 e0       	ldi	r17, 0x00	; 0
    1468:	e7 01       	movw	r28, r14
    146a:	21 97       	sbiw	r28, 0x01	; 1
    146c:	43 e0       	ldi	r20, 0x03	; 3
    146e:	50 e0       	ldi	r21, 0x00	; 0
    1470:	6c e5       	ldi	r22, 0x5C	; 92
    1472:	70 e0       	ldi	r23, 0x00	; 0
    1474:	ce 01       	movw	r24, r28
    1476:	0e 94 37 0c 	call	0x186e	; 0x186e <strncasecmp_P>
    147a:	89 2b       	or	r24, r25
    147c:	c1 f4       	brne	.+48     	; 0x14ae <strtod+0x9e>
    147e:	23 96       	adiw	r28, 0x03	; 3
    1480:	45 e0       	ldi	r20, 0x05	; 5
    1482:	50 e0       	ldi	r21, 0x00	; 0
    1484:	67 e5       	ldi	r22, 0x57	; 87
    1486:	70 e0       	ldi	r23, 0x00	; 0
    1488:	ce 01       	movw	r24, r28
    148a:	0e 94 37 0c 	call	0x186e	; 0x186e <strncasecmp_P>
    148e:	89 2b       	or	r24, r25
    1490:	09 f4       	brne	.+2      	; 0x1494 <strtod+0x84>
    1492:	25 96       	adiw	r28, 0x05	; 5
    1494:	c1 14       	cp	r12, r1
    1496:	d1 04       	cpc	r13, r1
    1498:	19 f0       	breq	.+6      	; 0x14a0 <strtod+0x90>
    149a:	f6 01       	movw	r30, r12
    149c:	d1 83       	std	Z+1, r29	; 0x01
    149e:	c0 83       	st	Z, r28
    14a0:	11 11       	cpse	r17, r1
    14a2:	f6 c0       	rjmp	.+492    	; 0x1690 <strtod+0x280>
    14a4:	60 e0       	ldi	r22, 0x00	; 0
    14a6:	70 e0       	ldi	r23, 0x00	; 0
    14a8:	80 e8       	ldi	r24, 0x80	; 128
    14aa:	9f e7       	ldi	r25, 0x7F	; 127
    14ac:	fa c0       	rjmp	.+500    	; 0x16a2 <strtod+0x292>
    14ae:	43 e0       	ldi	r20, 0x03	; 3
    14b0:	50 e0       	ldi	r21, 0x00	; 0
    14b2:	64 e5       	ldi	r22, 0x54	; 84
    14b4:	70 e0       	ldi	r23, 0x00	; 0
    14b6:	ce 01       	movw	r24, r28
    14b8:	0e 94 37 0c 	call	0x186e	; 0x186e <strncasecmp_P>
    14bc:	89 2b       	or	r24, r25
    14be:	59 f4       	brne	.+22     	; 0x14d6 <strtod+0xc6>
    14c0:	c1 14       	cp	r12, r1
    14c2:	d1 04       	cpc	r13, r1
    14c4:	09 f4       	brne	.+2      	; 0x14c8 <strtod+0xb8>
    14c6:	e9 c0       	rjmp	.+466    	; 0x169a <strtod+0x28a>
    14c8:	f2 e0       	ldi	r31, 0x02	; 2
    14ca:	ef 0e       	add	r14, r31
    14cc:	f1 1c       	adc	r15, r1
    14ce:	f6 01       	movw	r30, r12
    14d0:	f1 82       	std	Z+1, r15	; 0x01
    14d2:	e0 82       	st	Z, r14
    14d4:	e2 c0       	rjmp	.+452    	; 0x169a <strtod+0x28a>
    14d6:	20 e0       	ldi	r18, 0x00	; 0
    14d8:	30 e0       	ldi	r19, 0x00	; 0
    14da:	a9 01       	movw	r20, r18
    14dc:	c0 e0       	ldi	r28, 0x00	; 0
    14de:	d0 e0       	ldi	r29, 0x00	; 0
    14e0:	f7 01       	movw	r30, r14
    14e2:	80 ed       	ldi	r24, 0xD0	; 208
    14e4:	a8 2e       	mov	r10, r24
    14e6:	a0 0e       	add	r10, r16
    14e8:	89 e0       	ldi	r24, 0x09	; 9
    14ea:	8a 15       	cp	r24, r10
    14ec:	30 f1       	brcs	.+76     	; 0x153a <strtod+0x12a>
    14ee:	91 2f       	mov	r25, r17
    14f0:	92 60       	ori	r25, 0x02	; 2
    14f2:	b9 2e       	mov	r11, r25
    14f4:	81 2f       	mov	r24, r17
    14f6:	88 70       	andi	r24, 0x08	; 8
    14f8:	12 ff       	sbrs	r17, 2
    14fa:	04 c0       	rjmp	.+8      	; 0x1504 <strtod+0xf4>
    14fc:	81 11       	cpse	r24, r1
    14fe:	24 c0       	rjmp	.+72     	; 0x1548 <strtod+0x138>
    1500:	21 96       	adiw	r28, 0x01	; 1
    1502:	22 c0       	rjmp	.+68     	; 0x1548 <strtod+0x138>
    1504:	81 11       	cpse	r24, r1
    1506:	21 97       	sbiw	r28, 0x01	; 1
    1508:	a5 e0       	ldi	r26, 0x05	; 5
    150a:	b0 e0       	ldi	r27, 0x00	; 0
    150c:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <__muluhisi3>
    1510:	dc 01       	movw	r26, r24
    1512:	cb 01       	movw	r24, r22
    1514:	88 0f       	add	r24, r24
    1516:	99 1f       	adc	r25, r25
    1518:	aa 1f       	adc	r26, r26
    151a:	bb 1f       	adc	r27, r27
    151c:	9c 01       	movw	r18, r24
    151e:	ad 01       	movw	r20, r26
    1520:	2a 0d       	add	r18, r10
    1522:	31 1d       	adc	r19, r1
    1524:	41 1d       	adc	r20, r1
    1526:	51 1d       	adc	r21, r1
    1528:	28 39       	cpi	r18, 0x98	; 152
    152a:	89 e9       	ldi	r24, 0x99	; 153
    152c:	38 07       	cpc	r19, r24
    152e:	48 07       	cpc	r20, r24
    1530:	89 e1       	ldi	r24, 0x19	; 25
    1532:	58 07       	cpc	r21, r24
    1534:	48 f0       	brcs	.+18     	; 0x1548 <strtod+0x138>
    1536:	16 60       	ori	r17, 0x06	; 6
    1538:	06 c0       	rjmp	.+12     	; 0x1546 <strtod+0x136>
    153a:	9e ef       	ldi	r25, 0xFE	; 254
    153c:	a9 12       	cpse	r10, r25
    153e:	0a c0       	rjmp	.+20     	; 0x1554 <strtod+0x144>
    1540:	13 fd       	sbrc	r17, 3
    1542:	40 c0       	rjmp	.+128    	; 0x15c4 <strtod+0x1b4>
    1544:	18 60       	ori	r17, 0x08	; 8
    1546:	b1 2e       	mov	r11, r17
    1548:	8f ef       	ldi	r24, 0xFF	; 255
    154a:	e8 1a       	sub	r14, r24
    154c:	f8 0a       	sbc	r15, r24
    154e:	00 81       	ld	r16, Z
    1550:	1b 2d       	mov	r17, r11
    1552:	c6 cf       	rjmp	.-116    	; 0x14e0 <strtod+0xd0>
    1554:	80 2f       	mov	r24, r16
    1556:	8f 7d       	andi	r24, 0xDF	; 223
    1558:	85 34       	cpi	r24, 0x45	; 69
    155a:	a1 f5       	brne	.+104    	; 0x15c4 <strtod+0x1b4>
    155c:	80 81       	ld	r24, Z
    155e:	8d 32       	cpi	r24, 0x2D	; 45
    1560:	11 f4       	brne	.+4      	; 0x1566 <strtod+0x156>
    1562:	10 61       	ori	r17, 0x10	; 16
    1564:	06 c0       	rjmp	.+12     	; 0x1572 <strtod+0x162>
    1566:	8b 32       	cpi	r24, 0x2B	; 43
    1568:	21 f0       	breq	.+8      	; 0x1572 <strtod+0x162>
    156a:	31 96       	adiw	r30, 0x01	; 1
    156c:	61 e0       	ldi	r22, 0x01	; 1
    156e:	70 e0       	ldi	r23, 0x00	; 0
    1570:	04 c0       	rjmp	.+8      	; 0x157a <strtod+0x16a>
    1572:	81 81       	ldd	r24, Z+1	; 0x01
    1574:	32 96       	adiw	r30, 0x02	; 2
    1576:	62 e0       	ldi	r22, 0x02	; 2
    1578:	70 e0       	ldi	r23, 0x00	; 0
    157a:	80 53       	subi	r24, 0x30	; 48
    157c:	8a 30       	cpi	r24, 0x0A	; 10
    157e:	18 f0       	brcs	.+6      	; 0x1586 <strtod+0x176>
    1580:	e6 1b       	sub	r30, r22
    1582:	f7 0b       	sbc	r31, r23
    1584:	1f c0       	rjmp	.+62     	; 0x15c4 <strtod+0x1b4>
    1586:	60 e0       	ldi	r22, 0x00	; 0
    1588:	70 e0       	ldi	r23, 0x00	; 0
    158a:	60 38       	cpi	r22, 0x80	; 128
    158c:	9c e0       	ldi	r25, 0x0C	; 12
    158e:	79 07       	cpc	r23, r25
    1590:	5c f4       	brge	.+22     	; 0x15a8 <strtod+0x198>
    1592:	db 01       	movw	r26, r22
    1594:	aa 0f       	add	r26, r26
    1596:	bb 1f       	adc	r27, r27
    1598:	aa 0f       	add	r26, r26
    159a:	bb 1f       	adc	r27, r27
    159c:	6a 0f       	add	r22, r26
    159e:	7b 1f       	adc	r23, r27
    15a0:	66 0f       	add	r22, r22
    15a2:	77 1f       	adc	r23, r23
    15a4:	68 0f       	add	r22, r24
    15a6:	71 1d       	adc	r23, r1
    15a8:	31 96       	adiw	r30, 0x01	; 1
    15aa:	df 01       	movw	r26, r30
    15ac:	11 97       	sbiw	r26, 0x01	; 1
    15ae:	8c 91       	ld	r24, X
    15b0:	80 53       	subi	r24, 0x30	; 48
    15b2:	8a 30       	cpi	r24, 0x0A	; 10
    15b4:	50 f3       	brcs	.-44     	; 0x158a <strtod+0x17a>
    15b6:	14 ff       	sbrs	r17, 4
    15b8:	03 c0       	rjmp	.+6      	; 0x15c0 <strtod+0x1b0>
    15ba:	71 95       	neg	r23
    15bc:	61 95       	neg	r22
    15be:	71 09       	sbc	r23, r1
    15c0:	c6 0f       	add	r28, r22
    15c2:	d7 1f       	adc	r29, r23
    15c4:	11 ff       	sbrs	r17, 1
    15c6:	08 c0       	rjmp	.+16     	; 0x15d8 <strtod+0x1c8>
    15c8:	c1 14       	cp	r12, r1
    15ca:	d1 04       	cpc	r13, r1
    15cc:	29 f0       	breq	.+10     	; 0x15d8 <strtod+0x1c8>
    15ce:	cf 01       	movw	r24, r30
    15d0:	01 97       	sbiw	r24, 0x01	; 1
    15d2:	f6 01       	movw	r30, r12
    15d4:	91 83       	std	Z+1, r25	; 0x01
    15d6:	80 83       	st	Z, r24
    15d8:	ca 01       	movw	r24, r20
    15da:	b9 01       	movw	r22, r18
    15dc:	0e 94 3e 07 	call	0xe7c	; 0xe7c <__floatunsisf>
    15e0:	21 2f       	mov	r18, r17
    15e2:	23 70       	andi	r18, 0x03	; 3
    15e4:	23 30       	cpi	r18, 0x03	; 3
    15e6:	19 f0       	breq	.+6      	; 0x15ee <strtod+0x1de>
    15e8:	4b 01       	movw	r8, r22
    15ea:	5c 01       	movw	r10, r24
    15ec:	06 c0       	rjmp	.+12     	; 0x15fa <strtod+0x1ea>
    15ee:	4b 01       	movw	r8, r22
    15f0:	5c 01       	movw	r10, r24
    15f2:	b7 fa       	bst	r11, 7
    15f4:	b0 94       	com	r11
    15f6:	b7 f8       	bld	r11, 7
    15f8:	b0 94       	com	r11
    15fa:	20 e0       	ldi	r18, 0x00	; 0
    15fc:	30 e0       	ldi	r19, 0x00	; 0
    15fe:	a9 01       	movw	r20, r18
    1600:	c5 01       	movw	r24, r10
    1602:	b4 01       	movw	r22, r8
    1604:	0e 94 91 06 	call	0xd22	; 0xd22 <__cmpsf2>
    1608:	88 23       	and	r24, r24
    160a:	09 f4       	brne	.+2      	; 0x160e <strtod+0x1fe>
    160c:	3e c0       	rjmp	.+124    	; 0x168a <strtod+0x27a>
    160e:	d7 ff       	sbrs	r29, 7
    1610:	06 c0       	rjmp	.+12     	; 0x161e <strtod+0x20e>
    1612:	d1 95       	neg	r29
    1614:	c1 95       	neg	r28
    1616:	d1 09       	sbc	r29, r1
    1618:	03 e7       	ldi	r16, 0x73	; 115
    161a:	10 e0       	ldi	r17, 0x00	; 0
    161c:	02 c0       	rjmp	.+4      	; 0x1622 <strtod+0x212>
    161e:	0b e8       	ldi	r16, 0x8B	; 139
    1620:	10 e0       	ldi	r17, 0x00	; 0
    1622:	68 01       	movw	r12, r16
    1624:	f8 e1       	ldi	r31, 0x18	; 24
    1626:	cf 1a       	sub	r12, r31
    1628:	d1 08       	sbc	r13, r1
    162a:	90 e2       	ldi	r25, 0x20	; 32
    162c:	e9 2e       	mov	r14, r25
    162e:	f1 2c       	mov	r15, r1
    1630:	ce 15       	cp	r28, r14
    1632:	df 05       	cpc	r29, r15
    1634:	74 f0       	brlt	.+28     	; 0x1652 <strtod+0x242>
    1636:	f8 01       	movw	r30, r16
    1638:	25 91       	lpm	r18, Z+
    163a:	35 91       	lpm	r19, Z+
    163c:	45 91       	lpm	r20, Z+
    163e:	54 91       	lpm	r21, Z
    1640:	c5 01       	movw	r24, r10
    1642:	b4 01       	movw	r22, r8
    1644:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <__mulsf3>
    1648:	4b 01       	movw	r8, r22
    164a:	5c 01       	movw	r10, r24
    164c:	ce 19       	sub	r28, r14
    164e:	df 09       	sbc	r29, r15
    1650:	ef cf       	rjmp	.-34     	; 0x1630 <strtod+0x220>
    1652:	04 50       	subi	r16, 0x04	; 4
    1654:	11 09       	sbc	r17, r1
    1656:	f5 94       	asr	r15
    1658:	e7 94       	ror	r14
    165a:	0c 15       	cp	r16, r12
    165c:	1d 05       	cpc	r17, r13
    165e:	41 f7       	brne	.-48     	; 0x1630 <strtod+0x220>
    1660:	8a 2d       	mov	r24, r10
    1662:	88 0f       	add	r24, r24
    1664:	8b 2d       	mov	r24, r11
    1666:	88 1f       	adc	r24, r24
    1668:	8f 3f       	cpi	r24, 0xFF	; 255
    166a:	49 f0       	breq	.+18     	; 0x167e <strtod+0x26e>
    166c:	20 e0       	ldi	r18, 0x00	; 0
    166e:	30 e0       	ldi	r19, 0x00	; 0
    1670:	a9 01       	movw	r20, r18
    1672:	c5 01       	movw	r24, r10
    1674:	b4 01       	movw	r22, r8
    1676:	0e 94 91 06 	call	0xd22	; 0xd22 <__cmpsf2>
    167a:	81 11       	cpse	r24, r1
    167c:	06 c0       	rjmp	.+12     	; 0x168a <strtod+0x27a>
    167e:	82 e2       	ldi	r24, 0x22	; 34
    1680:	90 e0       	ldi	r25, 0x00	; 0
    1682:	90 93 c3 02 	sts	0x02C3, r25	; 0x8002c3 <errno+0x1>
    1686:	80 93 c2 02 	sts	0x02C2, r24	; 0x8002c2 <errno>
    168a:	c5 01       	movw	r24, r10
    168c:	b4 01       	movw	r22, r8
    168e:	09 c0       	rjmp	.+18     	; 0x16a2 <strtod+0x292>
    1690:	60 e0       	ldi	r22, 0x00	; 0
    1692:	70 e0       	ldi	r23, 0x00	; 0
    1694:	80 e8       	ldi	r24, 0x80	; 128
    1696:	9f ef       	ldi	r25, 0xFF	; 255
    1698:	04 c0       	rjmp	.+8      	; 0x16a2 <strtod+0x292>
    169a:	60 e0       	ldi	r22, 0x00	; 0
    169c:	70 e0       	ldi	r23, 0x00	; 0
    169e:	80 ec       	ldi	r24, 0xC0	; 192
    16a0:	9f e7       	ldi	r25, 0x7F	; 127
    16a2:	cd b7       	in	r28, 0x3d	; 61
    16a4:	de b7       	in	r29, 0x3e	; 62
    16a6:	ec e0       	ldi	r30, 0x0C	; 12
    16a8:	0c 94 7f 0c 	jmp	0x18fe	; 0x18fe <__epilogue_restores__+0xc>

000016ac <__ftoa_engine>:
    16ac:	28 30       	cpi	r18, 0x08	; 8
    16ae:	08 f0       	brcs	.+2      	; 0x16b2 <__ftoa_engine+0x6>
    16b0:	27 e0       	ldi	r18, 0x07	; 7
    16b2:	33 27       	eor	r19, r19
    16b4:	da 01       	movw	r26, r20
    16b6:	99 0f       	add	r25, r25
    16b8:	31 1d       	adc	r19, r1
    16ba:	87 fd       	sbrc	r24, 7
    16bc:	91 60       	ori	r25, 0x01	; 1
    16be:	00 96       	adiw	r24, 0x00	; 0
    16c0:	61 05       	cpc	r22, r1
    16c2:	71 05       	cpc	r23, r1
    16c4:	39 f4       	brne	.+14     	; 0x16d4 <__ftoa_engine+0x28>
    16c6:	32 60       	ori	r19, 0x02	; 2
    16c8:	2e 5f       	subi	r18, 0xFE	; 254
    16ca:	3d 93       	st	X+, r19
    16cc:	30 e3       	ldi	r19, 0x30	; 48
    16ce:	2a 95       	dec	r18
    16d0:	e1 f7       	brne	.-8      	; 0x16ca <__ftoa_engine+0x1e>
    16d2:	08 95       	ret
    16d4:	9f 3f       	cpi	r25, 0xFF	; 255
    16d6:	30 f0       	brcs	.+12     	; 0x16e4 <__ftoa_engine+0x38>
    16d8:	80 38       	cpi	r24, 0x80	; 128
    16da:	71 05       	cpc	r23, r1
    16dc:	61 05       	cpc	r22, r1
    16de:	09 f0       	breq	.+2      	; 0x16e2 <__ftoa_engine+0x36>
    16e0:	3c 5f       	subi	r19, 0xFC	; 252
    16e2:	3c 5f       	subi	r19, 0xFC	; 252
    16e4:	3d 93       	st	X+, r19
    16e6:	91 30       	cpi	r25, 0x01	; 1
    16e8:	08 f0       	brcs	.+2      	; 0x16ec <__ftoa_engine+0x40>
    16ea:	80 68       	ori	r24, 0x80	; 128
    16ec:	91 1d       	adc	r25, r1
    16ee:	df 93       	push	r29
    16f0:	cf 93       	push	r28
    16f2:	1f 93       	push	r17
    16f4:	0f 93       	push	r16
    16f6:	ff 92       	push	r15
    16f8:	ef 92       	push	r14
    16fa:	19 2f       	mov	r17, r25
    16fc:	98 7f       	andi	r25, 0xF8	; 248
    16fe:	96 95       	lsr	r25
    1700:	e9 2f       	mov	r30, r25
    1702:	96 95       	lsr	r25
    1704:	96 95       	lsr	r25
    1706:	e9 0f       	add	r30, r25
    1708:	ff 27       	eor	r31, r31
    170a:	e7 51       	subi	r30, 0x17	; 23
    170c:	ff 4f       	sbci	r31, 0xFF	; 255
    170e:	99 27       	eor	r25, r25
    1710:	33 27       	eor	r19, r19
    1712:	ee 24       	eor	r14, r14
    1714:	ff 24       	eor	r15, r15
    1716:	a7 01       	movw	r20, r14
    1718:	e7 01       	movw	r28, r14
    171a:	05 90       	lpm	r0, Z+
    171c:	08 94       	sec
    171e:	07 94       	ror	r0
    1720:	28 f4       	brcc	.+10     	; 0x172c <__ftoa_engine+0x80>
    1722:	36 0f       	add	r19, r22
    1724:	e7 1e       	adc	r14, r23
    1726:	f8 1e       	adc	r15, r24
    1728:	49 1f       	adc	r20, r25
    172a:	51 1d       	adc	r21, r1
    172c:	66 0f       	add	r22, r22
    172e:	77 1f       	adc	r23, r23
    1730:	88 1f       	adc	r24, r24
    1732:	99 1f       	adc	r25, r25
    1734:	06 94       	lsr	r0
    1736:	a1 f7       	brne	.-24     	; 0x1720 <__ftoa_engine+0x74>
    1738:	05 90       	lpm	r0, Z+
    173a:	07 94       	ror	r0
    173c:	28 f4       	brcc	.+10     	; 0x1748 <__ftoa_engine+0x9c>
    173e:	e7 0e       	add	r14, r23
    1740:	f8 1e       	adc	r15, r24
    1742:	49 1f       	adc	r20, r25
    1744:	56 1f       	adc	r21, r22
    1746:	c1 1d       	adc	r28, r1
    1748:	77 0f       	add	r23, r23
    174a:	88 1f       	adc	r24, r24
    174c:	99 1f       	adc	r25, r25
    174e:	66 1f       	adc	r22, r22
    1750:	06 94       	lsr	r0
    1752:	a1 f7       	brne	.-24     	; 0x173c <__ftoa_engine+0x90>
    1754:	05 90       	lpm	r0, Z+
    1756:	07 94       	ror	r0
    1758:	28 f4       	brcc	.+10     	; 0x1764 <__ftoa_engine+0xb8>
    175a:	f8 0e       	add	r15, r24
    175c:	49 1f       	adc	r20, r25
    175e:	56 1f       	adc	r21, r22
    1760:	c7 1f       	adc	r28, r23
    1762:	d1 1d       	adc	r29, r1
    1764:	88 0f       	add	r24, r24
    1766:	99 1f       	adc	r25, r25
    1768:	66 1f       	adc	r22, r22
    176a:	77 1f       	adc	r23, r23
    176c:	06 94       	lsr	r0
    176e:	a1 f7       	brne	.-24     	; 0x1758 <__ftoa_engine+0xac>
    1770:	05 90       	lpm	r0, Z+
    1772:	07 94       	ror	r0
    1774:	20 f4       	brcc	.+8      	; 0x177e <__ftoa_engine+0xd2>
    1776:	49 0f       	add	r20, r25
    1778:	56 1f       	adc	r21, r22
    177a:	c7 1f       	adc	r28, r23
    177c:	d8 1f       	adc	r29, r24
    177e:	99 0f       	add	r25, r25
    1780:	66 1f       	adc	r22, r22
    1782:	77 1f       	adc	r23, r23
    1784:	88 1f       	adc	r24, r24
    1786:	06 94       	lsr	r0
    1788:	a9 f7       	brne	.-22     	; 0x1774 <__ftoa_engine+0xc8>
    178a:	84 91       	lpm	r24, Z
    178c:	10 95       	com	r17
    178e:	17 70       	andi	r17, 0x07	; 7
    1790:	41 f0       	breq	.+16     	; 0x17a2 <__ftoa_engine+0xf6>
    1792:	d6 95       	lsr	r29
    1794:	c7 95       	ror	r28
    1796:	57 95       	ror	r21
    1798:	47 95       	ror	r20
    179a:	f7 94       	ror	r15
    179c:	e7 94       	ror	r14
    179e:	1a 95       	dec	r17
    17a0:	c1 f7       	brne	.-16     	; 0x1792 <__ftoa_engine+0xe6>
    17a2:	ef e8       	ldi	r30, 0x8F	; 143
    17a4:	f0 e0       	ldi	r31, 0x00	; 0
    17a6:	68 94       	set
    17a8:	15 90       	lpm	r1, Z+
    17aa:	15 91       	lpm	r17, Z+
    17ac:	35 91       	lpm	r19, Z+
    17ae:	65 91       	lpm	r22, Z+
    17b0:	95 91       	lpm	r25, Z+
    17b2:	05 90       	lpm	r0, Z+
    17b4:	7f e2       	ldi	r23, 0x2F	; 47
    17b6:	73 95       	inc	r23
    17b8:	e1 18       	sub	r14, r1
    17ba:	f1 0a       	sbc	r15, r17
    17bc:	43 0b       	sbc	r20, r19
    17be:	56 0b       	sbc	r21, r22
    17c0:	c9 0b       	sbc	r28, r25
    17c2:	d0 09       	sbc	r29, r0
    17c4:	c0 f7       	brcc	.-16     	; 0x17b6 <__ftoa_engine+0x10a>
    17c6:	e1 0c       	add	r14, r1
    17c8:	f1 1e       	adc	r15, r17
    17ca:	43 1f       	adc	r20, r19
    17cc:	56 1f       	adc	r21, r22
    17ce:	c9 1f       	adc	r28, r25
    17d0:	d0 1d       	adc	r29, r0
    17d2:	7e f4       	brtc	.+30     	; 0x17f2 <__ftoa_engine+0x146>
    17d4:	70 33       	cpi	r23, 0x30	; 48
    17d6:	11 f4       	brne	.+4      	; 0x17dc <__ftoa_engine+0x130>
    17d8:	8a 95       	dec	r24
    17da:	e6 cf       	rjmp	.-52     	; 0x17a8 <__ftoa_engine+0xfc>
    17dc:	e8 94       	clt
    17de:	01 50       	subi	r16, 0x01	; 1
    17e0:	30 f0       	brcs	.+12     	; 0x17ee <__ftoa_engine+0x142>
    17e2:	08 0f       	add	r16, r24
    17e4:	0a f4       	brpl	.+2      	; 0x17e8 <__ftoa_engine+0x13c>
    17e6:	00 27       	eor	r16, r16
    17e8:	02 17       	cp	r16, r18
    17ea:	08 f4       	brcc	.+2      	; 0x17ee <__ftoa_engine+0x142>
    17ec:	20 2f       	mov	r18, r16
    17ee:	23 95       	inc	r18
    17f0:	02 2f       	mov	r16, r18
    17f2:	7a 33       	cpi	r23, 0x3A	; 58
    17f4:	28 f0       	brcs	.+10     	; 0x1800 <__ftoa_engine+0x154>
    17f6:	79 e3       	ldi	r23, 0x39	; 57
    17f8:	7d 93       	st	X+, r23
    17fa:	2a 95       	dec	r18
    17fc:	e9 f7       	brne	.-6      	; 0x17f8 <__ftoa_engine+0x14c>
    17fe:	10 c0       	rjmp	.+32     	; 0x1820 <__ftoa_engine+0x174>
    1800:	7d 93       	st	X+, r23
    1802:	2a 95       	dec	r18
    1804:	89 f6       	brne	.-94     	; 0x17a8 <__ftoa_engine+0xfc>
    1806:	06 94       	lsr	r0
    1808:	97 95       	ror	r25
    180a:	67 95       	ror	r22
    180c:	37 95       	ror	r19
    180e:	17 95       	ror	r17
    1810:	17 94       	ror	r1
    1812:	e1 18       	sub	r14, r1
    1814:	f1 0a       	sbc	r15, r17
    1816:	43 0b       	sbc	r20, r19
    1818:	56 0b       	sbc	r21, r22
    181a:	c9 0b       	sbc	r28, r25
    181c:	d0 09       	sbc	r29, r0
    181e:	98 f0       	brcs	.+38     	; 0x1846 <__ftoa_engine+0x19a>
    1820:	23 95       	inc	r18
    1822:	7e 91       	ld	r23, -X
    1824:	73 95       	inc	r23
    1826:	7a 33       	cpi	r23, 0x3A	; 58
    1828:	08 f0       	brcs	.+2      	; 0x182c <__ftoa_engine+0x180>
    182a:	70 e3       	ldi	r23, 0x30	; 48
    182c:	7c 93       	st	X, r23
    182e:	20 13       	cpse	r18, r16
    1830:	b8 f7       	brcc	.-18     	; 0x1820 <__ftoa_engine+0x174>
    1832:	7e 91       	ld	r23, -X
    1834:	70 61       	ori	r23, 0x10	; 16
    1836:	7d 93       	st	X+, r23
    1838:	30 f0       	brcs	.+12     	; 0x1846 <__ftoa_engine+0x19a>
    183a:	83 95       	inc	r24
    183c:	71 e3       	ldi	r23, 0x31	; 49
    183e:	7d 93       	st	X+, r23
    1840:	70 e3       	ldi	r23, 0x30	; 48
    1842:	2a 95       	dec	r18
    1844:	e1 f7       	brne	.-8      	; 0x183e <__ftoa_engine+0x192>
    1846:	11 24       	eor	r1, r1
    1848:	ef 90       	pop	r14
    184a:	ff 90       	pop	r15
    184c:	0f 91       	pop	r16
    184e:	1f 91       	pop	r17
    1850:	cf 91       	pop	r28
    1852:	df 91       	pop	r29
    1854:	99 27       	eor	r25, r25
    1856:	87 fd       	sbrc	r24, 7
    1858:	90 95       	com	r25
    185a:	08 95       	ret

0000185c <isspace>:
    185c:	91 11       	cpse	r25, r1
    185e:	0c 94 4f 0c 	jmp	0x189e	; 0x189e <__ctype_isfalse>
    1862:	80 32       	cpi	r24, 0x20	; 32
    1864:	19 f0       	breq	.+6      	; 0x186c <isspace+0x10>
    1866:	89 50       	subi	r24, 0x09	; 9
    1868:	85 50       	subi	r24, 0x05	; 5
    186a:	c8 f7       	brcc	.-14     	; 0x185e <isspace+0x2>
    186c:	08 95       	ret

0000186e <strncasecmp_P>:
    186e:	fb 01       	movw	r30, r22
    1870:	dc 01       	movw	r26, r24
    1872:	41 50       	subi	r20, 0x01	; 1
    1874:	50 40       	sbci	r21, 0x00	; 0
    1876:	88 f0       	brcs	.+34     	; 0x189a <strncasecmp_P+0x2c>
    1878:	8d 91       	ld	r24, X+
    187a:	81 34       	cpi	r24, 0x41	; 65
    187c:	1c f0       	brlt	.+6      	; 0x1884 <strncasecmp_P+0x16>
    187e:	8b 35       	cpi	r24, 0x5B	; 91
    1880:	0c f4       	brge	.+2      	; 0x1884 <strncasecmp_P+0x16>
    1882:	80 5e       	subi	r24, 0xE0	; 224
    1884:	65 91       	lpm	r22, Z+
    1886:	61 34       	cpi	r22, 0x41	; 65
    1888:	1c f0       	brlt	.+6      	; 0x1890 <strncasecmp_P+0x22>
    188a:	6b 35       	cpi	r22, 0x5B	; 91
    188c:	0c f4       	brge	.+2      	; 0x1890 <strncasecmp_P+0x22>
    188e:	60 5e       	subi	r22, 0xE0	; 224
    1890:	86 1b       	sub	r24, r22
    1892:	61 11       	cpse	r22, r1
    1894:	71 f3       	breq	.-36     	; 0x1872 <strncasecmp_P+0x4>
    1896:	99 0b       	sbc	r25, r25
    1898:	08 95       	ret
    189a:	88 1b       	sub	r24, r24
    189c:	fc cf       	rjmp	.-8      	; 0x1896 <strncasecmp_P+0x28>

0000189e <__ctype_isfalse>:
    189e:	99 27       	eor	r25, r25
    18a0:	88 27       	eor	r24, r24

000018a2 <__ctype_istrue>:
    18a2:	08 95       	ret

000018a4 <__muluhisi3>:
    18a4:	0e 94 94 0c 	call	0x1928	; 0x1928 <__umulhisi3>
    18a8:	a5 9f       	mul	r26, r21
    18aa:	90 0d       	add	r25, r0
    18ac:	b4 9f       	mul	r27, r20
    18ae:	90 0d       	add	r25, r0
    18b0:	a4 9f       	mul	r26, r20
    18b2:	80 0d       	add	r24, r0
    18b4:	91 1d       	adc	r25, r1
    18b6:	11 24       	eor	r1, r1
    18b8:	08 95       	ret

000018ba <__prologue_saves__>:
    18ba:	2f 92       	push	r2
    18bc:	3f 92       	push	r3
    18be:	4f 92       	push	r4
    18c0:	5f 92       	push	r5
    18c2:	6f 92       	push	r6
    18c4:	7f 92       	push	r7
    18c6:	8f 92       	push	r8
    18c8:	9f 92       	push	r9
    18ca:	af 92       	push	r10
    18cc:	bf 92       	push	r11
    18ce:	cf 92       	push	r12
    18d0:	df 92       	push	r13
    18d2:	ef 92       	push	r14
    18d4:	ff 92       	push	r15
    18d6:	0f 93       	push	r16
    18d8:	1f 93       	push	r17
    18da:	cf 93       	push	r28
    18dc:	df 93       	push	r29
    18de:	cd b7       	in	r28, 0x3d	; 61
    18e0:	de b7       	in	r29, 0x3e	; 62
    18e2:	ca 1b       	sub	r28, r26
    18e4:	db 0b       	sbc	r29, r27
    18e6:	0f b6       	in	r0, 0x3f	; 63
    18e8:	f8 94       	cli
    18ea:	de bf       	out	0x3e, r29	; 62
    18ec:	0f be       	out	0x3f, r0	; 63
    18ee:	cd bf       	out	0x3d, r28	; 61
    18f0:	09 94       	ijmp

000018f2 <__epilogue_restores__>:
    18f2:	2a 88       	ldd	r2, Y+18	; 0x12
    18f4:	39 88       	ldd	r3, Y+17	; 0x11
    18f6:	48 88       	ldd	r4, Y+16	; 0x10
    18f8:	5f 84       	ldd	r5, Y+15	; 0x0f
    18fa:	6e 84       	ldd	r6, Y+14	; 0x0e
    18fc:	7d 84       	ldd	r7, Y+13	; 0x0d
    18fe:	8c 84       	ldd	r8, Y+12	; 0x0c
    1900:	9b 84       	ldd	r9, Y+11	; 0x0b
    1902:	aa 84       	ldd	r10, Y+10	; 0x0a
    1904:	b9 84       	ldd	r11, Y+9	; 0x09
    1906:	c8 84       	ldd	r12, Y+8	; 0x08
    1908:	df 80       	ldd	r13, Y+7	; 0x07
    190a:	ee 80       	ldd	r14, Y+6	; 0x06
    190c:	fd 80       	ldd	r15, Y+5	; 0x05
    190e:	0c 81       	ldd	r16, Y+4	; 0x04
    1910:	1b 81       	ldd	r17, Y+3	; 0x03
    1912:	aa 81       	ldd	r26, Y+2	; 0x02
    1914:	b9 81       	ldd	r27, Y+1	; 0x01
    1916:	ce 0f       	add	r28, r30
    1918:	d1 1d       	adc	r29, r1
    191a:	0f b6       	in	r0, 0x3f	; 63
    191c:	f8 94       	cli
    191e:	de bf       	out	0x3e, r29	; 62
    1920:	0f be       	out	0x3f, r0	; 63
    1922:	cd bf       	out	0x3d, r28	; 61
    1924:	ed 01       	movw	r28, r26
    1926:	08 95       	ret

00001928 <__umulhisi3>:
    1928:	a2 9f       	mul	r26, r18
    192a:	b0 01       	movw	r22, r0
    192c:	b3 9f       	mul	r27, r19
    192e:	c0 01       	movw	r24, r0
    1930:	a3 9f       	mul	r26, r19
    1932:	70 0d       	add	r23, r0
    1934:	81 1d       	adc	r24, r1
    1936:	11 24       	eor	r1, r1
    1938:	91 1d       	adc	r25, r1
    193a:	b2 9f       	mul	r27, r18
    193c:	70 0d       	add	r23, r0
    193e:	81 1d       	adc	r24, r1
    1940:	11 24       	eor	r1, r1
    1942:	91 1d       	adc	r25, r1
    1944:	08 95       	ret

00001946 <_exit>:
    1946:	f8 94       	cli

00001948 <__stop_program>:
    1948:	ff cf       	rjmp	.-2      	; 0x1948 <__stop_program>
