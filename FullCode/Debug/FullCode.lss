
FullCode.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000019cc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000146  00800060  000019cc  00001a60  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000011e  008001a6  008001a6  00001ba6  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001ba6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001c04  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000170  00000000  00000000  00001c40  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000239a  00000000  00000000  00001db0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008db  00000000  00000000  0000414a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001142  00000000  00000000  00004a25  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000430  00000000  00000000  00005b68  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000787  00000000  00000000  00005f98  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000018c8  00000000  00000000  0000671f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000168  00000000  00000000  00007fe7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 c5 00 	jmp	0x18a	; 0x18a <__ctors_end>
       4:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
       8:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
       c:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      10:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      14:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      18:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      1c:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      20:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      24:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      28:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      2c:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      30:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      34:	0c 94 fa 02 	jmp	0x5f4	; 0x5f4 <__vector_13>
      38:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      3c:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      40:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      44:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      48:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      4c:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      50:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>

00000054 <__trampolines_end>:
      54:	4e 41       	sbci	r20, 0x1E	; 30
      56:	4e 49       	Address 0x00000056 is out of bounds.
.word	0xffff	; ????

00000057 <pstr_inity>:
      57:	49 4e 49 54 59                                      INITY

0000005c <pstr_inf>:
      5c:	49 4e 46                                            INF

0000005f <pwr_m10>:
      5f:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
      6f:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

00000077 <pwr_p10>:
      77:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
      87:	ca 1b 0e 5a ae c5 9d 74 00 40 7a 10 f3 5a 00 a0     ...Z...t.@z..Z..
      97:	72 4e 18 09 00 10 a5 d4 e8 00 00 e8 76 48 17 00     rN..........vH..
      a7:	00 e4 0b 54 02 00 00 ca 9a 3b 00 00 00 e1 f5 05     ...T.....;......
      b7:	00 00 80 96 98 00 00 00 40 42 0f 00 00 00 a0 86     ........@B......
      c7:	01 00 00 00 10 27 00 00 00 00 e8 03 00 00 00 00     .....'..........
      d7:	64 00 00 00 00 00 0a 00 00 00 00 00 01 00 00 00     d...............
      e7:	00 00 2c 76 d8 88 dc 67 4f 08 23 df c1 df ae 59     ..,v...gO.#....Y
      f7:	e1 b1 b7 96 e5 e3 e4 53 c6 3a e6 51 99 76 96 e8     .......S.:.Q.v..
     107:	e6 c2 84 26 eb 89 8c 9b 62 ed 40 7c 6f fc ef bc     ...&....b.@|o...
     117:	9c 9f 40 f2 ba a5 6f a5 f4 90 05 5a 2a f7 5c 93     ..@...o....Z*.\.
     127:	6b 6c f9 67 6d c1 1b fc e0 e4 0d 47 fe f5 20 e6     kl.gm......G.. .
     137:	b5 00 d0 ed 90 2e 03 00 94 35 77 05 00 80 84 1e     .........5w.....
     147:	08 00 00 20 4e 0a 00 00 00 c8 0c 33 33 33 33 0f     ... N......3333.
     157:	98 6e 12 83 11 41 ef 8d 21 14 89 3b e6 55 16 cf     .n...A..!..;.U..
     167:	fe e6 db 18 d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb     ......K8..|.....
     177:	e4 24 20 32 84 72 5e 22 81 00 c9 f1 24 ec a1 e5     .$ 2.r^"....$...
     187:	3d 27 00                                            ='.

0000018a <__ctors_end>:
     18a:	11 24       	eor	r1, r1
     18c:	1f be       	out	0x3f, r1	; 63
     18e:	cf e5       	ldi	r28, 0x5F	; 95
     190:	d8 e0       	ldi	r29, 0x08	; 8
     192:	de bf       	out	0x3e, r29	; 62
     194:	cd bf       	out	0x3d, r28	; 61

00000196 <__do_copy_data>:
     196:	11 e0       	ldi	r17, 0x01	; 1
     198:	a0 e6       	ldi	r26, 0x60	; 96
     19a:	b0 e0       	ldi	r27, 0x00	; 0
     19c:	ec ec       	ldi	r30, 0xCC	; 204
     19e:	f9 e1       	ldi	r31, 0x19	; 25
     1a0:	02 c0       	rjmp	.+4      	; 0x1a6 <__do_copy_data+0x10>
     1a2:	05 90       	lpm	r0, Z+
     1a4:	0d 92       	st	X+, r0
     1a6:	a6 3a       	cpi	r26, 0xA6	; 166
     1a8:	b1 07       	cpc	r27, r17
     1aa:	d9 f7       	brne	.-10     	; 0x1a2 <__do_copy_data+0xc>

000001ac <__do_clear_bss>:
     1ac:	22 e0       	ldi	r18, 0x02	; 2
     1ae:	a6 ea       	ldi	r26, 0xA6	; 166
     1b0:	b1 e0       	ldi	r27, 0x01	; 1
     1b2:	01 c0       	rjmp	.+2      	; 0x1b6 <.do_clear_bss_start>

000001b4 <.do_clear_bss_loop>:
     1b4:	1d 92       	st	X+, r1

000001b6 <.do_clear_bss_start>:
     1b6:	a4 3c       	cpi	r26, 0xC4	; 196
     1b8:	b2 07       	cpc	r27, r18
     1ba:	e1 f7       	brne	.-8      	; 0x1b4 <.do_clear_bss_loop>
     1bc:	0e 94 13 05 	call	0xa26	; 0xa26 <main>
     1c0:	0c 94 e4 0c 	jmp	0x19c8	; 0x19c8 <_exit>

000001c4 <__bad_interrupt>:
     1c4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001c8 <I2C_Init>:

#include "I2C_Master_H_file.h"								/* Include I2C header file */

void I2C_Init()												/* I2C initialize function */
{
	TWBR = BITRATE(TWSR = 0x00);							/* Get bit rate register value by formula */
     1c8:	11 b8       	out	0x01, r1	; 1
     1ca:	80 e2       	ldi	r24, 0x20	; 32
     1cc:	80 b9       	out	0x00, r24	; 0
     1ce:	08 95       	ret

000001d0 <LCD_Command>:
	while (str[i]!='\0')		/* Send string till null */
	{
		USART_TxChar(str[i]);
		i++;
	}
     1d0:	98 b3       	in	r25, 0x18	; 24
     1d2:	9f 70       	andi	r25, 0x0F	; 15
     1d4:	28 2f       	mov	r18, r24
     1d6:	20 7f       	andi	r18, 0xF0	; 240
     1d8:	92 2b       	or	r25, r18
     1da:	98 bb       	out	0x18, r25	; 24
     1dc:	98 b3       	in	r25, 0x18	; 24
     1de:	9e 7f       	andi	r25, 0xFE	; 254
     1e0:	98 bb       	out	0x18, r25	; 24
     1e2:	98 b3       	in	r25, 0x18	; 24
     1e4:	92 60       	ori	r25, 0x02	; 2
     1e6:	98 bb       	out	0x18, r25	; 24
     1e8:	32 e0       	ldi	r19, 0x02	; 2
     1ea:	3a 95       	dec	r19
     1ec:	f1 f7       	brne	.-4      	; 0x1ea <LCD_Command+0x1a>
     1ee:	00 c0       	rjmp	.+0      	; 0x1f0 <LCD_Command+0x20>
     1f0:	98 b3       	in	r25, 0x18	; 24
     1f2:	9d 7f       	andi	r25, 0xFD	; 253
     1f4:	98 bb       	out	0x18, r25	; 24
     1f6:	ef e8       	ldi	r30, 0x8F	; 143
     1f8:	f1 e0       	ldi	r31, 0x01	; 1
     1fa:	31 97       	sbiw	r30, 0x01	; 1
     1fc:	f1 f7       	brne	.-4      	; 0x1fa <LCD_Command+0x2a>
     1fe:	00 c0       	rjmp	.+0      	; 0x200 <LCD_Command+0x30>
     200:	00 00       	nop
     202:	28 b3       	in	r18, 0x18	; 24
     204:	f0 e1       	ldi	r31, 0x10	; 16
     206:	8f 9f       	mul	r24, r31
     208:	c0 01       	movw	r24, r0
     20a:	11 24       	eor	r1, r1
     20c:	92 2f       	mov	r25, r18
     20e:	9f 70       	andi	r25, 0x0F	; 15
     210:	89 2b       	or	r24, r25
     212:	88 bb       	out	0x18, r24	; 24
     214:	88 b3       	in	r24, 0x18	; 24
     216:	82 60       	ori	r24, 0x02	; 2
     218:	88 bb       	out	0x18, r24	; 24
     21a:	32 e0       	ldi	r19, 0x02	; 2
     21c:	3a 95       	dec	r19
     21e:	f1 f7       	brne	.-4      	; 0x21c <LCD_Command+0x4c>
     220:	00 c0       	rjmp	.+0      	; 0x222 <LCD_Command+0x52>
     222:	88 b3       	in	r24, 0x18	; 24
     224:	8d 7f       	andi	r24, 0xFD	; 253
     226:	88 bb       	out	0x18, r24	; 24
     228:	8f e9       	ldi	r24, 0x9F	; 159
     22a:	9f e0       	ldi	r25, 0x0F	; 15
     22c:	01 97       	sbiw	r24, 0x01	; 1
     22e:	f1 f7       	brne	.-4      	; 0x22c <LCD_Command+0x5c>
     230:	00 c0       	rjmp	.+0      	; 0x232 <LCD_Command+0x62>
     232:	00 00       	nop
     234:	08 95       	ret

00000236 <LCD_Char>:
     236:	98 b3       	in	r25, 0x18	; 24
     238:	9f 70       	andi	r25, 0x0F	; 15
     23a:	28 2f       	mov	r18, r24
     23c:	20 7f       	andi	r18, 0xF0	; 240
     23e:	92 2b       	or	r25, r18
     240:	98 bb       	out	0x18, r25	; 24
     242:	98 b3       	in	r25, 0x18	; 24
     244:	91 60       	ori	r25, 0x01	; 1
     246:	98 bb       	out	0x18, r25	; 24
     248:	98 b3       	in	r25, 0x18	; 24
     24a:	92 60       	ori	r25, 0x02	; 2
     24c:	98 bb       	out	0x18, r25	; 24
     24e:	32 e0       	ldi	r19, 0x02	; 2
     250:	3a 95       	dec	r19
     252:	f1 f7       	brne	.-4      	; 0x250 <LCD_Char+0x1a>
     254:	00 c0       	rjmp	.+0      	; 0x256 <LCD_Char+0x20>
     256:	98 b3       	in	r25, 0x18	; 24
     258:	9d 7f       	andi	r25, 0xFD	; 253
     25a:	98 bb       	out	0x18, r25	; 24
     25c:	ef e8       	ldi	r30, 0x8F	; 143
     25e:	f1 e0       	ldi	r31, 0x01	; 1
     260:	31 97       	sbiw	r30, 0x01	; 1
     262:	f1 f7       	brne	.-4      	; 0x260 <LCD_Char+0x2a>
     264:	00 c0       	rjmp	.+0      	; 0x266 <LCD_Char+0x30>
     266:	00 00       	nop
     268:	28 b3       	in	r18, 0x18	; 24
     26a:	f0 e1       	ldi	r31, 0x10	; 16
     26c:	8f 9f       	mul	r24, r31
     26e:	c0 01       	movw	r24, r0
     270:	11 24       	eor	r1, r1
     272:	92 2f       	mov	r25, r18
     274:	9f 70       	andi	r25, 0x0F	; 15
     276:	89 2b       	or	r24, r25
     278:	88 bb       	out	0x18, r24	; 24
     27a:	88 b3       	in	r24, 0x18	; 24
     27c:	82 60       	ori	r24, 0x02	; 2
     27e:	88 bb       	out	0x18, r24	; 24
     280:	32 e0       	ldi	r19, 0x02	; 2
     282:	3a 95       	dec	r19
     284:	f1 f7       	brne	.-4      	; 0x282 <LCD_Char+0x4c>
     286:	00 c0       	rjmp	.+0      	; 0x288 <LCD_Char+0x52>
     288:	88 b3       	in	r24, 0x18	; 24
     28a:	8d 7f       	andi	r24, 0xFD	; 253
     28c:	88 bb       	out	0x18, r24	; 24
     28e:	8f e9       	ldi	r24, 0x9F	; 159
     290:	9f e0       	ldi	r25, 0x0F	; 15
     292:	01 97       	sbiw	r24, 0x01	; 1
     294:	f1 f7       	brne	.-4      	; 0x292 <LCD_Char+0x5c>
     296:	00 c0       	rjmp	.+0      	; 0x298 <LCD_Char+0x62>
     298:	00 00       	nop
     29a:	08 95       	ret

0000029c <LCD_Init>:
     29c:	8f ef       	ldi	r24, 0xFF	; 255
     29e:	87 bb       	out	0x17, r24	; 23
     2a0:	8f e3       	ldi	r24, 0x3F	; 63
     2a2:	9c e9       	ldi	r25, 0x9C	; 156
     2a4:	01 97       	sbiw	r24, 0x01	; 1
     2a6:	f1 f7       	brne	.-4      	; 0x2a4 <LCD_Init+0x8>
     2a8:	00 c0       	rjmp	.+0      	; 0x2aa <LCD_Init+0xe>
     2aa:	00 00       	nop
     2ac:	83 e3       	ldi	r24, 0x33	; 51
     2ae:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <LCD_Command>
     2b2:	82 e3       	ldi	r24, 0x32	; 50
     2b4:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <LCD_Command>
     2b8:	88 e2       	ldi	r24, 0x28	; 40
     2ba:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <LCD_Command>
     2be:	8c e0       	ldi	r24, 0x0C	; 12
     2c0:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <LCD_Command>
     2c4:	86 e0       	ldi	r24, 0x06	; 6
     2c6:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <LCD_Command>
     2ca:	81 e0       	ldi	r24, 0x01	; 1
     2cc:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <LCD_Command>
     2d0:	8f e9       	ldi	r24, 0x9F	; 159
     2d2:	9f e0       	ldi	r25, 0x0F	; 15
     2d4:	01 97       	sbiw	r24, 0x01	; 1
     2d6:	f1 f7       	brne	.-4      	; 0x2d4 <LCD_Init+0x38>
     2d8:	00 c0       	rjmp	.+0      	; 0x2da <LCD_Init+0x3e>
     2da:	00 00       	nop
     2dc:	80 e8       	ldi	r24, 0x80	; 128
     2de:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <LCD_Command>
     2e2:	08 95       	ret

000002e4 <LCD_String>:
     2e4:	0f 93       	push	r16
     2e6:	1f 93       	push	r17
     2e8:	cf 93       	push	r28
     2ea:	df 93       	push	r29
     2ec:	8c 01       	movw	r16, r24
     2ee:	c0 e0       	ldi	r28, 0x00	; 0
     2f0:	d0 e0       	ldi	r29, 0x00	; 0
     2f2:	03 c0       	rjmp	.+6      	; 0x2fa <LCD_String+0x16>
     2f4:	0e 94 1b 01 	call	0x236	; 0x236 <LCD_Char>
     2f8:	21 96       	adiw	r28, 0x01	; 1
     2fa:	f8 01       	movw	r30, r16
     2fc:	ec 0f       	add	r30, r28
     2fe:	fd 1f       	adc	r31, r29
     300:	80 81       	ld	r24, Z
     302:	81 11       	cpse	r24, r1
     304:	f7 cf       	rjmp	.-18     	; 0x2f4 <LCD_String+0x10>
     306:	df 91       	pop	r29
     308:	cf 91       	pop	r28
     30a:	1f 91       	pop	r17
     30c:	0f 91       	pop	r16
     30e:	08 95       	ret

00000310 <LCD_String_xy>:
     310:	cf 93       	push	r28
     312:	df 93       	push	r29
     314:	ea 01       	movw	r28, r20
     316:	81 11       	cpse	r24, r1
     318:	08 c0       	rjmp	.+16     	; 0x32a <LCD_String_xy+0x1a>
     31a:	60 31       	cpi	r22, 0x10	; 16
     31c:	30 f4       	brcc	.+12     	; 0x32a <LCD_String_xy+0x1a>
     31e:	86 2f       	mov	r24, r22
     320:	8f 70       	andi	r24, 0x0F	; 15
     322:	80 68       	ori	r24, 0x80	; 128
     324:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <LCD_Command>
     328:	09 c0       	rjmp	.+18     	; 0x33c <LCD_String_xy+0x2c>
     32a:	81 30       	cpi	r24, 0x01	; 1
     32c:	39 f4       	brne	.+14     	; 0x33c <LCD_String_xy+0x2c>
     32e:	60 31       	cpi	r22, 0x10	; 16
     330:	28 f4       	brcc	.+10     	; 0x33c <LCD_String_xy+0x2c>
     332:	86 2f       	mov	r24, r22
     334:	8f 70       	andi	r24, 0x0F	; 15
     336:	80 6c       	ori	r24, 0xC0	; 192
     338:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <LCD_Command>
     33c:	ce 01       	movw	r24, r28
     33e:	0e 94 72 01 	call	0x2e4	; 0x2e4 <LCD_String>
     342:	df 91       	pop	r29
     344:	cf 91       	pop	r28
     346:	08 95       	ret

00000348 <LCD_Clear>:
     348:	81 e0       	ldi	r24, 0x01	; 1
     34a:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <LCD_Command>
     34e:	8f e9       	ldi	r24, 0x9F	; 159
     350:	9f e0       	ldi	r25, 0x0F	; 15
     352:	01 97       	sbiw	r24, 0x01	; 1
     354:	f1 f7       	brne	.-4      	; 0x352 <LCD_Clear+0xa>
     356:	00 c0       	rjmp	.+0      	; 0x358 <LCD_Clear+0x10>
     358:	00 00       	nop
     35a:	80 e8       	ldi	r24, 0x80	; 128
     35c:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <LCD_Command>
     360:	08 95       	ret

00000362 <ADC_Init>:
     362:	1a ba       	out	0x1a, r1	; 26
     364:	87 e8       	ldi	r24, 0x87	; 135
     366:	86 b9       	out	0x06, r24	; 6
     368:	80 e4       	ldi	r24, 0x40	; 64
     36a:	87 b9       	out	0x07, r24	; 7
     36c:	08 95       	ret

0000036e <ADC_Read>:
     36e:	97 b1       	in	r25, 0x07	; 7
     370:	8f 70       	andi	r24, 0x0F	; 15
     372:	98 2b       	or	r25, r24
     374:	97 b9       	out	0x07, r25	; 7
     376:	86 b1       	in	r24, 0x06	; 6
     378:	80 64       	ori	r24, 0x40	; 64
     37a:	86 b9       	out	0x06, r24	; 6
     37c:	34 9b       	sbis	0x06, 4	; 6
     37e:	fe cf       	rjmp	.-4      	; 0x37c <ADC_Read+0xe>
     380:	8a e1       	ldi	r24, 0x1A	; 26
     382:	8a 95       	dec	r24
     384:	f1 f7       	brne	.-4      	; 0x382 <ADC_Read+0x14>
     386:	00 c0       	rjmp	.+0      	; 0x388 <ADC_Read+0x1a>
     388:	24 b1       	in	r18, 0x04	; 4
     38a:	85 b1       	in	r24, 0x05	; 5
     38c:	90 e0       	ldi	r25, 0x00	; 0
     38e:	98 2f       	mov	r25, r24
     390:	88 27       	eor	r24, r24
     392:	82 0f       	add	r24, r18
     394:	91 1d       	adc	r25, r1
     396:	08 95       	ret

00000398 <PWM_init>:
     398:	89 e6       	ldi	r24, 0x69	; 105
     39a:	83 bf       	out	0x33, r24	; 51
     39c:	87 b3       	in	r24, 0x17	; 23
     39e:	88 60       	ori	r24, 0x08	; 8
     3a0:	87 bb       	out	0x17, r24	; 23
     3a2:	08 95       	ret

000003a4 <USART_Init>:
     3a4:	2a b1       	in	r18, 0x0a	; 10
     3a6:	28 69       	ori	r18, 0x98	; 152
     3a8:	2a b9       	out	0x0a, r18	; 10
     3aa:	20 b5       	in	r18, 0x20	; 32
     3ac:	26 68       	ori	r18, 0x86	; 134
     3ae:	20 bd       	out	0x20, r18	; 32
     3b0:	dc 01       	movw	r26, r24
     3b2:	cb 01       	movw	r24, r22
     3b4:	88 0f       	add	r24, r24
     3b6:	99 1f       	adc	r25, r25
     3b8:	aa 1f       	adc	r26, r26
     3ba:	bb 1f       	adc	r27, r27
     3bc:	88 0f       	add	r24, r24
     3be:	99 1f       	adc	r25, r25
     3c0:	aa 1f       	adc	r26, r26
     3c2:	bb 1f       	adc	r27, r27
     3c4:	9c 01       	movw	r18, r24
     3c6:	ad 01       	movw	r20, r26
     3c8:	22 0f       	add	r18, r18
     3ca:	33 1f       	adc	r19, r19
     3cc:	44 1f       	adc	r20, r20
     3ce:	55 1f       	adc	r21, r21
     3d0:	22 0f       	add	r18, r18
     3d2:	33 1f       	adc	r19, r19
     3d4:	44 1f       	adc	r20, r20
     3d6:	55 1f       	adc	r21, r21
     3d8:	60 e0       	ldi	r22, 0x00	; 0
     3da:	72 e1       	ldi	r23, 0x12	; 18
     3dc:	8a e7       	ldi	r24, 0x7A	; 122
     3de:	90 e0       	ldi	r25, 0x00	; 0
     3e0:	0e 94 69 08 	call	0x10d2	; 0x10d2 <__udivmodsi4>
     3e4:	8f ef       	ldi	r24, 0xFF	; 255
     3e6:	82 0f       	add	r24, r18
     3e8:	89 b9       	out	0x09, r24	; 9
     3ea:	da 01       	movw	r26, r20
     3ec:	c9 01       	movw	r24, r18
     3ee:	01 97       	sbiw	r24, 0x01	; 1
     3f0:	a1 09       	sbc	r26, r1
     3f2:	b1 09       	sbc	r27, r1
     3f4:	89 2f       	mov	r24, r25
     3f6:	9a 2f       	mov	r25, r26
     3f8:	ab 2f       	mov	r26, r27
     3fa:	bb 27       	eor	r27, r27
     3fc:	80 bd       	out	0x20, r24	; 32
     3fe:	08 95       	ret

00000400 <USART_TxChar>:
     400:	5d 9b       	sbis	0x0b, 5	; 11
     402:	fe cf       	rjmp	.-4      	; 0x400 <USART_TxChar>
     404:	8c b9       	out	0x0c, r24	; 12
     406:	08 95       	ret

00000408 <get_altitude>:
	sei(); //It is a macro that executes an assembler instruction to enable interrupts.

}

void get_altitude(uint16_t alt_pointer){  //unsigned 16-bit integer - integers between 0 and 65,535
	cli(); //Command Line Interface - CLIs accept as input commands that are entered by keyboard
     408:	f8 94       	cli
	uint8_t alt_index;  //unsigned 8-bit integer- integer has a range of 0 to 255
	uint8_t index = alt_pointer+1;
     40a:	8f 5f       	subi	r24, 0xFF	; 255
	alt_index=0;
     40c:	90 e0       	ldi	r25, 0x00	; 0
	/* parse Altitude in GGA string stored in buffer */
	for( ; GGA_Buffer[index]!=','; index++){
     40e:	07 c0       	rjmp	.+14     	; 0x41e <get_altitude+0x16>
		Altitude_Buffer[alt_index]= GGA_Buffer[index];
     410:	e9 2f       	mov	r30, r25
     412:	f0 e0       	ldi	r31, 0x00	; 0
     414:	e6 54       	subi	r30, 0x46	; 70
     416:	fd 4f       	sbci	r31, 0xFD	; 253
     418:	20 83       	st	Z, r18
		alt_index++;
     41a:	9f 5f       	subi	r25, 0xFF	; 255
	cli(); //Command Line Interface - CLIs accept as input commands that are entered by keyboard
	uint8_t alt_index;  //unsigned 8-bit integer- integer has a range of 0 to 255
	uint8_t index = alt_pointer+1;
	alt_index=0;
	/* parse Altitude in GGA string stored in buffer */
	for( ; GGA_Buffer[index]!=','; index++){
     41c:	8f 5f       	subi	r24, 0xFF	; 255
     41e:	48 2f       	mov	r20, r24
     420:	50 e0       	ldi	r21, 0x00	; 0
     422:	fa 01       	movw	r30, r20
     424:	e5 55       	subi	r30, 0x55	; 85
     426:	fe 4f       	sbci	r31, 0xFE	; 254
     428:	20 81       	ld	r18, Z
     42a:	2c 32       	cpi	r18, 0x2C	; 44
     42c:	89 f7       	brne	.-30     	; 0x410 <get_altitude+0x8>
		Altitude_Buffer[alt_index]= GGA_Buffer[index];
		alt_index++;
	}
	
	Altitude_Buffer[alt_index]   = GGA_Buffer[index+1];
     42e:	e9 2f       	mov	r30, r25
     430:	f0 e0       	ldi	r31, 0x00	; 0
     432:	da 01       	movw	r26, r20
     434:	a4 55       	subi	r26, 0x54	; 84
     436:	be 4f       	sbci	r27, 0xFE	; 254
     438:	8c 91       	ld	r24, X
     43a:	e6 54       	subi	r30, 0x46	; 70
     43c:	fd 4f       	sbci	r31, 0xFD	; 253
     43e:	80 83       	st	Z, r24
	sei();//It is a macro that executes an assembler instruction to enable interrupts.
     440:	78 94       	sei
     442:	08 95       	ret

00000444 <convert_to_degrees_lat>:
}


void convert_to_degrees_lat(char *raw){
     444:	8f 92       	push	r8
     446:	9f 92       	push	r9
     448:	af 92       	push	r10
     44a:	bf 92       	push	r11
     44c:	cf 92       	push	r12
     44e:	df 92       	push	r13
     450:	ef 92       	push	r14
     452:	ff 92       	push	r15
     454:	0f 93       	push	r16
     456:	1f 93       	push	r17
	float decimal_value,temp;
	
	int32_t degrees;
	
	float position;
	value = atof(raw); /* convert string into float for conversion */
     458:	0e 94 ab 08 	call	0x1156	; 0x1156 <atof>
	
	/* convert raw latitude/longitude into degree format */
	decimal_value = (value/100);
     45c:	20 e0       	ldi	r18, 0x00	; 0
     45e:	30 e0       	ldi	r19, 0x00	; 0
     460:	48 ec       	ldi	r20, 0xC8	; 200
     462:	52 e4       	ldi	r21, 0x42	; 66
     464:	0e 94 a2 06 	call	0xd44	; 0xd44 <__divsf3>
     468:	6b 01       	movw	r12, r22
     46a:	7c 01       	movw	r14, r24
	degrees = (int)(decimal_value);
     46c:	0e 94 14 07 	call	0xe28	; 0xe28 <__fixsfsi>
	temp = (decimal_value - (int)decimal_value)/0.6;
     470:	07 2e       	mov	r0, r23
     472:	00 0c       	add	r0, r0
     474:	88 0b       	sbc	r24, r24
     476:	99 0b       	sbc	r25, r25
     478:	0e 94 4c 07 	call	0xe98	; 0xe98 <__floatsisf>
     47c:	4b 01       	movw	r8, r22
     47e:	5c 01       	movw	r10, r24
     480:	9b 01       	movw	r18, r22
     482:	ac 01       	movw	r20, r24
     484:	c7 01       	movw	r24, r14
     486:	b6 01       	movw	r22, r12
     488:	0e 94 30 06 	call	0xc60	; 0xc60 <__subsf3>
     48c:	2a e9       	ldi	r18, 0x9A	; 154
     48e:	39 e9       	ldi	r19, 0x99	; 153
     490:	49 e1       	ldi	r20, 0x19	; 25
     492:	5f e3       	ldi	r21, 0x3F	; 63
     494:	0e 94 a2 06 	call	0xd44	; 0xd44 <__divsf3>
     498:	9b 01       	movw	r18, r22
     49a:	ac 01       	movw	r20, r24
	position = (float)degrees + temp;
     49c:	c5 01       	movw	r24, r10
     49e:	b4 01       	movw	r22, r8
     4a0:	0e 94 31 06 	call	0xc62	; 0xc62 <__addsf3>
	
	dtostrf(position, 6, 4, lat_degrees_buffer); /* dtostrf is a function that convert float value into string.Here the position is a float value and it convert as a string degree buffer variable*/
     4a4:	06 ea       	ldi	r16, 0xA6	; 166
     4a6:	12 e0       	ldi	r17, 0x02	; 2
     4a8:	24 e0       	ldi	r18, 0x04	; 4
     4aa:	46 e0       	ldi	r20, 0x06	; 6
     4ac:	0e 94 8b 08 	call	0x1116	; 0x1116 <dtostrf>
}
     4b0:	1f 91       	pop	r17
     4b2:	0f 91       	pop	r16
     4b4:	ff 90       	pop	r15
     4b6:	ef 90       	pop	r14
     4b8:	df 90       	pop	r13
     4ba:	cf 90       	pop	r12
     4bc:	bf 90       	pop	r11
     4be:	af 90       	pop	r10
     4c0:	9f 90       	pop	r9
     4c2:	8f 90       	pop	r8
     4c4:	08 95       	ret

000004c6 <get_latitude>:




void get_latitude(uint16_t lat_pointer){  //unsigned 16-bit integer - integers between 0 and 65,535
	cli(); //Command Line Interface - CLIs accept as input commands that are entered by keyboard
     4c6:	f8 94       	cli
	uint8_t lat_index; //unsigned 8-bit integer- integer has a range of 0 to 255
	uint8_t index = lat_pointer+1;//unsigned 8-bit integer- integer has a range of 0 to 255
     4c8:	8f 5f       	subi	r24, 0xFF	; 255
	lat_index=0;
     4ca:	90 e0       	ldi	r25, 0x00	; 0
	
	/* parse Latitude in GGA string stored in buffer */
	for(;GGA_Buffer[index]!=',';index++){
     4cc:	07 c0       	rjmp	.+14     	; 0x4dc <get_latitude+0x16>
		Latitude_Buffer[lat_index]= GGA_Buffer[index];
     4ce:	e9 2f       	mov	r30, r25
     4d0:	f0 e0       	ldi	r31, 0x00	; 0
     4d2:	e1 58       	subi	r30, 0x81	; 129
     4d4:	fd 4f       	sbci	r31, 0xFD	; 253
     4d6:	20 83       	st	Z, r18
		lat_index++;
     4d8:	9f 5f       	subi	r25, 0xFF	; 255
	uint8_t lat_index; //unsigned 8-bit integer- integer has a range of 0 to 255
	uint8_t index = lat_pointer+1;//unsigned 8-bit integer- integer has a range of 0 to 255
	lat_index=0;
	
	/* parse Latitude in GGA string stored in buffer */
	for(;GGA_Buffer[index]!=',';index++){
     4da:	8f 5f       	subi	r24, 0xFF	; 255
     4dc:	e8 2f       	mov	r30, r24
     4de:	f0 e0       	ldi	r31, 0x00	; 0
     4e0:	e5 55       	subi	r30, 0x55	; 85
     4e2:	fe 4f       	sbci	r31, 0xFE	; 254
     4e4:	20 81       	ld	r18, Z
     4e6:	2c 32       	cpi	r18, 0x2C	; 44
     4e8:	91 f7       	brne	.-28     	; 0x4ce <get_latitude+0x8>
		Latitude_Buffer[lat_index]= GGA_Buffer[index];
		lat_index++;
	}
	
	Latitude_Buffer[lat_index++] = GGA_Buffer[index++];
     4ea:	31 e0       	ldi	r19, 0x01	; 1
     4ec:	39 0f       	add	r19, r25
     4ee:	e9 2f       	mov	r30, r25
     4f0:	f0 e0       	ldi	r31, 0x00	; 0
     4f2:	8f 5f       	subi	r24, 0xFF	; 255
     4f4:	e1 58       	subi	r30, 0x81	; 129
     4f6:	fd 4f       	sbci	r31, 0xFD	; 253
     4f8:	20 83       	st	Z, r18
	Latitude_Buffer[lat_index]= GGA_Buffer[index];		/* get direction */
     4fa:	23 2f       	mov	r18, r19
     4fc:	30 e0       	ldi	r19, 0x00	; 0
     4fe:	e8 2f       	mov	r30, r24
     500:	f0 e0       	ldi	r31, 0x00	; 0
     502:	e5 55       	subi	r30, 0x55	; 85
     504:	fe 4f       	sbci	r31, 0xFE	; 254
     506:	80 81       	ld	r24, Z
     508:	f9 01       	movw	r30, r18
     50a:	e1 58       	subi	r30, 0x81	; 129
     50c:	fd 4f       	sbci	r31, 0xFD	; 253
     50e:	80 83       	st	Z, r24
	convert_to_degrees_lat(Latitude_Buffer);   // convert raw latitude into degree format and pass that value as string
     510:	8f e7       	ldi	r24, 0x7F	; 127
     512:	92 e0       	ldi	r25, 0x02	; 2
     514:	0e 94 22 02 	call	0x444	; 0x444 <convert_to_degrees_lat>
	sei(); //It is a macro that executes an assembler instruction to enable interrupts.
     518:	78 94       	sei
     51a:	08 95       	ret

0000051c <convert_to_degrees_long>:
	position = (float)degrees + temp;
	
	dtostrf(position, 6, 4, lat_degrees_buffer); /* dtostrf is a function that convert float value into string.Here the position is a float value and it convert as a string degree buffer variable*/
}

void convert_to_degrees_long(char *raw){
     51c:	8f 92       	push	r8
     51e:	9f 92       	push	r9
     520:	af 92       	push	r10
     522:	bf 92       	push	r11
     524:	cf 92       	push	r12
     526:	df 92       	push	r13
     528:	ef 92       	push	r14
     52a:	ff 92       	push	r15
     52c:	0f 93       	push	r16
     52e:	1f 93       	push	r17
	float decimal_value,temp;
	
	int32_t degrees;
	
	float position;
	value = atof(raw); /* convert string into float for conversion */
     530:	0e 94 ab 08 	call	0x1156	; 0x1156 <atof>
	
	/* convert raw latitude/longitude into degree format */
	decimal_value = (value/100);
     534:	20 e0       	ldi	r18, 0x00	; 0
     536:	30 e0       	ldi	r19, 0x00	; 0
     538:	48 ec       	ldi	r20, 0xC8	; 200
     53a:	52 e4       	ldi	r21, 0x42	; 66
     53c:	0e 94 a2 06 	call	0xd44	; 0xd44 <__divsf3>
     540:	6b 01       	movw	r12, r22
     542:	7c 01       	movw	r14, r24
	degrees = (int)(decimal_value);
     544:	0e 94 14 07 	call	0xe28	; 0xe28 <__fixsfsi>
	temp = (decimal_value - (int)decimal_value)/0.6;
     548:	07 2e       	mov	r0, r23
     54a:	00 0c       	add	r0, r0
     54c:	88 0b       	sbc	r24, r24
     54e:	99 0b       	sbc	r25, r25
     550:	0e 94 4c 07 	call	0xe98	; 0xe98 <__floatsisf>
     554:	4b 01       	movw	r8, r22
     556:	5c 01       	movw	r10, r24
     558:	9b 01       	movw	r18, r22
     55a:	ac 01       	movw	r20, r24
     55c:	c7 01       	movw	r24, r14
     55e:	b6 01       	movw	r22, r12
     560:	0e 94 30 06 	call	0xc60	; 0xc60 <__subsf3>
     564:	2a e9       	ldi	r18, 0x9A	; 154
     566:	39 e9       	ldi	r19, 0x99	; 153
     568:	49 e1       	ldi	r20, 0x19	; 25
     56a:	5f e3       	ldi	r21, 0x3F	; 63
     56c:	0e 94 a2 06 	call	0xd44	; 0xd44 <__divsf3>
     570:	9b 01       	movw	r18, r22
     572:	ac 01       	movw	r20, r24
	position = (float)degrees + temp;
     574:	c5 01       	movw	r24, r10
     576:	b4 01       	movw	r22, r8
     578:	0e 94 31 06 	call	0xc62	; 0xc62 <__addsf3>
	
	dtostrf(position, 6, 4, long_degrees_buffer); /* dtostrf is a function that convert float value into string.Here the position is a float value and it convert as a string degree buffer variable*/
     57c:	0d e4       	ldi	r16, 0x4D	; 77
     57e:	12 e0       	ldi	r17, 0x02	; 2
     580:	24 e0       	ldi	r18, 0x04	; 4
     582:	46 e0       	ldi	r20, 0x06	; 6
     584:	0e 94 8b 08 	call	0x1116	; 0x1116 <dtostrf>
}
     588:	1f 91       	pop	r17
     58a:	0f 91       	pop	r16
     58c:	ff 90       	pop	r15
     58e:	ef 90       	pop	r14
     590:	df 90       	pop	r13
     592:	cf 90       	pop	r12
     594:	bf 90       	pop	r11
     596:	af 90       	pop	r10
     598:	9f 90       	pop	r9
     59a:	8f 90       	pop	r8
     59c:	08 95       	ret

0000059e <get_longitude>:
	convert_to_degrees_lat(Latitude_Buffer);   // convert raw latitude into degree format and pass that value as string
	sei(); //It is a macro that executes an assembler instruction to enable interrupts.
}

void get_longitude(uint16_t long_pointer){
	cli(); //Command Line Interface - CLIs accept as input commands that are entered by keyboard
     59e:	f8 94       	cli
	uint8_t long_index;  //unsigned 8-bit integer- integer has a range of 0 to 255
	uint8_t index = long_pointer+1;
     5a0:	8f 5f       	subi	r24, 0xFF	; 255
	long_index=0;
     5a2:	90 e0       	ldi	r25, 0x00	; 0
	
	/* parse Longitude in GGA string stored in buffer */
	for( ; GGA_Buffer[index]!=','; index++){
     5a4:	07 c0       	rjmp	.+14     	; 0x5b4 <get_longitude+0x16>
		Longitude_Buffer[long_index]= GGA_Buffer[index];
     5a6:	e9 2f       	mov	r30, r25
     5a8:	f0 e0       	ldi	r31, 0x00	; 0
     5aa:	ef 59       	subi	r30, 0x9F	; 159
     5ac:	fd 4f       	sbci	r31, 0xFD	; 253
     5ae:	20 83       	st	Z, r18
		long_index++;
     5b0:	9f 5f       	subi	r25, 0xFF	; 255
	uint8_t long_index;  //unsigned 8-bit integer- integer has a range of 0 to 255
	uint8_t index = long_pointer+1;
	long_index=0;
	
	/* parse Longitude in GGA string stored in buffer */
	for( ; GGA_Buffer[index]!=','; index++){
     5b2:	8f 5f       	subi	r24, 0xFF	; 255
     5b4:	e8 2f       	mov	r30, r24
     5b6:	f0 e0       	ldi	r31, 0x00	; 0
     5b8:	e5 55       	subi	r30, 0x55	; 85
     5ba:	fe 4f       	sbci	r31, 0xFE	; 254
     5bc:	20 81       	ld	r18, Z
     5be:	2c 32       	cpi	r18, 0x2C	; 44
     5c0:	91 f7       	brne	.-28     	; 0x5a6 <get_longitude+0x8>
		Longitude_Buffer[long_index]= GGA_Buffer[index];
		long_index++;
	}
	
	Longitude_Buffer[long_index++] = GGA_Buffer[index++];
     5c2:	31 e0       	ldi	r19, 0x01	; 1
     5c4:	39 0f       	add	r19, r25
     5c6:	e9 2f       	mov	r30, r25
     5c8:	f0 e0       	ldi	r31, 0x00	; 0
     5ca:	8f 5f       	subi	r24, 0xFF	; 255
     5cc:	ef 59       	subi	r30, 0x9F	; 159
     5ce:	fd 4f       	sbci	r31, 0xFD	; 253
     5d0:	20 83       	st	Z, r18
	Longitude_Buffer[long_index]   = GGA_Buffer[index]; /* get direction */
     5d2:	23 2f       	mov	r18, r19
     5d4:	30 e0       	ldi	r19, 0x00	; 0
     5d6:	e8 2f       	mov	r30, r24
     5d8:	f0 e0       	ldi	r31, 0x00	; 0
     5da:	e5 55       	subi	r30, 0x55	; 85
     5dc:	fe 4f       	sbci	r31, 0xFE	; 254
     5de:	80 81       	ld	r24, Z
     5e0:	f9 01       	movw	r30, r18
     5e2:	ef 59       	subi	r30, 0x9F	; 159
     5e4:	fd 4f       	sbci	r31, 0xFD	; 253
     5e6:	80 83       	st	Z, r24
	convert_to_degrees_long(Longitude_Buffer); // convert raw longitude into degree format and pass that value as string
     5e8:	81 e6       	ldi	r24, 0x61	; 97
     5ea:	92 e0       	ldi	r25, 0x02	; 2
     5ec:	0e 94 8e 02 	call	0x51c	; 0x51c <convert_to_degrees_long>
	sei(); //It is a macro that executes an assembler instruction to enable interrupts.
     5f0:	78 94       	sei
     5f2:	08 95       	ret

000005f4 <__vector_13>:
	
	dtostrf(position, 6, 4, long_degrees_buffer); /* dtostrf is a function that convert float value into string.Here the position is a float value and it convert as a string degree buffer variable*/
}

ISR (USART_RXC_vect)
{
     5f4:	1f 92       	push	r1
     5f6:	0f 92       	push	r0
     5f8:	0f b6       	in	r0, 0x3f	; 63
     5fa:	0f 92       	push	r0
     5fc:	11 24       	eor	r1, r1
     5fe:	2f 93       	push	r18
     600:	3f 93       	push	r19
     602:	4f 93       	push	r20
     604:	5f 93       	push	r21
     606:	8f 93       	push	r24
     608:	9f 93       	push	r25
     60a:	ef 93       	push	r30
     60c:	ff 93       	push	r31
	uint8_t oldsrg = SREG;  //unsigned 8-bit integer- integer has a range of 0 to 255
     60e:	9f b7       	in	r25, 0x3f	; 63
	cli();					//Command Line Interface - CLIs accept as input commands that are entered by keyboard
     610:	f8 94       	cli
	char received_char = UDR;
     612:	8c b1       	in	r24, 0x0c	; 12
	
	if(received_char =='$'){                                                    /* check for '$' */
     614:	84 32       	cpi	r24, 0x24	; 36
     616:	59 f4       	brne	.+22     	; 0x62e <__vector_13+0x3a>
		GGA_Index = 0;
     618:	10 92 7b 02 	sts	0x027B, r1	; 0x80027b <GGA_Index+0x1>
     61c:	10 92 7a 02 	sts	0x027A, r1	; 0x80027a <GGA_Index>
		CommaCounter = 0;
     620:	10 92 79 02 	sts	0x0279, r1	; 0x800279 <CommaCounter+0x1>
     624:	10 92 78 02 	sts	0x0278, r1	; 0x800278 <CommaCounter>
		IsItGGAString = false;
     628:	10 92 a6 01 	sts	0x01A6, r1	; 0x8001a6 <__data_end>
     62c:	45 c0       	rjmp	.+138    	; 0x6b8 <__vector_13+0xc4>
	}
	else if(IsItGGAString == true){                                             /* if true save GGA info. into buffer */
     62e:	20 91 a6 01 	lds	r18, 0x01A6	; 0x8001a6 <__data_end>
     632:	22 23       	and	r18, r18
     634:	29 f1       	breq	.+74     	; 0x680 <__vector_13+0x8c>
		if(received_char == ',' ) GGA_Pointers[CommaCounter++] = GGA_Index;     /* store instances of ',' in buffer */
     636:	8c 32       	cpi	r24, 0x2C	; 44
     638:	99 f4       	brne	.+38     	; 0x660 <__vector_13+0x6c>
     63a:	20 91 78 02 	lds	r18, 0x0278	; 0x800278 <CommaCounter>
     63e:	30 91 79 02 	lds	r19, 0x0279	; 0x800279 <CommaCounter+0x1>
     642:	a9 01       	movw	r20, r18
     644:	4f 5f       	subi	r20, 0xFF	; 255
     646:	5f 4f       	sbci	r21, 0xFF	; 255
     648:	50 93 79 02 	sts	0x0279, r21	; 0x800279 <CommaCounter+0x1>
     64c:	40 93 78 02 	sts	0x0278, r20	; 0x800278 <CommaCounter>
     650:	40 91 7a 02 	lds	r20, 0x027A	; 0x80027a <GGA_Index>
     654:	50 91 7b 02 	lds	r21, 0x027B	; 0x80027b <GGA_Index+0x1>
     658:	f9 01       	movw	r30, r18
     65a:	ee 56       	subi	r30, 0x6E	; 110
     65c:	fd 4f       	sbci	r31, 0xFD	; 253
     65e:	40 83       	st	Z, r20
		GGA_Buffer[GGA_Index++] = received_char;
     660:	20 91 7a 02 	lds	r18, 0x027A	; 0x80027a <GGA_Index>
     664:	30 91 7b 02 	lds	r19, 0x027B	; 0x80027b <GGA_Index+0x1>
     668:	a9 01       	movw	r20, r18
     66a:	4f 5f       	subi	r20, 0xFF	; 255
     66c:	5f 4f       	sbci	r21, 0xFF	; 255
     66e:	50 93 7b 02 	sts	0x027B, r21	; 0x80027b <GGA_Index+0x1>
     672:	40 93 7a 02 	sts	0x027A, r20	; 0x80027a <GGA_Index>
     676:	f9 01       	movw	r30, r18
     678:	e5 55       	subi	r30, 0x55	; 85
     67a:	fe 4f       	sbci	r31, 0xFE	; 254
     67c:	80 83       	st	Z, r24
     67e:	1c c0       	rjmp	.+56     	; 0x6b8 <__vector_13+0xc4>
	}
	else if(GGA_CODE[0] == 'G' && GGA_CODE[1] == 'G' && GGA_CODE[2] == 'A'){    /* check for GGA string */
     680:	20 91 7c 02 	lds	r18, 0x027C	; 0x80027c <GGA_CODE>
     684:	27 34       	cpi	r18, 0x47	; 71
     686:	89 f4       	brne	.+34     	; 0x6aa <__vector_13+0xb6>
     688:	20 91 7d 02 	lds	r18, 0x027D	; 0x80027d <GGA_CODE+0x1>
     68c:	27 34       	cpi	r18, 0x47	; 71
     68e:	69 f4       	brne	.+26     	; 0x6aa <__vector_13+0xb6>
     690:	20 91 7e 02 	lds	r18, 0x027E	; 0x80027e <GGA_CODE+0x2>
     694:	21 34       	cpi	r18, 0x41	; 65
     696:	49 f4       	brne	.+18     	; 0x6aa <__vector_13+0xb6>
		IsItGGAString = true;
     698:	81 e0       	ldi	r24, 0x01	; 1
     69a:	80 93 a6 01 	sts	0x01A6, r24	; 0x8001a6 <__data_end>
		GGA_CODE[0] = 0; GGA_CODE[1] = 0; GGA_CODE[2] = 0;
     69e:	ec e7       	ldi	r30, 0x7C	; 124
     6a0:	f2 e0       	ldi	r31, 0x02	; 2
     6a2:	10 82       	st	Z, r1
     6a4:	11 82       	std	Z+1, r1	; 0x01
     6a6:	12 82       	std	Z+2, r1	; 0x02
     6a8:	07 c0       	rjmp	.+14     	; 0x6b8 <__vector_13+0xc4>
	}
	else{
		GGA_CODE[0] = GGA_CODE[1];  GGA_CODE[1] = GGA_CODE[2]; GGA_CODE[2] = received_char;
     6aa:	ec e7       	ldi	r30, 0x7C	; 124
     6ac:	f2 e0       	ldi	r31, 0x02	; 2
     6ae:	21 81       	ldd	r18, Z+1	; 0x01
     6b0:	20 83       	st	Z, r18
     6b2:	22 81       	ldd	r18, Z+2	; 0x02
     6b4:	21 83       	std	Z+1, r18	; 0x01
     6b6:	82 83       	std	Z+2, r24	; 0x02
	}
	SREG = oldsrg;
     6b8:	9f bf       	out	0x3f, r25	; 63
}
     6ba:	ff 91       	pop	r31
     6bc:	ef 91       	pop	r30
     6be:	9f 91       	pop	r25
     6c0:	8f 91       	pop	r24
     6c2:	5f 91       	pop	r21
     6c4:	4f 91       	pop	r20
     6c6:	3f 91       	pop	r19
     6c8:	2f 91       	pop	r18
     6ca:	0f 90       	pop	r0
     6cc:	0f be       	out	0x3f, r0	; 63
     6ce:	0f 90       	pop	r0
     6d0:	1f 90       	pop	r1
     6d2:	18 95       	reti

000006d4 <sendMessage>:

void sendMessage(char* msg,char* lat,char* lngtd,char* altitude){
     6d4:	cf 92       	push	r12
     6d6:	df 92       	push	r13
     6d8:	ef 92       	push	r14
     6da:	ff 92       	push	r15
     6dc:	0f 93       	push	r16
     6de:	1f 93       	push	r17
     6e0:	cf 93       	push	r28
     6e2:	df 93       	push	r29
     6e4:	cd b7       	in	r28, 0x3d	; 61
     6e6:	de b7       	in	r29, 0x3e	; 62
     6e8:	a3 97       	sbiw	r28, 0x23	; 35
     6ea:	0f b6       	in	r0, 0x3f	; 63
     6ec:	f8 94       	cli
     6ee:	de bf       	out	0x3e, r29	; 62
     6f0:	0f be       	out	0x3f, r0	; 63
     6f2:	cd bf       	out	0x3d, r28	; 61
     6f4:	7c 01       	movw	r14, r24
     6f6:	6a 01       	movw	r12, r20
     6f8:	89 01       	movw	r16, r18
	unsigned char cmd_1[4]="AT";
     6fa:	81 e4       	ldi	r24, 0x41	; 65
     6fc:	94 e5       	ldi	r25, 0x54	; 84
     6fe:	9a 83       	std	Y+2, r25	; 0x02
     700:	89 83       	std	Y+1, r24	; 0x01
     702:	1c 82       	std	Y+4, r1	; 0x04
     704:	1b 82       	std	Y+3, r1	; 0x03
	unsigned char cmd_2[10]="AT+CMGF=1";
     706:	8a e0       	ldi	r24, 0x0A	; 10
     708:	e7 ec       	ldi	r30, 0xC7	; 199
     70a:	f0 e0       	ldi	r31, 0x00	; 0
     70c:	de 01       	movw	r26, r28
     70e:	15 96       	adiw	r26, 0x05	; 5
     710:	01 90       	ld	r0, Z+
     712:	0d 92       	st	X+, r0
     714:	8a 95       	dec	r24
     716:	e1 f7       	brne	.-8      	; 0x710 <sendMessage+0x3c>
	unsigned char cmd_3[10]="AT+CMGS=";
     718:	89 e0       	ldi	r24, 0x09	; 9
     71a:	e0 e6       	ldi	r30, 0x60	; 96
     71c:	f0 e0       	ldi	r31, 0x00	; 0
     71e:	de 01       	movw	r26, r28
     720:	1f 96       	adiw	r26, 0x0f	; 15
     722:	01 90       	ld	r0, Z+
     724:	0d 92       	st	X+, r0
     726:	8a 95       	dec	r24
     728:	e1 f7       	brne	.-8      	; 0x722 <sendMessage+0x4e>
     72a:	18 8e       	std	Y+24, r1	; 0x18
	char* cmd_4 = msg;
	strcat(cmd_4,"\r   Location\r   Latitude : ");
     72c:	d7 01       	movw	r26, r14
     72e:	0d 90       	ld	r0, X+
     730:	00 20       	and	r0, r0
     732:	e9 f7       	brne	.-6      	; 0x72e <sendMessage+0x5a>
     734:	11 97       	sbiw	r26, 0x01	; 1
     736:	8c e1       	ldi	r24, 0x1C	; 28
     738:	ea e6       	ldi	r30, 0x6A	; 106
     73a:	f0 e0       	ldi	r31, 0x00	; 0
     73c:	01 90       	ld	r0, Z+
     73e:	0d 92       	st	X+, r0
     740:	8a 95       	dec	r24
     742:	e1 f7       	brne	.-8      	; 0x73c <sendMessage+0x68>
	strcat(cmd_4,lat);
     744:	c7 01       	movw	r24, r14
     746:	0e 94 af 08 	call	0x115e	; 0x115e <strcat>
	strcat(cmd_4,"\r   Longitude : ");
     74a:	d7 01       	movw	r26, r14
     74c:	0d 90       	ld	r0, X+
     74e:	00 20       	and	r0, r0
     750:	e9 f7       	brne	.-6      	; 0x74c <sendMessage+0x78>
     752:	11 97       	sbiw	r26, 0x01	; 1
     754:	81 e1       	ldi	r24, 0x11	; 17
     756:	e6 e8       	ldi	r30, 0x86	; 134
     758:	f0 e0       	ldi	r31, 0x00	; 0
     75a:	01 90       	ld	r0, Z+
     75c:	0d 92       	st	X+, r0
     75e:	8a 95       	dec	r24
     760:	e1 f7       	brne	.-8      	; 0x75a <sendMessage+0x86>
	strcat(cmd_4,lngtd);
     762:	b6 01       	movw	r22, r12
     764:	c7 01       	movw	r24, r14
     766:	0e 94 af 08 	call	0x115e	; 0x115e <strcat>
	strcat(cmd_4,"\r   Altitude : ");
     76a:	d7 01       	movw	r26, r14
     76c:	0d 90       	ld	r0, X+
     76e:	00 20       	and	r0, r0
     770:	e9 f7       	brne	.-6      	; 0x76c <sendMessage+0x98>
     772:	11 97       	sbiw	r26, 0x01	; 1
     774:	80 e1       	ldi	r24, 0x10	; 16
     776:	e7 e9       	ldi	r30, 0x97	; 151
     778:	f0 e0       	ldi	r31, 0x00	; 0
     77a:	01 90       	ld	r0, Z+
     77c:	0d 92       	st	X+, r0
     77e:	8a 95       	dec	r24
     780:	e1 f7       	brne	.-8      	; 0x77a <sendMessage+0xa6>
	strcat(cmd_4,altitude);
     782:	b8 01       	movw	r22, r16
     784:	c7 01       	movw	r24, r14
     786:	0e 94 af 08 	call	0x115e	; 0x115e <strcat>
	unsigned char num[11] = "0771234567";
     78a:	8b e0       	ldi	r24, 0x0B	; 11
     78c:	e1 ed       	ldi	r30, 0xD1	; 209
     78e:	f0 e0       	ldi	r31, 0x00	; 0
     790:	de 01       	movw	r26, r28
     792:	59 96       	adiw	r26, 0x19	; 25
     794:	01 90       	ld	r0, Z+
     796:	0d 92       	st	X+, r0
     798:	8a 95       	dec	r24
     79a:	e1 f7       	brne	.-8      	; 0x794 <sendMessage+0xc0>
	LCD_Clear();
     79c:	0e 94 a4 01 	call	0x348	; 0x348 <LCD_Clear>
	LCD_String_xy(1,0,"Message");
     7a0:	47 ea       	ldi	r20, 0xA7	; 167
     7a2:	50 e0       	ldi	r21, 0x00	; 0
     7a4:	60 e0       	ldi	r22, 0x00	; 0
     7a6:	81 e0       	ldi	r24, 0x01	; 1
     7a8:	0e 94 88 01 	call	0x310	; 0x310 <LCD_String_xy>
	LCD_Command(0xc0);
     7ac:	80 ec       	ldi	r24, 0xC0	; 192
     7ae:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <LCD_Command>
	LCD_String_xy(2,3,"Forwarding");
     7b2:	4f ea       	ldi	r20, 0xAF	; 175
     7b4:	50 e0       	ldi	r21, 0x00	; 0
     7b6:	63 e0       	ldi	r22, 0x03	; 3
     7b8:	82 e0       	ldi	r24, 0x02	; 2
     7ba:	0e 94 88 01 	call	0x310	; 0x310 <LCD_String_xy>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     7be:	2f ef       	ldi	r18, 0xFF	; 255
     7c0:	84 e3       	ldi	r24, 0x34	; 52
     7c2:	9c e0       	ldi	r25, 0x0C	; 12
     7c4:	21 50       	subi	r18, 0x01	; 1
     7c6:	80 40       	sbci	r24, 0x00	; 0
     7c8:	90 40       	sbci	r25, 0x00	; 0
     7ca:	e1 f7       	brne	.-8      	; 0x7c4 <sendMessage+0xf0>
     7cc:	00 c0       	rjmp	.+0      	; 0x7ce <sendMessage+0xfa>
     7ce:	00 00       	nop
	_delay_ms(500);
	for (int i=0;cmd_1[i]!='\0';i++) /*checking communication*/
     7d0:	00 e0       	ldi	r16, 0x00	; 0
     7d2:	10 e0       	ldi	r17, 0x00	; 0
     7d4:	0a c0       	rjmp	.+20     	; 0x7ea <sendMessage+0x116>
	{
		USART_TxChar(cmd_1[i]);
     7d6:	0e 94 00 02 	call	0x400	; 0x400 <USART_TxChar>
     7da:	8f e0       	ldi	r24, 0x0F	; 15
     7dc:	97 e2       	ldi	r25, 0x27	; 39
     7de:	01 97       	sbiw	r24, 0x01	; 1
     7e0:	f1 f7       	brne	.-4      	; 0x7de <sendMessage+0x10a>
     7e2:	00 c0       	rjmp	.+0      	; 0x7e4 <sendMessage+0x110>
     7e4:	00 00       	nop
	LCD_Clear();
	LCD_String_xy(1,0,"Message");
	LCD_Command(0xc0);
	LCD_String_xy(2,3,"Forwarding");
	_delay_ms(500);
	for (int i=0;cmd_1[i]!='\0';i++) /*checking communication*/
     7e6:	0f 5f       	subi	r16, 0xFF	; 255
     7e8:	1f 4f       	sbci	r17, 0xFF	; 255
     7ea:	e1 e0       	ldi	r30, 0x01	; 1
     7ec:	f0 e0       	ldi	r31, 0x00	; 0
     7ee:	ec 0f       	add	r30, r28
     7f0:	fd 1f       	adc	r31, r29
     7f2:	e0 0f       	add	r30, r16
     7f4:	f1 1f       	adc	r31, r17
     7f6:	80 81       	ld	r24, Z
     7f8:	81 11       	cpse	r24, r1
     7fa:	ed cf       	rjmp	.-38     	; 0x7d6 <sendMessage+0x102>
	{
		USART_TxChar(cmd_1[i]);
		_delay_ms(5);
	}
	USART_TxChar('\r'); /*carriage return ---> begining from the first line without going to next line*/
     7fc:	8d e0       	ldi	r24, 0x0D	; 13
     7fe:	0e 94 00 02 	call	0x400	; 0x400 <USART_TxChar>
     802:	8f e0       	ldi	r24, 0x0F	; 15
     804:	97 e2       	ldi	r25, 0x27	; 39
     806:	01 97       	sbiw	r24, 0x01	; 1
     808:	f1 f7       	brne	.-4      	; 0x806 <__DATA_REGION_LENGTH__+0x6>
     80a:	00 c0       	rjmp	.+0      	; 0x80c <__DATA_REGION_LENGTH__+0xc>
     80c:	00 00       	nop
	_delay_ms(5);
	
	for (int i=0;cmd_2[i]!='\0';i++) /* set the operating mode to SMS text mode*/
     80e:	00 e0       	ldi	r16, 0x00	; 0
     810:	10 e0       	ldi	r17, 0x00	; 0
     812:	0a c0       	rjmp	.+20     	; 0x828 <__DATA_REGION_LENGTH__+0x28>
	{
		USART_TxChar(cmd_2[i]);
     814:	0e 94 00 02 	call	0x400	; 0x400 <USART_TxChar>
     818:	8f e0       	ldi	r24, 0x0F	; 15
     81a:	97 e2       	ldi	r25, 0x27	; 39
     81c:	01 97       	sbiw	r24, 0x01	; 1
     81e:	f1 f7       	brne	.-4      	; 0x81c <__DATA_REGION_LENGTH__+0x1c>
     820:	00 c0       	rjmp	.+0      	; 0x822 <__DATA_REGION_LENGTH__+0x22>
     822:	00 00       	nop
		_delay_ms(5);
	}
	USART_TxChar('\r'); /*carriage return ---> begining from the first line without going to next line*/
	_delay_ms(5);
	
	for (int i=0;cmd_2[i]!='\0';i++) /* set the operating mode to SMS text mode*/
     824:	0f 5f       	subi	r16, 0xFF	; 255
     826:	1f 4f       	sbci	r17, 0xFF	; 255
     828:	e5 e0       	ldi	r30, 0x05	; 5
     82a:	f0 e0       	ldi	r31, 0x00	; 0
     82c:	ec 0f       	add	r30, r28
     82e:	fd 1f       	adc	r31, r29
     830:	e0 0f       	add	r30, r16
     832:	f1 1f       	adc	r31, r17
     834:	80 81       	ld	r24, Z
     836:	81 11       	cpse	r24, r1
     838:	ed cf       	rjmp	.-38     	; 0x814 <__DATA_REGION_LENGTH__+0x14>
	{
		USART_TxChar(cmd_2[i]);
		_delay_ms(5);
	}
	USART_TxChar('\r');
     83a:	8d e0       	ldi	r24, 0x0D	; 13
     83c:	0e 94 00 02 	call	0x400	; 0x400 <USART_TxChar>
     840:	8f e0       	ldi	r24, 0x0F	; 15
     842:	97 e2       	ldi	r25, 0x27	; 39
     844:	01 97       	sbiw	r24, 0x01	; 1
     846:	f1 f7       	brne	.-4      	; 0x844 <__DATA_REGION_LENGTH__+0x44>
     848:	00 c0       	rjmp	.+0      	; 0x84a <__DATA_REGION_LENGTH__+0x4a>
     84a:	00 00       	nop
	_delay_ms(5);
	
	for (int i=0;cmd_3[i]!='\0';i++) /* send SMS in text mode*/
     84c:	00 e0       	ldi	r16, 0x00	; 0
     84e:	10 e0       	ldi	r17, 0x00	; 0
     850:	0a c0       	rjmp	.+20     	; 0x866 <__stack+0x7>
	{
		USART_TxChar(cmd_3[i]);
     852:	0e 94 00 02 	call	0x400	; 0x400 <USART_TxChar>
     856:	8f e0       	ldi	r24, 0x0F	; 15
     858:	97 e2       	ldi	r25, 0x27	; 39
     85a:	01 97       	sbiw	r24, 0x01	; 1
     85c:	f1 f7       	brne	.-4      	; 0x85a <__DATA_REGION_LENGTH__+0x5a>
     85e:	00 c0       	rjmp	.+0      	; 0x860 <__stack+0x1>
     860:	00 00       	nop
		_delay_ms(5);
	}
	USART_TxChar('\r');
	_delay_ms(5);
	
	for (int i=0;cmd_3[i]!='\0';i++) /* send SMS in text mode*/
     862:	0f 5f       	subi	r16, 0xFF	; 255
     864:	1f 4f       	sbci	r17, 0xFF	; 255
     866:	ef e0       	ldi	r30, 0x0F	; 15
     868:	f0 e0       	ldi	r31, 0x00	; 0
     86a:	ec 0f       	add	r30, r28
     86c:	fd 1f       	adc	r31, r29
     86e:	e0 0f       	add	r30, r16
     870:	f1 1f       	adc	r31, r17
     872:	80 81       	ld	r24, Z
     874:	81 11       	cpse	r24, r1
     876:	ed cf       	rjmp	.-38     	; 0x852 <__DATA_REGION_LENGTH__+0x52>
	{
		USART_TxChar(cmd_3[i]);
		_delay_ms(5);
	}
	UDR='"';
     878:	82 e2       	ldi	r24, 0x22	; 34
     87a:	8c b9       	out	0x0c, r24	; 12
     87c:	9f ef       	ldi	r25, 0xFF	; 255
     87e:	20 e7       	ldi	r18, 0x70	; 112
     880:	82 e0       	ldi	r24, 0x02	; 2
     882:	91 50       	subi	r25, 0x01	; 1
     884:	20 40       	sbci	r18, 0x00	; 0
     886:	80 40       	sbci	r24, 0x00	; 0
     888:	e1 f7       	brne	.-8      	; 0x882 <__stack+0x23>
     88a:	00 c0       	rjmp	.+0      	; 0x88c <__stack+0x2d>
     88c:	00 00       	nop
	_delay_ms(100);
	for (int i=0;num[i]!='\0';i++) /* SMS to be sent */
     88e:	00 e0       	ldi	r16, 0x00	; 0
     890:	10 e0       	ldi	r17, 0x00	; 0
     892:	0a c0       	rjmp	.+20     	; 0x8a8 <__stack+0x49>
	{
		USART_TxChar(num[i]);
     894:	0e 94 00 02 	call	0x400	; 0x400 <USART_TxChar>
     898:	8f e0       	ldi	r24, 0x0F	; 15
     89a:	97 e2       	ldi	r25, 0x27	; 39
     89c:	01 97       	sbiw	r24, 0x01	; 1
     89e:	f1 f7       	brne	.-4      	; 0x89c <__stack+0x3d>
     8a0:	00 c0       	rjmp	.+0      	; 0x8a2 <__stack+0x43>
     8a2:	00 00       	nop
		USART_TxChar(cmd_3[i]);
		_delay_ms(5);
	}
	UDR='"';
	_delay_ms(100);
	for (int i=0;num[i]!='\0';i++) /* SMS to be sent */
     8a4:	0f 5f       	subi	r16, 0xFF	; 255
     8a6:	1f 4f       	sbci	r17, 0xFF	; 255
     8a8:	e9 e1       	ldi	r30, 0x19	; 25
     8aa:	f0 e0       	ldi	r31, 0x00	; 0
     8ac:	ec 0f       	add	r30, r28
     8ae:	fd 1f       	adc	r31, r29
     8b0:	e0 0f       	add	r30, r16
     8b2:	f1 1f       	adc	r31, r17
     8b4:	80 81       	ld	r24, Z
     8b6:	81 11       	cpse	r24, r1
     8b8:	ed cf       	rjmp	.-38     	; 0x894 <__stack+0x35>
	{
		USART_TxChar(num[i]);
		_delay_ms(5);
	}
	UDR='"';
     8ba:	82 e2       	ldi	r24, 0x22	; 34
     8bc:	8c b9       	out	0x0c, r24	; 12
     8be:	8f e0       	ldi	r24, 0x0F	; 15
     8c0:	97 e2       	ldi	r25, 0x27	; 39
     8c2:	01 97       	sbiw	r24, 0x01	; 1
     8c4:	f1 f7       	brne	.-4      	; 0x8c2 <__stack+0x63>
     8c6:	00 c0       	rjmp	.+0      	; 0x8c8 <__stack+0x69>
     8c8:	00 00       	nop
	_delay_ms(5);
	UDR='\r';
     8ca:	8d e0       	ldi	r24, 0x0D	; 13
     8cc:	8c b9       	out	0x0c, r24	; 12
     8ce:	8f e0       	ldi	r24, 0x0F	; 15
     8d0:	97 e2       	ldi	r25, 0x27	; 39
     8d2:	01 97       	sbiw	r24, 0x01	; 1
     8d4:	f1 f7       	brne	.-4      	; 0x8d2 <__stack+0x73>
     8d6:	00 c0       	rjmp	.+0      	; 0x8d8 <__stack+0x79>
     8d8:	00 00       	nop
	_delay_ms(5);

	for (int i=0;cmd_4[i]!='\0';i++) /* message */
     8da:	00 e0       	ldi	r16, 0x00	; 0
     8dc:	10 e0       	ldi	r17, 0x00	; 0
     8de:	0a c0       	rjmp	.+20     	; 0x8f4 <__stack+0x95>
	{
		USART_TxChar(cmd_4[i]);
     8e0:	0e 94 00 02 	call	0x400	; 0x400 <USART_TxChar>
     8e4:	8f e0       	ldi	r24, 0x0F	; 15
     8e6:	97 e2       	ldi	r25, 0x27	; 39
     8e8:	01 97       	sbiw	r24, 0x01	; 1
     8ea:	f1 f7       	brne	.-4      	; 0x8e8 <__stack+0x89>
     8ec:	00 c0       	rjmp	.+0      	; 0x8ee <__stack+0x8f>
     8ee:	00 00       	nop
	UDR='"';
	_delay_ms(5);
	UDR='\r';
	_delay_ms(5);

	for (int i=0;cmd_4[i]!='\0';i++) /* message */
     8f0:	0f 5f       	subi	r16, 0xFF	; 255
     8f2:	1f 4f       	sbci	r17, 0xFF	; 255
     8f4:	f7 01       	movw	r30, r14
     8f6:	e0 0f       	add	r30, r16
     8f8:	f1 1f       	adc	r31, r17
     8fa:	80 81       	ld	r24, Z
     8fc:	81 11       	cpse	r24, r1
     8fe:	f0 cf       	rjmp	.-32     	; 0x8e0 <__stack+0x81>
     900:	9f ef       	ldi	r25, 0xFF	; 255
     902:	21 ee       	ldi	r18, 0xE1	; 225
     904:	84 e0       	ldi	r24, 0x04	; 4
     906:	91 50       	subi	r25, 0x01	; 1
     908:	20 40       	sbci	r18, 0x00	; 0
     90a:	80 40       	sbci	r24, 0x00	; 0
     90c:	e1 f7       	brne	.-8      	; 0x906 <__stack+0xa7>
     90e:	00 c0       	rjmp	.+0      	; 0x910 <__stack+0xb1>
     910:	00 00       	nop
	{
		USART_TxChar(cmd_4[i]);
		_delay_ms(5);
	}
	_delay_ms(200);
	LCD_Clear();
     912:	0e 94 a4 01 	call	0x348	; 0x348 <LCD_Clear>
	LCD_String_xy(1,0,"Message sent");
     916:	4a eb       	ldi	r20, 0xBA	; 186
     918:	50 e0       	ldi	r21, 0x00	; 0
     91a:	60 e0       	ldi	r22, 0x00	; 0
     91c:	81 e0       	ldi	r24, 0x01	; 1
     91e:	0e 94 88 01 	call	0x310	; 0x310 <LCD_String_xy>
     922:	9f ef       	ldi	r25, 0xFF	; 255
     924:	22 e5       	ldi	r18, 0x52	; 82
     926:	87 e0       	ldi	r24, 0x07	; 7
     928:	91 50       	subi	r25, 0x01	; 1
     92a:	20 40       	sbci	r18, 0x00	; 0
     92c:	80 40       	sbci	r24, 0x00	; 0
     92e:	e1 f7       	brne	.-8      	; 0x928 <__stack+0xc9>
     930:	00 c0       	rjmp	.+0      	; 0x932 <__stack+0xd3>
     932:	00 00       	nop
	_delay_ms(300);
	LCD_Clear();
     934:	0e 94 a4 01 	call	0x348	; 0x348 <LCD_Clear>
     938:	a3 96       	adiw	r28, 0x23	; 35
     93a:	0f b6       	in	r0, 0x3f	; 63
     93c:	f8 94       	cli
     93e:	de bf       	out	0x3e, r29	; 62
     940:	0f be       	out	0x3f, r0	; 63
     942:	cd bf       	out	0x3d, r28	; 61
     944:	df 91       	pop	r29
     946:	cf 91       	pop	r28
     948:	1f 91       	pop	r17
     94a:	0f 91       	pop	r16
     94c:	ff 90       	pop	r15
     94e:	ef 90       	pop	r14
     950:	df 90       	pop	r13
     952:	cf 90       	pop	r12
     954:	08 95       	ret

00000956 <ringAlarm>:
	}//while end
}//main end


void ringAlarm(){
	portHigh(PORTD,buzzer);//buzzer
     956:	82 b3       	in	r24, 0x12	; 18
     958:	80 68       	ori	r24, 0x80	; 128
     95a:	82 bb       	out	0x12, r24	; 18
     95c:	08 95       	ret

0000095e <stopAlarm>:
}
void stopAlarm(){
	portLow(PORTD,buzzer);
     95e:	82 b3       	in	r24, 0x12	; 18
     960:	8f 77       	andi	r24, 0x7F	; 127
     962:	82 bb       	out	0x12, r24	; 18
     964:	08 95       	ret

00000966 <onHazardLight>:
}
void onHazardLight(){
	portHigh(PORTD,led);
     966:	82 b3       	in	r24, 0x12	; 18
     968:	80 64       	ori	r24, 0x40	; 64
     96a:	82 bb       	out	0x12, r24	; 18
     96c:	08 95       	ret

0000096e <offHazardLight>:
}
void offHazardLight(){
	portLow(PORTD,led);
     96e:	82 b3       	in	r24, 0x12	; 18
     970:	8f 7b       	andi	r24, 0xBF	; 191
     972:	82 bb       	out	0x12, r24	; 18
     974:	08 95       	ret

00000976 <playRadio>:
}
void playRadio(){
	portHigh(PORTD,musicSystem);
     976:	82 b3       	in	r24, 0x12	; 18
     978:	80 62       	ori	r24, 0x20	; 32
     97a:	82 bb       	out	0x12, r24	; 18
     97c:	08 95       	ret

0000097e <isDriverSleepingIR>:
}
int isDriverSleepingIR(){
     97e:	cf 93       	push	r28
     980:	df 93       	push	r29
	LCD_Clear();
     982:	0e 94 a4 01 	call	0x348	; 0x348 <LCD_Clear>
	LCD_String("Checking Eyes");
     986:	8c ed       	ldi	r24, 0xDC	; 220
     988:	90 e0       	ldi	r25, 0x00	; 0
     98a:	0e 94 72 01 	call	0x2e4	; 0x2e4 <LCD_String>
	//int timeInterval=40; real value due to error
	int timeInterval=5;
	int flag=0;
	for(int i=1;i<=timeInterval;i++){
     98e:	81 e0       	ldi	r24, 0x01	; 1
     990:	90 e0       	ldi	r25, 0x00	; 0
int isDriverSleepingIR(){
	LCD_Clear();
	LCD_String("Checking Eyes");
	//int timeInterval=40; real value due to error
	int timeInterval=5;
	int flag=0;
     992:	c0 e0       	ldi	r28, 0x00	; 0
     994:	d0 e0       	ldi	r29, 0x00	; 0
	for(int i=1;i<=timeInterval;i++){
     996:	0f c0       	rjmp	.+30     	; 0x9b6 <isDriverSleepingIR+0x38>
		if(pinRead(PINC,irsensor)==0x40){
     998:	9e 9b       	sbis	0x13, 6	; 19
     99a:	02 c0       	rjmp	.+4      	; 0x9a0 <isDriverSleepingIR+0x22>
			flag++;
     99c:	21 96       	adiw	r28, 0x01	; 1
     99e:	01 c0       	rjmp	.+2      	; 0x9a2 <isDriverSleepingIR+0x24>
			}else{
			flag--;
     9a0:	21 97       	sbiw	r28, 0x01	; 1
     9a2:	2f e7       	ldi	r18, 0x7F	; 127
     9a4:	38 e3       	ldi	r19, 0x38	; 56
     9a6:	41 e0       	ldi	r20, 0x01	; 1
     9a8:	21 50       	subi	r18, 0x01	; 1
     9aa:	30 40       	sbci	r19, 0x00	; 0
     9ac:	40 40       	sbci	r20, 0x00	; 0
     9ae:	e1 f7       	brne	.-8      	; 0x9a8 <isDriverSleepingIR+0x2a>
     9b0:	00 c0       	rjmp	.+0      	; 0x9b2 <isDriverSleepingIR+0x34>
     9b2:	00 00       	nop
	LCD_Clear();
	LCD_String("Checking Eyes");
	//int timeInterval=40; real value due to error
	int timeInterval=5;
	int flag=0;
	for(int i=1;i<=timeInterval;i++){
     9b4:	01 96       	adiw	r24, 0x01	; 1
     9b6:	86 30       	cpi	r24, 0x06	; 6
     9b8:	91 05       	cpc	r25, r1
     9ba:	74 f3       	brlt	.-36     	; 0x998 <isDriverSleepingIR+0x1a>
			}else{
			flag--;
		}
		_delay_ms(50);
	}
	LCD_Command(0xc0);
     9bc:	80 ec       	ldi	r24, 0xC0	; 192
     9be:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <LCD_Command>
	LCD_String("  -Finished");
     9c2:	8a ee       	ldi	r24, 0xEA	; 234
     9c4:	90 e0       	ldi	r25, 0x00	; 0
     9c6:	0e 94 72 01 	call	0x2e4	; 0x2e4 <LCD_String>
	if(flag==timeInterval){
     9ca:	25 97       	sbiw	r28, 0x05	; 5
     9cc:	19 f4       	brne	.+6      	; 0x9d4 <isDriverSleepingIR+0x56>
		return 1;
     9ce:	81 e0       	ldi	r24, 0x01	; 1
     9d0:	90 e0       	ldi	r25, 0x00	; 0
     9d2:	02 c0       	rjmp	.+4      	; 0x9d8 <isDriverSleepingIR+0x5a>
	}else{
		return 0;
     9d4:	80 e0       	ldi	r24, 0x00	; 0
     9d6:	90 e0       	ldi	r25, 0x00	; 0
	}
	
}
     9d8:	df 91       	pop	r29
     9da:	cf 91       	pop	r28
     9dc:	08 95       	ret

000009de <sendLocation>:

void sendLocation(char* message){
     9de:	0f 93       	push	r16
     9e0:	1f 93       	push	r17
     9e2:	cf 93       	push	r28
     9e4:	df 93       	push	r29
     9e6:	8c 01       	movw	r16, r24
	get_latitude(GGA_Pointers[0]);char* lat=lat_degrees_buffer;
     9e8:	c2 e9       	ldi	r28, 0x92	; 146
     9ea:	d2 e0       	ldi	r29, 0x02	; 2
     9ec:	88 81       	ld	r24, Y
     9ee:	90 e0       	ldi	r25, 0x00	; 0
     9f0:	0e 94 63 02 	call	0x4c6	; 0x4c6 <get_latitude>
	get_longitude(GGA_Pointers[2]);char* lngtd=long_degrees_buffer;
     9f4:	8a 81       	ldd	r24, Y+2	; 0x02
     9f6:	90 e0       	ldi	r25, 0x00	; 0
     9f8:	0e 94 cf 02 	call	0x59e	; 0x59e <get_longitude>
	get_altitude(GGA_Pointers[7]);char* altitude=Altitude_Buffer;
     9fc:	8f 81       	ldd	r24, Y+7	; 0x07
     9fe:	90 e0       	ldi	r25, 0x00	; 0
     a00:	0e 94 04 02 	call	0x408	; 0x408 <get_altitude>
	PORTD=0x04;// change signal using mux
     a04:	84 e0       	ldi	r24, 0x04	; 4
     a06:	82 bb       	out	0x12, r24	; 18
	sendMessage(message,lat,lngtd,altitude);
     a08:	2a eb       	ldi	r18, 0xBA	; 186
     a0a:	32 e0       	ldi	r19, 0x02	; 2
     a0c:	4d e4       	ldi	r20, 0x4D	; 77
     a0e:	52 e0       	ldi	r21, 0x02	; 2
     a10:	66 ea       	ldi	r22, 0xA6	; 166
     a12:	72 e0       	ldi	r23, 0x02	; 2
     a14:	c8 01       	movw	r24, r16
     a16:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <sendMessage>
	PORTD=0x00;// turn back to normal
     a1a:	12 ba       	out	0x12, r1	; 18
     a1c:	df 91       	pop	r29
     a1e:	cf 91       	pop	r28
     a20:	1f 91       	pop	r17
     a22:	0f 91       	pop	r16
     a24:	08 95       	ret

00000a26 <main>:
#define F_CPU 8000000UL
#define SREG   _SFR_IO8(0x3f)
#include "headerfiles.h"
int main(void){
     a26:	cf 93       	push	r28
     a28:	df 93       	push	r29
     a2a:	00 d0       	rcall	.+0      	; 0xa2c <main+0x6>
     a2c:	00 d0       	rcall	.+0      	; 0xa2e <main+0x8>
     a2e:	1f 92       	push	r1
     a30:	cd b7       	in	r28, 0x3d	; 61
     a32:	de b7       	in	r29, 0x3e	; 62
	DDRD=0xE4;
     a34:	84 ee       	ldi	r24, 0xE4	; 228
     a36:	81 bb       	out	0x11, r24	; 17
	LCD_Init();LCD_String("Initializing..");_delay_ms(50);LCD_Clear();
     a38:	0e 94 4e 01 	call	0x29c	; 0x29c <LCD_Init>
     a3c:	86 ef       	ldi	r24, 0xF6	; 246
     a3e:	90 e0       	ldi	r25, 0x00	; 0
     a40:	0e 94 72 01 	call	0x2e4	; 0x2e4 <LCD_String>
     a44:	2f e7       	ldi	r18, 0x7F	; 127
     a46:	38 e3       	ldi	r19, 0x38	; 56
     a48:	41 e0       	ldi	r20, 0x01	; 1
     a4a:	21 50       	subi	r18, 0x01	; 1
     a4c:	30 40       	sbci	r19, 0x00	; 0
     a4e:	40 40       	sbci	r20, 0x00	; 0
     a50:	e1 f7       	brne	.-8      	; 0xa4a <main+0x24>
     a52:	00 c0       	rjmp	.+0      	; 0xa54 <main+0x2e>
     a54:	00 00       	nop
     a56:	0e 94 a4 01 	call	0x348	; 0x348 <LCD_Clear>
	I2C_Init();
     a5a:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <I2C_Init>
	PWM_init();
     a5e:	0e 94 cc 01 	call	0x398	; 0x398 <PWM_init>
	GGA_Index=0;
     a62:	10 92 7b 02 	sts	0x027B, r1	; 0x80027b <GGA_Index+0x1>
     a66:	10 92 7a 02 	sts	0x027A, r1	; 0x80027a <GGA_Index>
	USART_Init(9600);
     a6a:	60 e8       	ldi	r22, 0x80	; 128
     a6c:	75 e2       	ldi	r23, 0x25	; 37
     a6e:	80 e0       	ldi	r24, 0x00	; 0
     a70:	90 e0       	ldi	r25, 0x00	; 0
     a72:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <USART_Init>
	sei();
     a76:	78 94       	sei
	start:
	LCD_String("Welcome");_delay_ms(50);LCD_Clear();
     a78:	85 e0       	ldi	r24, 0x05	; 5
     a7a:	91 e0       	ldi	r25, 0x01	; 1
     a7c:	0e 94 72 01 	call	0x2e4	; 0x2e4 <LCD_String>
     a80:	8f e7       	ldi	r24, 0x7F	; 127
     a82:	98 e3       	ldi	r25, 0x38	; 56
     a84:	21 e0       	ldi	r18, 0x01	; 1
     a86:	81 50       	subi	r24, 0x01	; 1
     a88:	90 40       	sbci	r25, 0x00	; 0
     a8a:	20 40       	sbci	r18, 0x00	; 0
     a8c:	e1 f7       	brne	.-8      	; 0xa86 <main+0x60>
     a8e:	00 c0       	rjmp	.+0      	; 0xa90 <main+0x6a>
     a90:	00 00       	nop
     a92:	0e 94 a4 01 	call	0x348	; 0x348 <LCD_Clear>
	while (1){
		ADC_Init();
     a96:	0e 94 b1 01 	call	0x362	; 0x362 <ADC_Init>
		//flame detection
		if(pinRead(PINC,flame)==0x10){
     a9a:	9c 9b       	sbis	0x13, 4	; 19
     a9c:	1e c0       	rjmp	.+60     	; 0xada <main+0xb4>
			LCD_Clear();
     a9e:	0e 94 a4 01 	call	0x348	; 0x348 <LCD_Clear>
			LCD_String("Flame Detected !");
     aa2:	8d e0       	ldi	r24, 0x0D	; 13
     aa4:	91 e0       	ldi	r25, 0x01	; 1
     aa6:	0e 94 72 01 	call	0x2e4	; 0x2e4 <LCD_String>
			ringAlarm();
     aaa:	0e 94 ab 04 	call	0x956	; 0x956 <ringAlarm>
			onHazardLight();
     aae:	0e 94 b3 04 	call	0x966	; 0x966 <onHazardLight>
     ab2:	3f ef       	ldi	r19, 0xFF	; 255
     ab4:	44 e3       	ldi	r20, 0x34	; 52
     ab6:	8c e0       	ldi	r24, 0x0C	; 12
     ab8:	31 50       	subi	r19, 0x01	; 1
     aba:	40 40       	sbci	r20, 0x00	; 0
     abc:	80 40       	sbci	r24, 0x00	; 0
     abe:	e1 f7       	brne	.-8      	; 0xab8 <main+0x92>
     ac0:	00 c0       	rjmp	.+0      	; 0xac2 <main+0x9c>
     ac2:	00 00       	nop
			_delay_ms(500);
			stopAlarm();
     ac4:	0e 94 af 04 	call	0x95e	; 0x95e <stopAlarm>
			offHazardLight();
     ac8:	0e 94 b7 04 	call	0x96e	; 0x96e <offHazardLight>
			LCD_Clear();
     acc:	0e 94 a4 01 	call	0x348	; 0x348 <LCD_Clear>
			sendLocation("Flame is Detected");
     ad0:	8e e1       	ldi	r24, 0x1E	; 30
     ad2:	91 e0       	ldi	r25, 0x01	; 1
     ad4:	0e 94 ef 04 	call	0x9de	; 0x9de <sendLocation>
     ad8:	de cf       	rjmp	.-68     	; 0xa96 <main+0x70>
		}
		//else 1 start
		else{
			//set wheel speed vehicle
			
			int val=ADC_Read(1);float speed=(val/1024.0)*255.0;OCR0=(int)speed;
     ada:	81 e0       	ldi	r24, 0x01	; 1
     adc:	0e 94 b7 01 	call	0x36e	; 0x36e <ADC_Read>
     ae0:	bc 01       	movw	r22, r24
     ae2:	99 0f       	add	r25, r25
     ae4:	88 0b       	sbc	r24, r24
     ae6:	99 0b       	sbc	r25, r25
     ae8:	0e 94 4c 07 	call	0xe98	; 0xe98 <__floatsisf>
     aec:	20 e0       	ldi	r18, 0x00	; 0
     aee:	30 e0       	ldi	r19, 0x00	; 0
     af0:	40 e8       	ldi	r20, 0x80	; 128
     af2:	5a e3       	ldi	r21, 0x3A	; 58
     af4:	0e 94 fc 07 	call	0xff8	; 0xff8 <__mulsf3>
     af8:	20 e0       	ldi	r18, 0x00	; 0
     afa:	30 e0       	ldi	r19, 0x00	; 0
     afc:	4f e7       	ldi	r20, 0x7F	; 127
     afe:	53 e4       	ldi	r21, 0x43	; 67
     b00:	0e 94 fc 07 	call	0xff8	; 0xff8 <__mulsf3>
     b04:	0e 94 14 07 	call	0xe28	; 0xe28 <__fixsfsi>
     b08:	6c bf       	out	0x3c, r22	; 60
			//get pressure
			int pressure = ADC_Read(0);
     b0a:	80 e0       	ldi	r24, 0x00	; 0
     b0c:	0e 94 b7 01 	call	0x36e	; 0x36e <ADC_Read>
     b10:	8c 01       	movw	r16, r24
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     b12:	4a e0       	ldi	r20, 0x0A	; 10
     b14:	be 01       	movw	r22, r28
     b16:	6f 5f       	subi	r22, 0xFF	; 255
     b18:	7f 4f       	sbci	r23, 0xFF	; 255
     b1a:	0e 94 ba 08 	call	0x1174	; 0x1174 <__itoa_ncheck>
			//int pressure = 0;
			char h[5];itoa(pressure,h,10);
			LCD_String(h);
     b1e:	ce 01       	movw	r24, r28
     b20:	01 96       	adiw	r24, 0x01	; 1
     b22:	0e 94 72 01 	call	0x2e4	; 0x2e4 <LCD_String>
     b26:	9f ef       	ldi	r25, 0xFF	; 255
     b28:	20 e7       	ldi	r18, 0x70	; 112
     b2a:	32 e0       	ldi	r19, 0x02	; 2
     b2c:	91 50       	subi	r25, 0x01	; 1
     b2e:	20 40       	sbci	r18, 0x00	; 0
     b30:	30 40       	sbci	r19, 0x00	; 0
     b32:	e1 f7       	brne	.-8      	; 0xb2c <main+0x106>
     b34:	00 c0       	rjmp	.+0      	; 0xb36 <main+0x110>
     b36:	00 00       	nop
			_delay_ms(100);
			LCD_Clear();
     b38:	0e 94 a4 01 	call	0x348	; 0x348 <LCD_Clear>
			if (pressure > 107){// if value gt 107 vehicle is moving
     b3c:	0c 36       	cpi	r16, 0x6C	; 108
     b3e:	11 05       	cpc	r17, r1
     b40:	0c f4       	brge	.+2      	; 0xb44 <main+0x11e>
     b42:	77 c0       	rjmp	.+238    	; 0xc32 <main+0x20c>
				LCD_Clear();
     b44:	0e 94 a4 01 	call	0x348	; 0x348 <LCD_Clear>
				LCD_String("Driving mode");
     b48:	80 e3       	ldi	r24, 0x30	; 48
     b4a:	91 e0       	ldi	r25, 0x01	; 1
     b4c:	0e 94 72 01 	call	0x2e4	; 0x2e4 <LCD_String>
				//------------------------------------------------------------
				if(pinRead(PINC,alcohol)==0x20){
     b50:	9d 9b       	sbis	0x13, 5	; 19
     b52:	1a c0       	rjmp	.+52     	; 0xb88 <main+0x162>
							LCD_Clear();
     b54:	0e 94 a4 01 	call	0x348	; 0x348 <LCD_Clear>
							LCD_String("Alcohol Detected");
     b58:	8d e3       	ldi	r24, 0x3D	; 61
     b5a:	91 e0       	ldi	r25, 0x01	; 1
     b5c:	0e 94 72 01 	call	0x2e4	; 0x2e4 <LCD_String>
							ringAlarm();
     b60:	0e 94 ab 04 	call	0x956	; 0x956 <ringAlarm>
     b64:	4f ef       	ldi	r20, 0xFF	; 255
     b66:	80 e7       	ldi	r24, 0x70	; 112
     b68:	92 e0       	ldi	r25, 0x02	; 2
     b6a:	41 50       	subi	r20, 0x01	; 1
     b6c:	80 40       	sbci	r24, 0x00	; 0
     b6e:	90 40       	sbci	r25, 0x00	; 0
     b70:	e1 f7       	brne	.-8      	; 0xb6a <main+0x144>
     b72:	00 c0       	rjmp	.+0      	; 0xb74 <main+0x14e>
     b74:	00 00       	nop
							_delay_ms(100);
							stopAlarm();
     b76:	0e 94 af 04 	call	0x95e	; 0x95e <stopAlarm>
							LCD_Clear();
     b7a:	0e 94 a4 01 	call	0x348	; 0x348 <LCD_Clear>
							sendLocation("Alcohol Detected");
     b7e:	8d e3       	ldi	r24, 0x3D	; 61
     b80:	91 e0       	ldi	r25, 0x01	; 1
     b82:	0e 94 ef 04 	call	0x9de	; 0x9de <sendLocation>
     b86:	87 cf       	rjmp	.-242    	; 0xa96 <main+0x70>
				}else{
					if(isDriverSleepingIR()&& 1){
     b88:	0e 94 bf 04 	call	0x97e	; 0x97e <isDriverSleepingIR>
     b8c:	89 2b       	or	r24, r25
     b8e:	09 f4       	brne	.+2      	; 0xb92 <main+0x16c>
     b90:	82 cf       	rjmp	.-252    	; 0xa96 <main+0x70>
						LCD_Clear();
     b92:	0e 94 a4 01 	call	0x348	; 0x348 <LCD_Clear>
						LCD_String("Sleeping");
     b96:	87 e8       	ldi	r24, 0x87	; 135
     b98:	91 e0       	ldi	r25, 0x01	; 1
     b9a:	0e 94 72 01 	call	0x2e4	; 0x2e4 <LCD_String>
						ringAlarm();
     b9e:	0e 94 ab 04 	call	0x956	; 0x956 <ringAlarm>
						onHazardLight();
     ba2:	0e 94 b3 04 	call	0x966	; 0x966 <onHazardLight>
						LCD_Command(0xc0);
     ba6:	80 ec       	ldi	r24, 0xC0	; 192
     ba8:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <LCD_Command>
						LCD_String("Waiting..");
     bac:	8e e4       	ldi	r24, 0x4E	; 78
     bae:	91 e0       	ldi	r25, 0x01	; 1
     bb0:	0e 94 72 01 	call	0x2e4	; 0x2e4 <LCD_String>
						//for(int i=1;i<=20;i++){
						int x;
						for(x=1;x<=4;x++){
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	90 e0       	ldi	r25, 0x00	; 0
     bb8:	13 c0       	rjmp	.+38     	; 0xbe0 <main+0x1ba>
							if(pinRead(PINC,3)==0x08){
     bba:	9b 9b       	sbis	0x13, 3	; 19
     bbc:	07 c0       	rjmp	.+14     	; 0xbcc <main+0x1a6>
								stopAlarm();
     bbe:	0e 94 af 04 	call	0x95e	; 0x95e <stopAlarm>
								offHazardLight();
     bc2:	0e 94 b7 04 	call	0x96e	; 0x96e <offHazardLight>
								LCD_Clear();
     bc6:	0e 94 a4 01 	call	0x348	; 0x348 <LCD_Clear>
     bca:	56 cf       	rjmp	.-340    	; 0xa78 <main+0x52>
     bcc:	2f e3       	ldi	r18, 0x3F	; 63
     bce:	3d e0       	ldi	r19, 0x0D	; 13
     bd0:	43 e0       	ldi	r20, 0x03	; 3
     bd2:	21 50       	subi	r18, 0x01	; 1
     bd4:	30 40       	sbci	r19, 0x00	; 0
     bd6:	40 40       	sbci	r20, 0x00	; 0
     bd8:	e1 f7       	brne	.-8      	; 0xbd2 <main+0x1ac>
     bda:	00 c0       	rjmp	.+0      	; 0xbdc <main+0x1b6>
     bdc:	00 00       	nop
						onHazardLight();
						LCD_Command(0xc0);
						LCD_String("Waiting..");
						//for(int i=1;i<=20;i++){
						int x;
						for(x=1;x<=4;x++){
     bde:	01 96       	adiw	r24, 0x01	; 1
     be0:	85 30       	cpi	r24, 0x05	; 5
     be2:	91 05       	cpc	r25, r1
     be4:	54 f3       	brlt	.-44     	; 0xbba <main+0x194>
								LCD_Clear();
								goto start;
							}
							_delay_ms(125);
						}
						LCD_Clear();
     be6:	0e 94 a4 01 	call	0x348	; 0x348 <LCD_Clear>
						LCD_String("Waiting");
     bea:	88 e5       	ldi	r24, 0x58	; 88
     bec:	91 e0       	ldi	r25, 0x01	; 1
     bee:	0e 94 72 01 	call	0x2e4	; 0x2e4 <LCD_String>
						LCD_Command(0xc0);
     bf2:	80 ec       	ldi	r24, 0xC0	; 192
     bf4:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <LCD_Command>
						LCD_String("Complete");
     bf8:	80 e6       	ldi	r24, 0x60	; 96
     bfa:	91 e0       	ldi	r25, 0x01	; 1
     bfc:	0e 94 72 01 	call	0x2e4	; 0x2e4 <LCD_String>
						offHazardLight();
     c00:	0e 94 b7 04 	call	0x96e	; 0x96e <offHazardLight>
						stopAlarm();
     c04:	0e 94 af 04 	call	0x95e	; 0x95e <stopAlarm>
						OCR0=0;
     c08:	1c be       	out	0x3c, r1	; 60
						LCD_Clear();
     c0a:	0e 94 a4 01 	call	0x348	; 0x348 <LCD_Clear>
						LCD_String("Speed is");
     c0e:	89 e6       	ldi	r24, 0x69	; 105
     c10:	91 e0       	ldi	r25, 0x01	; 1
     c12:	0e 94 72 01 	call	0x2e4	; 0x2e4 <LCD_String>
						LCD_Command(0xc0);
     c16:	80 ec       	ldi	r24, 0xC0	; 192
     c18:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <LCD_Command>
						LCD_String("Reducing..");
     c1c:	82 e7       	ldi	r24, 0x72	; 114
     c1e:	91 e0       	ldi	r25, 0x01	; 1
     c20:	0e 94 72 01 	call	0x2e4	; 0x2e4 <LCD_String>
						sendLocation("Driver is Sleeping");
     c24:	8d e7       	ldi	r24, 0x7D	; 125
     c26:	91 e0       	ldi	r25, 0x01	; 1
     c28:	0e 94 ef 04 	call	0x9de	; 0x9de <sendLocation>
						playRadio();
     c2c:	0e 94 bb 04 	call	0x976	; 0x976 <playRadio>
     c30:	ff cf       	rjmp	.-2      	; 0xc30 <main+0x20a>
						while(1){}//let motor to slowdown fully
					}
				}
				//------------------------------------------------------------
			}else{
				LCD_String("Vehicle is");
     c32:	80 e9       	ldi	r24, 0x90	; 144
     c34:	91 e0       	ldi	r25, 0x01	; 1
     c36:	0e 94 72 01 	call	0x2e4	; 0x2e4 <LCD_String>
				LCD_Command(0xc0);
     c3a:	80 ec       	ldi	r24, 0xC0	; 192
     c3c:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <LCD_Command>
				LCD_String("not moving");
     c40:	8b e9       	ldi	r24, 0x9B	; 155
     c42:	91 e0       	ldi	r25, 0x01	; 1
     c44:	0e 94 72 01 	call	0x2e4	; 0x2e4 <LCD_String>
     c48:	8f e7       	ldi	r24, 0x7F	; 127
     c4a:	98 e3       	ldi	r25, 0x38	; 56
     c4c:	21 e0       	ldi	r18, 0x01	; 1
     c4e:	81 50       	subi	r24, 0x01	; 1
     c50:	90 40       	sbci	r25, 0x00	; 0
     c52:	20 40       	sbci	r18, 0x00	; 0
     c54:	e1 f7       	brne	.-8      	; 0xc4e <main+0x228>
     c56:	00 c0       	rjmp	.+0      	; 0xc58 <main+0x232>
     c58:	00 00       	nop
				_delay_ms(50);
				LCD_Clear();
     c5a:	0e 94 a4 01 	call	0x348	; 0x348 <LCD_Clear>
     c5e:	1b cf       	rjmp	.-458    	; 0xa96 <main+0x70>

00000c60 <__subsf3>:
     c60:	50 58       	subi	r21, 0x80	; 128

00000c62 <__addsf3>:
     c62:	bb 27       	eor	r27, r27
     c64:	aa 27       	eor	r26, r26
     c66:	0e 94 48 06 	call	0xc90	; 0xc90 <__addsf3x>
     c6a:	0c 94 c2 07 	jmp	0xf84	; 0xf84 <__fp_round>
     c6e:	0e 94 b4 07 	call	0xf68	; 0xf68 <__fp_pscA>
     c72:	38 f0       	brcs	.+14     	; 0xc82 <__addsf3+0x20>
     c74:	0e 94 bb 07 	call	0xf76	; 0xf76 <__fp_pscB>
     c78:	20 f0       	brcs	.+8      	; 0xc82 <__addsf3+0x20>
     c7a:	39 f4       	brne	.+14     	; 0xc8a <__addsf3+0x28>
     c7c:	9f 3f       	cpi	r25, 0xFF	; 255
     c7e:	19 f4       	brne	.+6      	; 0xc86 <__addsf3+0x24>
     c80:	26 f4       	brtc	.+8      	; 0xc8a <__addsf3+0x28>
     c82:	0c 94 b1 07 	jmp	0xf62	; 0xf62 <__fp_nan>
     c86:	0e f4       	brtc	.+2      	; 0xc8a <__addsf3+0x28>
     c88:	e0 95       	com	r30
     c8a:	e7 fb       	bst	r30, 7
     c8c:	0c 94 ab 07 	jmp	0xf56	; 0xf56 <__fp_inf>

00000c90 <__addsf3x>:
     c90:	e9 2f       	mov	r30, r25
     c92:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <__fp_split3>
     c96:	58 f3       	brcs	.-42     	; 0xc6e <__addsf3+0xc>
     c98:	ba 17       	cp	r27, r26
     c9a:	62 07       	cpc	r22, r18
     c9c:	73 07       	cpc	r23, r19
     c9e:	84 07       	cpc	r24, r20
     ca0:	95 07       	cpc	r25, r21
     ca2:	20 f0       	brcs	.+8      	; 0xcac <__addsf3x+0x1c>
     ca4:	79 f4       	brne	.+30     	; 0xcc4 <__addsf3x+0x34>
     ca6:	a6 f5       	brtc	.+104    	; 0xd10 <__addsf3x+0x80>
     ca8:	0c 94 f5 07 	jmp	0xfea	; 0xfea <__fp_zero>
     cac:	0e f4       	brtc	.+2      	; 0xcb0 <__addsf3x+0x20>
     cae:	e0 95       	com	r30
     cb0:	0b 2e       	mov	r0, r27
     cb2:	ba 2f       	mov	r27, r26
     cb4:	a0 2d       	mov	r26, r0
     cb6:	0b 01       	movw	r0, r22
     cb8:	b9 01       	movw	r22, r18
     cba:	90 01       	movw	r18, r0
     cbc:	0c 01       	movw	r0, r24
     cbe:	ca 01       	movw	r24, r20
     cc0:	a0 01       	movw	r20, r0
     cc2:	11 24       	eor	r1, r1
     cc4:	ff 27       	eor	r31, r31
     cc6:	59 1b       	sub	r21, r25
     cc8:	99 f0       	breq	.+38     	; 0xcf0 <__addsf3x+0x60>
     cca:	59 3f       	cpi	r21, 0xF9	; 249
     ccc:	50 f4       	brcc	.+20     	; 0xce2 <__addsf3x+0x52>
     cce:	50 3e       	cpi	r21, 0xE0	; 224
     cd0:	68 f1       	brcs	.+90     	; 0xd2c <__addsf3x+0x9c>
     cd2:	1a 16       	cp	r1, r26
     cd4:	f0 40       	sbci	r31, 0x00	; 0
     cd6:	a2 2f       	mov	r26, r18
     cd8:	23 2f       	mov	r18, r19
     cda:	34 2f       	mov	r19, r20
     cdc:	44 27       	eor	r20, r20
     cde:	58 5f       	subi	r21, 0xF8	; 248
     ce0:	f3 cf       	rjmp	.-26     	; 0xcc8 <__addsf3x+0x38>
     ce2:	46 95       	lsr	r20
     ce4:	37 95       	ror	r19
     ce6:	27 95       	ror	r18
     ce8:	a7 95       	ror	r26
     cea:	f0 40       	sbci	r31, 0x00	; 0
     cec:	53 95       	inc	r21
     cee:	c9 f7       	brne	.-14     	; 0xce2 <__addsf3x+0x52>
     cf0:	7e f4       	brtc	.+30     	; 0xd10 <__addsf3x+0x80>
     cf2:	1f 16       	cp	r1, r31
     cf4:	ba 0b       	sbc	r27, r26
     cf6:	62 0b       	sbc	r22, r18
     cf8:	73 0b       	sbc	r23, r19
     cfa:	84 0b       	sbc	r24, r20
     cfc:	ba f0       	brmi	.+46     	; 0xd2c <__addsf3x+0x9c>
     cfe:	91 50       	subi	r25, 0x01	; 1
     d00:	a1 f0       	breq	.+40     	; 0xd2a <__addsf3x+0x9a>
     d02:	ff 0f       	add	r31, r31
     d04:	bb 1f       	adc	r27, r27
     d06:	66 1f       	adc	r22, r22
     d08:	77 1f       	adc	r23, r23
     d0a:	88 1f       	adc	r24, r24
     d0c:	c2 f7       	brpl	.-16     	; 0xcfe <__addsf3x+0x6e>
     d0e:	0e c0       	rjmp	.+28     	; 0xd2c <__addsf3x+0x9c>
     d10:	ba 0f       	add	r27, r26
     d12:	62 1f       	adc	r22, r18
     d14:	73 1f       	adc	r23, r19
     d16:	84 1f       	adc	r24, r20
     d18:	48 f4       	brcc	.+18     	; 0xd2c <__addsf3x+0x9c>
     d1a:	87 95       	ror	r24
     d1c:	77 95       	ror	r23
     d1e:	67 95       	ror	r22
     d20:	b7 95       	ror	r27
     d22:	f7 95       	ror	r31
     d24:	9e 3f       	cpi	r25, 0xFE	; 254
     d26:	08 f0       	brcs	.+2      	; 0xd2a <__addsf3x+0x9a>
     d28:	b0 cf       	rjmp	.-160    	; 0xc8a <__addsf3+0x28>
     d2a:	93 95       	inc	r25
     d2c:	88 0f       	add	r24, r24
     d2e:	08 f0       	brcs	.+2      	; 0xd32 <__addsf3x+0xa2>
     d30:	99 27       	eor	r25, r25
     d32:	ee 0f       	add	r30, r30
     d34:	97 95       	ror	r25
     d36:	87 95       	ror	r24
     d38:	08 95       	ret

00000d3a <__cmpsf2>:
     d3a:	0e 94 87 07 	call	0xf0e	; 0xf0e <__fp_cmp>
     d3e:	08 f4       	brcc	.+2      	; 0xd42 <__cmpsf2+0x8>
     d40:	81 e0       	ldi	r24, 0x01	; 1
     d42:	08 95       	ret

00000d44 <__divsf3>:
     d44:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__divsf3x>
     d48:	0c 94 c2 07 	jmp	0xf84	; 0xf84 <__fp_round>
     d4c:	0e 94 bb 07 	call	0xf76	; 0xf76 <__fp_pscB>
     d50:	58 f0       	brcs	.+22     	; 0xd68 <__divsf3+0x24>
     d52:	0e 94 b4 07 	call	0xf68	; 0xf68 <__fp_pscA>
     d56:	40 f0       	brcs	.+16     	; 0xd68 <__divsf3+0x24>
     d58:	29 f4       	brne	.+10     	; 0xd64 <__divsf3+0x20>
     d5a:	5f 3f       	cpi	r21, 0xFF	; 255
     d5c:	29 f0       	breq	.+10     	; 0xd68 <__divsf3+0x24>
     d5e:	0c 94 ab 07 	jmp	0xf56	; 0xf56 <__fp_inf>
     d62:	51 11       	cpse	r21, r1
     d64:	0c 94 f6 07 	jmp	0xfec	; 0xfec <__fp_szero>
     d68:	0c 94 b1 07 	jmp	0xf62	; 0xf62 <__fp_nan>

00000d6c <__divsf3x>:
     d6c:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <__fp_split3>
     d70:	68 f3       	brcs	.-38     	; 0xd4c <__divsf3+0x8>

00000d72 <__divsf3_pse>:
     d72:	99 23       	and	r25, r25
     d74:	b1 f3       	breq	.-20     	; 0xd62 <__divsf3+0x1e>
     d76:	55 23       	and	r21, r21
     d78:	91 f3       	breq	.-28     	; 0xd5e <__divsf3+0x1a>
     d7a:	95 1b       	sub	r25, r21
     d7c:	55 0b       	sbc	r21, r21
     d7e:	bb 27       	eor	r27, r27
     d80:	aa 27       	eor	r26, r26
     d82:	62 17       	cp	r22, r18
     d84:	73 07       	cpc	r23, r19
     d86:	84 07       	cpc	r24, r20
     d88:	38 f0       	brcs	.+14     	; 0xd98 <__divsf3_pse+0x26>
     d8a:	9f 5f       	subi	r25, 0xFF	; 255
     d8c:	5f 4f       	sbci	r21, 0xFF	; 255
     d8e:	22 0f       	add	r18, r18
     d90:	33 1f       	adc	r19, r19
     d92:	44 1f       	adc	r20, r20
     d94:	aa 1f       	adc	r26, r26
     d96:	a9 f3       	breq	.-22     	; 0xd82 <__divsf3_pse+0x10>
     d98:	35 d0       	rcall	.+106    	; 0xe04 <__divsf3_pse+0x92>
     d9a:	0e 2e       	mov	r0, r30
     d9c:	3a f0       	brmi	.+14     	; 0xdac <__divsf3_pse+0x3a>
     d9e:	e0 e8       	ldi	r30, 0x80	; 128
     da0:	32 d0       	rcall	.+100    	; 0xe06 <__divsf3_pse+0x94>
     da2:	91 50       	subi	r25, 0x01	; 1
     da4:	50 40       	sbci	r21, 0x00	; 0
     da6:	e6 95       	lsr	r30
     da8:	00 1c       	adc	r0, r0
     daa:	ca f7       	brpl	.-14     	; 0xd9e <__divsf3_pse+0x2c>
     dac:	2b d0       	rcall	.+86     	; 0xe04 <__divsf3_pse+0x92>
     dae:	fe 2f       	mov	r31, r30
     db0:	29 d0       	rcall	.+82     	; 0xe04 <__divsf3_pse+0x92>
     db2:	66 0f       	add	r22, r22
     db4:	77 1f       	adc	r23, r23
     db6:	88 1f       	adc	r24, r24
     db8:	bb 1f       	adc	r27, r27
     dba:	26 17       	cp	r18, r22
     dbc:	37 07       	cpc	r19, r23
     dbe:	48 07       	cpc	r20, r24
     dc0:	ab 07       	cpc	r26, r27
     dc2:	b0 e8       	ldi	r27, 0x80	; 128
     dc4:	09 f0       	breq	.+2      	; 0xdc8 <__divsf3_pse+0x56>
     dc6:	bb 0b       	sbc	r27, r27
     dc8:	80 2d       	mov	r24, r0
     dca:	bf 01       	movw	r22, r30
     dcc:	ff 27       	eor	r31, r31
     dce:	93 58       	subi	r25, 0x83	; 131
     dd0:	5f 4f       	sbci	r21, 0xFF	; 255
     dd2:	3a f0       	brmi	.+14     	; 0xde2 <__divsf3_pse+0x70>
     dd4:	9e 3f       	cpi	r25, 0xFE	; 254
     dd6:	51 05       	cpc	r21, r1
     dd8:	78 f0       	brcs	.+30     	; 0xdf8 <__divsf3_pse+0x86>
     dda:	0c 94 ab 07 	jmp	0xf56	; 0xf56 <__fp_inf>
     dde:	0c 94 f6 07 	jmp	0xfec	; 0xfec <__fp_szero>
     de2:	5f 3f       	cpi	r21, 0xFF	; 255
     de4:	e4 f3       	brlt	.-8      	; 0xdde <__divsf3_pse+0x6c>
     de6:	98 3e       	cpi	r25, 0xE8	; 232
     de8:	d4 f3       	brlt	.-12     	; 0xdde <__divsf3_pse+0x6c>
     dea:	86 95       	lsr	r24
     dec:	77 95       	ror	r23
     dee:	67 95       	ror	r22
     df0:	b7 95       	ror	r27
     df2:	f7 95       	ror	r31
     df4:	9f 5f       	subi	r25, 0xFF	; 255
     df6:	c9 f7       	brne	.-14     	; 0xdea <__divsf3_pse+0x78>
     df8:	88 0f       	add	r24, r24
     dfa:	91 1d       	adc	r25, r1
     dfc:	96 95       	lsr	r25
     dfe:	87 95       	ror	r24
     e00:	97 f9       	bld	r25, 7
     e02:	08 95       	ret
     e04:	e1 e0       	ldi	r30, 0x01	; 1
     e06:	66 0f       	add	r22, r22
     e08:	77 1f       	adc	r23, r23
     e0a:	88 1f       	adc	r24, r24
     e0c:	bb 1f       	adc	r27, r27
     e0e:	62 17       	cp	r22, r18
     e10:	73 07       	cpc	r23, r19
     e12:	84 07       	cpc	r24, r20
     e14:	ba 07       	cpc	r27, r26
     e16:	20 f0       	brcs	.+8      	; 0xe20 <__divsf3_pse+0xae>
     e18:	62 1b       	sub	r22, r18
     e1a:	73 0b       	sbc	r23, r19
     e1c:	84 0b       	sbc	r24, r20
     e1e:	ba 0b       	sbc	r27, r26
     e20:	ee 1f       	adc	r30, r30
     e22:	88 f7       	brcc	.-30     	; 0xe06 <__divsf3_pse+0x94>
     e24:	e0 95       	com	r30
     e26:	08 95       	ret

00000e28 <__fixsfsi>:
     e28:	0e 94 1b 07 	call	0xe36	; 0xe36 <__fixunssfsi>
     e2c:	68 94       	set
     e2e:	b1 11       	cpse	r27, r1
     e30:	0c 94 f6 07 	jmp	0xfec	; 0xfec <__fp_szero>
     e34:	08 95       	ret

00000e36 <__fixunssfsi>:
     e36:	0e 94 db 07 	call	0xfb6	; 0xfb6 <__fp_splitA>
     e3a:	88 f0       	brcs	.+34     	; 0xe5e <__fixunssfsi+0x28>
     e3c:	9f 57       	subi	r25, 0x7F	; 127
     e3e:	98 f0       	brcs	.+38     	; 0xe66 <__fixunssfsi+0x30>
     e40:	b9 2f       	mov	r27, r25
     e42:	99 27       	eor	r25, r25
     e44:	b7 51       	subi	r27, 0x17	; 23
     e46:	b0 f0       	brcs	.+44     	; 0xe74 <__fixunssfsi+0x3e>
     e48:	e1 f0       	breq	.+56     	; 0xe82 <__fixunssfsi+0x4c>
     e4a:	66 0f       	add	r22, r22
     e4c:	77 1f       	adc	r23, r23
     e4e:	88 1f       	adc	r24, r24
     e50:	99 1f       	adc	r25, r25
     e52:	1a f0       	brmi	.+6      	; 0xe5a <__fixunssfsi+0x24>
     e54:	ba 95       	dec	r27
     e56:	c9 f7       	brne	.-14     	; 0xe4a <__fixunssfsi+0x14>
     e58:	14 c0       	rjmp	.+40     	; 0xe82 <__fixunssfsi+0x4c>
     e5a:	b1 30       	cpi	r27, 0x01	; 1
     e5c:	91 f0       	breq	.+36     	; 0xe82 <__fixunssfsi+0x4c>
     e5e:	0e 94 f5 07 	call	0xfea	; 0xfea <__fp_zero>
     e62:	b1 e0       	ldi	r27, 0x01	; 1
     e64:	08 95       	ret
     e66:	0c 94 f5 07 	jmp	0xfea	; 0xfea <__fp_zero>
     e6a:	67 2f       	mov	r22, r23
     e6c:	78 2f       	mov	r23, r24
     e6e:	88 27       	eor	r24, r24
     e70:	b8 5f       	subi	r27, 0xF8	; 248
     e72:	39 f0       	breq	.+14     	; 0xe82 <__fixunssfsi+0x4c>
     e74:	b9 3f       	cpi	r27, 0xF9	; 249
     e76:	cc f3       	brlt	.-14     	; 0xe6a <__fixunssfsi+0x34>
     e78:	86 95       	lsr	r24
     e7a:	77 95       	ror	r23
     e7c:	67 95       	ror	r22
     e7e:	b3 95       	inc	r27
     e80:	d9 f7       	brne	.-10     	; 0xe78 <__fixunssfsi+0x42>
     e82:	3e f4       	brtc	.+14     	; 0xe92 <__fixunssfsi+0x5c>
     e84:	90 95       	com	r25
     e86:	80 95       	com	r24
     e88:	70 95       	com	r23
     e8a:	61 95       	neg	r22
     e8c:	7f 4f       	sbci	r23, 0xFF	; 255
     e8e:	8f 4f       	sbci	r24, 0xFF	; 255
     e90:	9f 4f       	sbci	r25, 0xFF	; 255
     e92:	08 95       	ret

00000e94 <__floatunsisf>:
     e94:	e8 94       	clt
     e96:	09 c0       	rjmp	.+18     	; 0xeaa <__floatsisf+0x12>

00000e98 <__floatsisf>:
     e98:	97 fb       	bst	r25, 7
     e9a:	3e f4       	brtc	.+14     	; 0xeaa <__floatsisf+0x12>
     e9c:	90 95       	com	r25
     e9e:	80 95       	com	r24
     ea0:	70 95       	com	r23
     ea2:	61 95       	neg	r22
     ea4:	7f 4f       	sbci	r23, 0xFF	; 255
     ea6:	8f 4f       	sbci	r24, 0xFF	; 255
     ea8:	9f 4f       	sbci	r25, 0xFF	; 255
     eaa:	99 23       	and	r25, r25
     eac:	a9 f0       	breq	.+42     	; 0xed8 <__floatsisf+0x40>
     eae:	f9 2f       	mov	r31, r25
     eb0:	96 e9       	ldi	r25, 0x96	; 150
     eb2:	bb 27       	eor	r27, r27
     eb4:	93 95       	inc	r25
     eb6:	f6 95       	lsr	r31
     eb8:	87 95       	ror	r24
     eba:	77 95       	ror	r23
     ebc:	67 95       	ror	r22
     ebe:	b7 95       	ror	r27
     ec0:	f1 11       	cpse	r31, r1
     ec2:	f8 cf       	rjmp	.-16     	; 0xeb4 <__floatsisf+0x1c>
     ec4:	fa f4       	brpl	.+62     	; 0xf04 <__floatsisf+0x6c>
     ec6:	bb 0f       	add	r27, r27
     ec8:	11 f4       	brne	.+4      	; 0xece <__floatsisf+0x36>
     eca:	60 ff       	sbrs	r22, 0
     ecc:	1b c0       	rjmp	.+54     	; 0xf04 <__floatsisf+0x6c>
     ece:	6f 5f       	subi	r22, 0xFF	; 255
     ed0:	7f 4f       	sbci	r23, 0xFF	; 255
     ed2:	8f 4f       	sbci	r24, 0xFF	; 255
     ed4:	9f 4f       	sbci	r25, 0xFF	; 255
     ed6:	16 c0       	rjmp	.+44     	; 0xf04 <__floatsisf+0x6c>
     ed8:	88 23       	and	r24, r24
     eda:	11 f0       	breq	.+4      	; 0xee0 <__floatsisf+0x48>
     edc:	96 e9       	ldi	r25, 0x96	; 150
     ede:	11 c0       	rjmp	.+34     	; 0xf02 <__floatsisf+0x6a>
     ee0:	77 23       	and	r23, r23
     ee2:	21 f0       	breq	.+8      	; 0xeec <__floatsisf+0x54>
     ee4:	9e e8       	ldi	r25, 0x8E	; 142
     ee6:	87 2f       	mov	r24, r23
     ee8:	76 2f       	mov	r23, r22
     eea:	05 c0       	rjmp	.+10     	; 0xef6 <__floatsisf+0x5e>
     eec:	66 23       	and	r22, r22
     eee:	71 f0       	breq	.+28     	; 0xf0c <__floatsisf+0x74>
     ef0:	96 e8       	ldi	r25, 0x86	; 134
     ef2:	86 2f       	mov	r24, r22
     ef4:	70 e0       	ldi	r23, 0x00	; 0
     ef6:	60 e0       	ldi	r22, 0x00	; 0
     ef8:	2a f0       	brmi	.+10     	; 0xf04 <__floatsisf+0x6c>
     efa:	9a 95       	dec	r25
     efc:	66 0f       	add	r22, r22
     efe:	77 1f       	adc	r23, r23
     f00:	88 1f       	adc	r24, r24
     f02:	da f7       	brpl	.-10     	; 0xefa <__floatsisf+0x62>
     f04:	88 0f       	add	r24, r24
     f06:	96 95       	lsr	r25
     f08:	87 95       	ror	r24
     f0a:	97 f9       	bld	r25, 7
     f0c:	08 95       	ret

00000f0e <__fp_cmp>:
     f0e:	99 0f       	add	r25, r25
     f10:	00 08       	sbc	r0, r0
     f12:	55 0f       	add	r21, r21
     f14:	aa 0b       	sbc	r26, r26
     f16:	e0 e8       	ldi	r30, 0x80	; 128
     f18:	fe ef       	ldi	r31, 0xFE	; 254
     f1a:	16 16       	cp	r1, r22
     f1c:	17 06       	cpc	r1, r23
     f1e:	e8 07       	cpc	r30, r24
     f20:	f9 07       	cpc	r31, r25
     f22:	c0 f0       	brcs	.+48     	; 0xf54 <__fp_cmp+0x46>
     f24:	12 16       	cp	r1, r18
     f26:	13 06       	cpc	r1, r19
     f28:	e4 07       	cpc	r30, r20
     f2a:	f5 07       	cpc	r31, r21
     f2c:	98 f0       	brcs	.+38     	; 0xf54 <__fp_cmp+0x46>
     f2e:	62 1b       	sub	r22, r18
     f30:	73 0b       	sbc	r23, r19
     f32:	84 0b       	sbc	r24, r20
     f34:	95 0b       	sbc	r25, r21
     f36:	39 f4       	brne	.+14     	; 0xf46 <__fp_cmp+0x38>
     f38:	0a 26       	eor	r0, r26
     f3a:	61 f0       	breq	.+24     	; 0xf54 <__fp_cmp+0x46>
     f3c:	23 2b       	or	r18, r19
     f3e:	24 2b       	or	r18, r20
     f40:	25 2b       	or	r18, r21
     f42:	21 f4       	brne	.+8      	; 0xf4c <__fp_cmp+0x3e>
     f44:	08 95       	ret
     f46:	0a 26       	eor	r0, r26
     f48:	09 f4       	brne	.+2      	; 0xf4c <__fp_cmp+0x3e>
     f4a:	a1 40       	sbci	r26, 0x01	; 1
     f4c:	a6 95       	lsr	r26
     f4e:	8f ef       	ldi	r24, 0xFF	; 255
     f50:	81 1d       	adc	r24, r1
     f52:	81 1d       	adc	r24, r1
     f54:	08 95       	ret

00000f56 <__fp_inf>:
     f56:	97 f9       	bld	r25, 7
     f58:	9f 67       	ori	r25, 0x7F	; 127
     f5a:	80 e8       	ldi	r24, 0x80	; 128
     f5c:	70 e0       	ldi	r23, 0x00	; 0
     f5e:	60 e0       	ldi	r22, 0x00	; 0
     f60:	08 95       	ret

00000f62 <__fp_nan>:
     f62:	9f ef       	ldi	r25, 0xFF	; 255
     f64:	80 ec       	ldi	r24, 0xC0	; 192
     f66:	08 95       	ret

00000f68 <__fp_pscA>:
     f68:	00 24       	eor	r0, r0
     f6a:	0a 94       	dec	r0
     f6c:	16 16       	cp	r1, r22
     f6e:	17 06       	cpc	r1, r23
     f70:	18 06       	cpc	r1, r24
     f72:	09 06       	cpc	r0, r25
     f74:	08 95       	ret

00000f76 <__fp_pscB>:
     f76:	00 24       	eor	r0, r0
     f78:	0a 94       	dec	r0
     f7a:	12 16       	cp	r1, r18
     f7c:	13 06       	cpc	r1, r19
     f7e:	14 06       	cpc	r1, r20
     f80:	05 06       	cpc	r0, r21
     f82:	08 95       	ret

00000f84 <__fp_round>:
     f84:	09 2e       	mov	r0, r25
     f86:	03 94       	inc	r0
     f88:	00 0c       	add	r0, r0
     f8a:	11 f4       	brne	.+4      	; 0xf90 <__fp_round+0xc>
     f8c:	88 23       	and	r24, r24
     f8e:	52 f0       	brmi	.+20     	; 0xfa4 <__fp_round+0x20>
     f90:	bb 0f       	add	r27, r27
     f92:	40 f4       	brcc	.+16     	; 0xfa4 <__fp_round+0x20>
     f94:	bf 2b       	or	r27, r31
     f96:	11 f4       	brne	.+4      	; 0xf9c <__fp_round+0x18>
     f98:	60 ff       	sbrs	r22, 0
     f9a:	04 c0       	rjmp	.+8      	; 0xfa4 <__fp_round+0x20>
     f9c:	6f 5f       	subi	r22, 0xFF	; 255
     f9e:	7f 4f       	sbci	r23, 0xFF	; 255
     fa0:	8f 4f       	sbci	r24, 0xFF	; 255
     fa2:	9f 4f       	sbci	r25, 0xFF	; 255
     fa4:	08 95       	ret

00000fa6 <__fp_split3>:
     fa6:	57 fd       	sbrc	r21, 7
     fa8:	90 58       	subi	r25, 0x80	; 128
     faa:	44 0f       	add	r20, r20
     fac:	55 1f       	adc	r21, r21
     fae:	59 f0       	breq	.+22     	; 0xfc6 <__fp_splitA+0x10>
     fb0:	5f 3f       	cpi	r21, 0xFF	; 255
     fb2:	71 f0       	breq	.+28     	; 0xfd0 <__fp_splitA+0x1a>
     fb4:	47 95       	ror	r20

00000fb6 <__fp_splitA>:
     fb6:	88 0f       	add	r24, r24
     fb8:	97 fb       	bst	r25, 7
     fba:	99 1f       	adc	r25, r25
     fbc:	61 f0       	breq	.+24     	; 0xfd6 <__fp_splitA+0x20>
     fbe:	9f 3f       	cpi	r25, 0xFF	; 255
     fc0:	79 f0       	breq	.+30     	; 0xfe0 <__fp_splitA+0x2a>
     fc2:	87 95       	ror	r24
     fc4:	08 95       	ret
     fc6:	12 16       	cp	r1, r18
     fc8:	13 06       	cpc	r1, r19
     fca:	14 06       	cpc	r1, r20
     fcc:	55 1f       	adc	r21, r21
     fce:	f2 cf       	rjmp	.-28     	; 0xfb4 <__fp_split3+0xe>
     fd0:	46 95       	lsr	r20
     fd2:	f1 df       	rcall	.-30     	; 0xfb6 <__fp_splitA>
     fd4:	08 c0       	rjmp	.+16     	; 0xfe6 <__fp_splitA+0x30>
     fd6:	16 16       	cp	r1, r22
     fd8:	17 06       	cpc	r1, r23
     fda:	18 06       	cpc	r1, r24
     fdc:	99 1f       	adc	r25, r25
     fde:	f1 cf       	rjmp	.-30     	; 0xfc2 <__fp_splitA+0xc>
     fe0:	86 95       	lsr	r24
     fe2:	71 05       	cpc	r23, r1
     fe4:	61 05       	cpc	r22, r1
     fe6:	08 94       	sec
     fe8:	08 95       	ret

00000fea <__fp_zero>:
     fea:	e8 94       	clt

00000fec <__fp_szero>:
     fec:	bb 27       	eor	r27, r27
     fee:	66 27       	eor	r22, r22
     ff0:	77 27       	eor	r23, r23
     ff2:	cb 01       	movw	r24, r22
     ff4:	97 f9       	bld	r25, 7
     ff6:	08 95       	ret

00000ff8 <__mulsf3>:
     ff8:	0e 94 0f 08 	call	0x101e	; 0x101e <__mulsf3x>
     ffc:	0c 94 c2 07 	jmp	0xf84	; 0xf84 <__fp_round>
    1000:	0e 94 b4 07 	call	0xf68	; 0xf68 <__fp_pscA>
    1004:	38 f0       	brcs	.+14     	; 0x1014 <__mulsf3+0x1c>
    1006:	0e 94 bb 07 	call	0xf76	; 0xf76 <__fp_pscB>
    100a:	20 f0       	brcs	.+8      	; 0x1014 <__mulsf3+0x1c>
    100c:	95 23       	and	r25, r21
    100e:	11 f0       	breq	.+4      	; 0x1014 <__mulsf3+0x1c>
    1010:	0c 94 ab 07 	jmp	0xf56	; 0xf56 <__fp_inf>
    1014:	0c 94 b1 07 	jmp	0xf62	; 0xf62 <__fp_nan>
    1018:	11 24       	eor	r1, r1
    101a:	0c 94 f6 07 	jmp	0xfec	; 0xfec <__fp_szero>

0000101e <__mulsf3x>:
    101e:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <__fp_split3>
    1022:	70 f3       	brcs	.-36     	; 0x1000 <__mulsf3+0x8>

00001024 <__mulsf3_pse>:
    1024:	95 9f       	mul	r25, r21
    1026:	c1 f3       	breq	.-16     	; 0x1018 <__mulsf3+0x20>
    1028:	95 0f       	add	r25, r21
    102a:	50 e0       	ldi	r21, 0x00	; 0
    102c:	55 1f       	adc	r21, r21
    102e:	62 9f       	mul	r22, r18
    1030:	f0 01       	movw	r30, r0
    1032:	72 9f       	mul	r23, r18
    1034:	bb 27       	eor	r27, r27
    1036:	f0 0d       	add	r31, r0
    1038:	b1 1d       	adc	r27, r1
    103a:	63 9f       	mul	r22, r19
    103c:	aa 27       	eor	r26, r26
    103e:	f0 0d       	add	r31, r0
    1040:	b1 1d       	adc	r27, r1
    1042:	aa 1f       	adc	r26, r26
    1044:	64 9f       	mul	r22, r20
    1046:	66 27       	eor	r22, r22
    1048:	b0 0d       	add	r27, r0
    104a:	a1 1d       	adc	r26, r1
    104c:	66 1f       	adc	r22, r22
    104e:	82 9f       	mul	r24, r18
    1050:	22 27       	eor	r18, r18
    1052:	b0 0d       	add	r27, r0
    1054:	a1 1d       	adc	r26, r1
    1056:	62 1f       	adc	r22, r18
    1058:	73 9f       	mul	r23, r19
    105a:	b0 0d       	add	r27, r0
    105c:	a1 1d       	adc	r26, r1
    105e:	62 1f       	adc	r22, r18
    1060:	83 9f       	mul	r24, r19
    1062:	a0 0d       	add	r26, r0
    1064:	61 1d       	adc	r22, r1
    1066:	22 1f       	adc	r18, r18
    1068:	74 9f       	mul	r23, r20
    106a:	33 27       	eor	r19, r19
    106c:	a0 0d       	add	r26, r0
    106e:	61 1d       	adc	r22, r1
    1070:	23 1f       	adc	r18, r19
    1072:	84 9f       	mul	r24, r20
    1074:	60 0d       	add	r22, r0
    1076:	21 1d       	adc	r18, r1
    1078:	82 2f       	mov	r24, r18
    107a:	76 2f       	mov	r23, r22
    107c:	6a 2f       	mov	r22, r26
    107e:	11 24       	eor	r1, r1
    1080:	9f 57       	subi	r25, 0x7F	; 127
    1082:	50 40       	sbci	r21, 0x00	; 0
    1084:	9a f0       	brmi	.+38     	; 0x10ac <__mulsf3_pse+0x88>
    1086:	f1 f0       	breq	.+60     	; 0x10c4 <__mulsf3_pse+0xa0>
    1088:	88 23       	and	r24, r24
    108a:	4a f0       	brmi	.+18     	; 0x109e <__mulsf3_pse+0x7a>
    108c:	ee 0f       	add	r30, r30
    108e:	ff 1f       	adc	r31, r31
    1090:	bb 1f       	adc	r27, r27
    1092:	66 1f       	adc	r22, r22
    1094:	77 1f       	adc	r23, r23
    1096:	88 1f       	adc	r24, r24
    1098:	91 50       	subi	r25, 0x01	; 1
    109a:	50 40       	sbci	r21, 0x00	; 0
    109c:	a9 f7       	brne	.-22     	; 0x1088 <__mulsf3_pse+0x64>
    109e:	9e 3f       	cpi	r25, 0xFE	; 254
    10a0:	51 05       	cpc	r21, r1
    10a2:	80 f0       	brcs	.+32     	; 0x10c4 <__mulsf3_pse+0xa0>
    10a4:	0c 94 ab 07 	jmp	0xf56	; 0xf56 <__fp_inf>
    10a8:	0c 94 f6 07 	jmp	0xfec	; 0xfec <__fp_szero>
    10ac:	5f 3f       	cpi	r21, 0xFF	; 255
    10ae:	e4 f3       	brlt	.-8      	; 0x10a8 <__mulsf3_pse+0x84>
    10b0:	98 3e       	cpi	r25, 0xE8	; 232
    10b2:	d4 f3       	brlt	.-12     	; 0x10a8 <__mulsf3_pse+0x84>
    10b4:	86 95       	lsr	r24
    10b6:	77 95       	ror	r23
    10b8:	67 95       	ror	r22
    10ba:	b7 95       	ror	r27
    10bc:	f7 95       	ror	r31
    10be:	e7 95       	ror	r30
    10c0:	9f 5f       	subi	r25, 0xFF	; 255
    10c2:	c1 f7       	brne	.-16     	; 0x10b4 <__mulsf3_pse+0x90>
    10c4:	fe 2b       	or	r31, r30
    10c6:	88 0f       	add	r24, r24
    10c8:	91 1d       	adc	r25, r1
    10ca:	96 95       	lsr	r25
    10cc:	87 95       	ror	r24
    10ce:	97 f9       	bld	r25, 7
    10d0:	08 95       	ret

000010d2 <__udivmodsi4>:
    10d2:	a1 e2       	ldi	r26, 0x21	; 33
    10d4:	1a 2e       	mov	r1, r26
    10d6:	aa 1b       	sub	r26, r26
    10d8:	bb 1b       	sub	r27, r27
    10da:	fd 01       	movw	r30, r26
    10dc:	0d c0       	rjmp	.+26     	; 0x10f8 <__udivmodsi4_ep>

000010de <__udivmodsi4_loop>:
    10de:	aa 1f       	adc	r26, r26
    10e0:	bb 1f       	adc	r27, r27
    10e2:	ee 1f       	adc	r30, r30
    10e4:	ff 1f       	adc	r31, r31
    10e6:	a2 17       	cp	r26, r18
    10e8:	b3 07       	cpc	r27, r19
    10ea:	e4 07       	cpc	r30, r20
    10ec:	f5 07       	cpc	r31, r21
    10ee:	20 f0       	brcs	.+8      	; 0x10f8 <__udivmodsi4_ep>
    10f0:	a2 1b       	sub	r26, r18
    10f2:	b3 0b       	sbc	r27, r19
    10f4:	e4 0b       	sbc	r30, r20
    10f6:	f5 0b       	sbc	r31, r21

000010f8 <__udivmodsi4_ep>:
    10f8:	66 1f       	adc	r22, r22
    10fa:	77 1f       	adc	r23, r23
    10fc:	88 1f       	adc	r24, r24
    10fe:	99 1f       	adc	r25, r25
    1100:	1a 94       	dec	r1
    1102:	69 f7       	brne	.-38     	; 0x10de <__udivmodsi4_loop>
    1104:	60 95       	com	r22
    1106:	70 95       	com	r23
    1108:	80 95       	com	r24
    110a:	90 95       	com	r25
    110c:	9b 01       	movw	r18, r22
    110e:	ac 01       	movw	r20, r24
    1110:	bd 01       	movw	r22, r26
    1112:	cf 01       	movw	r24, r30
    1114:	08 95       	ret

00001116 <dtostrf>:
    1116:	ef 92       	push	r14
    1118:	0f 93       	push	r16
    111a:	1f 93       	push	r17
    111c:	cf 93       	push	r28
    111e:	df 93       	push	r29
    1120:	e8 01       	movw	r28, r16
    1122:	47 fd       	sbrc	r20, 7
    1124:	02 c0       	rjmp	.+4      	; 0x112a <dtostrf+0x14>
    1126:	34 e0       	ldi	r19, 0x04	; 4
    1128:	01 c0       	rjmp	.+2      	; 0x112c <dtostrf+0x16>
    112a:	34 e1       	ldi	r19, 0x14	; 20
    112c:	04 2e       	mov	r0, r20
    112e:	00 0c       	add	r0, r0
    1130:	55 0b       	sbc	r21, r21
    1132:	57 ff       	sbrs	r21, 7
    1134:	03 c0       	rjmp	.+6      	; 0x113c <dtostrf+0x26>
    1136:	51 95       	neg	r21
    1138:	41 95       	neg	r20
    113a:	51 09       	sbc	r21, r1
    113c:	e3 2e       	mov	r14, r19
    113e:	02 2f       	mov	r16, r18
    1140:	24 2f       	mov	r18, r20
    1142:	ae 01       	movw	r20, r28
    1144:	0e 94 df 08 	call	0x11be	; 0x11be <dtoa_prf>
    1148:	ce 01       	movw	r24, r28
    114a:	df 91       	pop	r29
    114c:	cf 91       	pop	r28
    114e:	1f 91       	pop	r17
    1150:	0f 91       	pop	r16
    1152:	ef 90       	pop	r14
    1154:	08 95       	ret

00001156 <atof>:
    1156:	66 27       	eor	r22, r22
    1158:	77 27       	eor	r23, r23
    115a:	0c 94 39 0a 	jmp	0x1472	; 0x1472 <strtod>

0000115e <strcat>:
    115e:	fb 01       	movw	r30, r22
    1160:	dc 01       	movw	r26, r24
    1162:	0d 90       	ld	r0, X+
    1164:	00 20       	and	r0, r0
    1166:	e9 f7       	brne	.-6      	; 0x1162 <strcat+0x4>
    1168:	11 97       	sbiw	r26, 0x01	; 1
    116a:	01 90       	ld	r0, Z+
    116c:	0d 92       	st	X+, r0
    116e:	00 20       	and	r0, r0
    1170:	e1 f7       	brne	.-8      	; 0x116a <strcat+0xc>
    1172:	08 95       	ret

00001174 <__itoa_ncheck>:
    1174:	bb 27       	eor	r27, r27
    1176:	4a 30       	cpi	r20, 0x0A	; 10
    1178:	31 f4       	brne	.+12     	; 0x1186 <__itoa_ncheck+0x12>
    117a:	99 23       	and	r25, r25
    117c:	22 f4       	brpl	.+8      	; 0x1186 <__itoa_ncheck+0x12>
    117e:	bd e2       	ldi	r27, 0x2D	; 45
    1180:	90 95       	com	r25
    1182:	81 95       	neg	r24
    1184:	9f 4f       	sbci	r25, 0xFF	; 255
    1186:	0c 94 c6 08 	jmp	0x118c	; 0x118c <__utoa_common>

0000118a <__utoa_ncheck>:
    118a:	bb 27       	eor	r27, r27

0000118c <__utoa_common>:
    118c:	fb 01       	movw	r30, r22
    118e:	55 27       	eor	r21, r21
    1190:	aa 27       	eor	r26, r26
    1192:	88 0f       	add	r24, r24
    1194:	99 1f       	adc	r25, r25
    1196:	aa 1f       	adc	r26, r26
    1198:	a4 17       	cp	r26, r20
    119a:	10 f0       	brcs	.+4      	; 0x11a0 <__utoa_common+0x14>
    119c:	a4 1b       	sub	r26, r20
    119e:	83 95       	inc	r24
    11a0:	50 51       	subi	r21, 0x10	; 16
    11a2:	b9 f7       	brne	.-18     	; 0x1192 <__utoa_common+0x6>
    11a4:	a0 5d       	subi	r26, 0xD0	; 208
    11a6:	aa 33       	cpi	r26, 0x3A	; 58
    11a8:	08 f0       	brcs	.+2      	; 0x11ac <__utoa_common+0x20>
    11aa:	a9 5d       	subi	r26, 0xD9	; 217
    11ac:	a1 93       	st	Z+, r26
    11ae:	00 97       	sbiw	r24, 0x00	; 0
    11b0:	79 f7       	brne	.-34     	; 0x1190 <__utoa_common+0x4>
    11b2:	b1 11       	cpse	r27, r1
    11b4:	b1 93       	st	Z+, r27
    11b6:	11 92       	st	Z+, r1
    11b8:	cb 01       	movw	r24, r22
    11ba:	0c 94 80 0c 	jmp	0x1900	; 0x1900 <strrev>

000011be <dtoa_prf>:
    11be:	a9 e0       	ldi	r26, 0x09	; 9
    11c0:	b0 e0       	ldi	r27, 0x00	; 0
    11c2:	e5 ee       	ldi	r30, 0xE5	; 229
    11c4:	f8 e0       	ldi	r31, 0x08	; 8
    11c6:	0c 94 a4 0c 	jmp	0x1948	; 0x1948 <__prologue_saves__+0xc>
    11ca:	6a 01       	movw	r12, r20
    11cc:	12 2f       	mov	r17, r18
    11ce:	b0 2e       	mov	r11, r16
    11d0:	2b e3       	ldi	r18, 0x3B	; 59
    11d2:	20 17       	cp	r18, r16
    11d4:	20 f0       	brcs	.+8      	; 0x11de <dtoa_prf+0x20>
    11d6:	ff 24       	eor	r15, r15
    11d8:	f3 94       	inc	r15
    11da:	f0 0e       	add	r15, r16
    11dc:	02 c0       	rjmp	.+4      	; 0x11e2 <dtoa_prf+0x24>
    11de:	2c e3       	ldi	r18, 0x3C	; 60
    11e0:	f2 2e       	mov	r15, r18
    11e2:	0f 2d       	mov	r16, r15
    11e4:	27 e0       	ldi	r18, 0x07	; 7
    11e6:	ae 01       	movw	r20, r28
    11e8:	4f 5f       	subi	r20, 0xFF	; 255
    11ea:	5f 4f       	sbci	r21, 0xFF	; 255
    11ec:	0e 94 87 0b 	call	0x170e	; 0x170e <__ftoa_engine>
    11f0:	bc 01       	movw	r22, r24
    11f2:	49 81       	ldd	r20, Y+1	; 0x01
    11f4:	84 2f       	mov	r24, r20
    11f6:	89 70       	andi	r24, 0x09	; 9
    11f8:	81 30       	cpi	r24, 0x01	; 1
    11fa:	31 f0       	breq	.+12     	; 0x1208 <dtoa_prf+0x4a>
    11fc:	e1 fc       	sbrc	r14, 1
    11fe:	06 c0       	rjmp	.+12     	; 0x120c <dtoa_prf+0x4e>
    1200:	e0 fe       	sbrs	r14, 0
    1202:	06 c0       	rjmp	.+12     	; 0x1210 <dtoa_prf+0x52>
    1204:	90 e2       	ldi	r25, 0x20	; 32
    1206:	05 c0       	rjmp	.+10     	; 0x1212 <dtoa_prf+0x54>
    1208:	9d e2       	ldi	r25, 0x2D	; 45
    120a:	03 c0       	rjmp	.+6      	; 0x1212 <dtoa_prf+0x54>
    120c:	9b e2       	ldi	r25, 0x2B	; 43
    120e:	01 c0       	rjmp	.+2      	; 0x1212 <dtoa_prf+0x54>
    1210:	90 e0       	ldi	r25, 0x00	; 0
    1212:	5e 2d       	mov	r21, r14
    1214:	50 71       	andi	r21, 0x10	; 16
    1216:	43 ff       	sbrs	r20, 3
    1218:	3c c0       	rjmp	.+120    	; 0x1292 <dtoa_prf+0xd4>
    121a:	91 11       	cpse	r25, r1
    121c:	02 c0       	rjmp	.+4      	; 0x1222 <dtoa_prf+0x64>
    121e:	83 e0       	ldi	r24, 0x03	; 3
    1220:	01 c0       	rjmp	.+2      	; 0x1224 <dtoa_prf+0x66>
    1222:	84 e0       	ldi	r24, 0x04	; 4
    1224:	81 17       	cp	r24, r17
    1226:	18 f4       	brcc	.+6      	; 0x122e <dtoa_prf+0x70>
    1228:	21 2f       	mov	r18, r17
    122a:	28 1b       	sub	r18, r24
    122c:	01 c0       	rjmp	.+2      	; 0x1230 <dtoa_prf+0x72>
    122e:	20 e0       	ldi	r18, 0x00	; 0
    1230:	51 11       	cpse	r21, r1
    1232:	0b c0       	rjmp	.+22     	; 0x124a <dtoa_prf+0x8c>
    1234:	f6 01       	movw	r30, r12
    1236:	82 2f       	mov	r24, r18
    1238:	30 e2       	ldi	r19, 0x20	; 32
    123a:	88 23       	and	r24, r24
    123c:	19 f0       	breq	.+6      	; 0x1244 <dtoa_prf+0x86>
    123e:	31 93       	st	Z+, r19
    1240:	81 50       	subi	r24, 0x01	; 1
    1242:	fb cf       	rjmp	.-10     	; 0x123a <dtoa_prf+0x7c>
    1244:	c2 0e       	add	r12, r18
    1246:	d1 1c       	adc	r13, r1
    1248:	20 e0       	ldi	r18, 0x00	; 0
    124a:	99 23       	and	r25, r25
    124c:	29 f0       	breq	.+10     	; 0x1258 <dtoa_prf+0x9a>
    124e:	d6 01       	movw	r26, r12
    1250:	9c 93       	st	X, r25
    1252:	f6 01       	movw	r30, r12
    1254:	31 96       	adiw	r30, 0x01	; 1
    1256:	6f 01       	movw	r12, r30
    1258:	c6 01       	movw	r24, r12
    125a:	03 96       	adiw	r24, 0x03	; 3
    125c:	e2 fe       	sbrs	r14, 2
    125e:	0a c0       	rjmp	.+20     	; 0x1274 <dtoa_prf+0xb6>
    1260:	3e e4       	ldi	r19, 0x4E	; 78
    1262:	d6 01       	movw	r26, r12
    1264:	3c 93       	st	X, r19
    1266:	41 e4       	ldi	r20, 0x41	; 65
    1268:	11 96       	adiw	r26, 0x01	; 1
    126a:	4c 93       	st	X, r20
    126c:	11 97       	sbiw	r26, 0x01	; 1
    126e:	12 96       	adiw	r26, 0x02	; 2
    1270:	3c 93       	st	X, r19
    1272:	06 c0       	rjmp	.+12     	; 0x1280 <dtoa_prf+0xc2>
    1274:	3e e6       	ldi	r19, 0x6E	; 110
    1276:	f6 01       	movw	r30, r12
    1278:	30 83       	st	Z, r19
    127a:	41 e6       	ldi	r20, 0x61	; 97
    127c:	41 83       	std	Z+1, r20	; 0x01
    127e:	32 83       	std	Z+2, r19	; 0x02
    1280:	fc 01       	movw	r30, r24
    1282:	32 2f       	mov	r19, r18
    1284:	40 e2       	ldi	r20, 0x20	; 32
    1286:	33 23       	and	r19, r19
    1288:	09 f4       	brne	.+2      	; 0x128c <dtoa_prf+0xce>
    128a:	42 c0       	rjmp	.+132    	; 0x1310 <dtoa_prf+0x152>
    128c:	41 93       	st	Z+, r20
    128e:	31 50       	subi	r19, 0x01	; 1
    1290:	fa cf       	rjmp	.-12     	; 0x1286 <dtoa_prf+0xc8>
    1292:	42 ff       	sbrs	r20, 2
    1294:	44 c0       	rjmp	.+136    	; 0x131e <dtoa_prf+0x160>
    1296:	91 11       	cpse	r25, r1
    1298:	02 c0       	rjmp	.+4      	; 0x129e <dtoa_prf+0xe0>
    129a:	83 e0       	ldi	r24, 0x03	; 3
    129c:	01 c0       	rjmp	.+2      	; 0x12a0 <dtoa_prf+0xe2>
    129e:	84 e0       	ldi	r24, 0x04	; 4
    12a0:	81 17       	cp	r24, r17
    12a2:	18 f4       	brcc	.+6      	; 0x12aa <dtoa_prf+0xec>
    12a4:	21 2f       	mov	r18, r17
    12a6:	28 1b       	sub	r18, r24
    12a8:	01 c0       	rjmp	.+2      	; 0x12ac <dtoa_prf+0xee>
    12aa:	20 e0       	ldi	r18, 0x00	; 0
    12ac:	51 11       	cpse	r21, r1
    12ae:	0b c0       	rjmp	.+22     	; 0x12c6 <dtoa_prf+0x108>
    12b0:	f6 01       	movw	r30, r12
    12b2:	82 2f       	mov	r24, r18
    12b4:	30 e2       	ldi	r19, 0x20	; 32
    12b6:	88 23       	and	r24, r24
    12b8:	19 f0       	breq	.+6      	; 0x12c0 <dtoa_prf+0x102>
    12ba:	31 93       	st	Z+, r19
    12bc:	81 50       	subi	r24, 0x01	; 1
    12be:	fb cf       	rjmp	.-10     	; 0x12b6 <dtoa_prf+0xf8>
    12c0:	c2 0e       	add	r12, r18
    12c2:	d1 1c       	adc	r13, r1
    12c4:	20 e0       	ldi	r18, 0x00	; 0
    12c6:	99 23       	and	r25, r25
    12c8:	29 f0       	breq	.+10     	; 0x12d4 <dtoa_prf+0x116>
    12ca:	d6 01       	movw	r26, r12
    12cc:	9c 93       	st	X, r25
    12ce:	f6 01       	movw	r30, r12
    12d0:	31 96       	adiw	r30, 0x01	; 1
    12d2:	6f 01       	movw	r12, r30
    12d4:	c6 01       	movw	r24, r12
    12d6:	03 96       	adiw	r24, 0x03	; 3
    12d8:	e2 fe       	sbrs	r14, 2
    12da:	0b c0       	rjmp	.+22     	; 0x12f2 <dtoa_prf+0x134>
    12dc:	39 e4       	ldi	r19, 0x49	; 73
    12de:	d6 01       	movw	r26, r12
    12e0:	3c 93       	st	X, r19
    12e2:	3e e4       	ldi	r19, 0x4E	; 78
    12e4:	11 96       	adiw	r26, 0x01	; 1
    12e6:	3c 93       	st	X, r19
    12e8:	11 97       	sbiw	r26, 0x01	; 1
    12ea:	36 e4       	ldi	r19, 0x46	; 70
    12ec:	12 96       	adiw	r26, 0x02	; 2
    12ee:	3c 93       	st	X, r19
    12f0:	07 c0       	rjmp	.+14     	; 0x1300 <dtoa_prf+0x142>
    12f2:	39 e6       	ldi	r19, 0x69	; 105
    12f4:	f6 01       	movw	r30, r12
    12f6:	30 83       	st	Z, r19
    12f8:	3e e6       	ldi	r19, 0x6E	; 110
    12fa:	31 83       	std	Z+1, r19	; 0x01
    12fc:	36 e6       	ldi	r19, 0x66	; 102
    12fe:	32 83       	std	Z+2, r19	; 0x02
    1300:	fc 01       	movw	r30, r24
    1302:	32 2f       	mov	r19, r18
    1304:	40 e2       	ldi	r20, 0x20	; 32
    1306:	33 23       	and	r19, r19
    1308:	19 f0       	breq	.+6      	; 0x1310 <dtoa_prf+0x152>
    130a:	41 93       	st	Z+, r20
    130c:	31 50       	subi	r19, 0x01	; 1
    130e:	fb cf       	rjmp	.-10     	; 0x1306 <dtoa_prf+0x148>
    1310:	fc 01       	movw	r30, r24
    1312:	e2 0f       	add	r30, r18
    1314:	f1 1d       	adc	r31, r1
    1316:	10 82       	st	Z, r1
    1318:	8e ef       	ldi	r24, 0xFE	; 254
    131a:	9f ef       	ldi	r25, 0xFF	; 255
    131c:	a6 c0       	rjmp	.+332    	; 0x146a <dtoa_prf+0x2ac>
    131e:	21 e0       	ldi	r18, 0x01	; 1
    1320:	30 e0       	ldi	r19, 0x00	; 0
    1322:	91 11       	cpse	r25, r1
    1324:	02 c0       	rjmp	.+4      	; 0x132a <dtoa_prf+0x16c>
    1326:	20 e0       	ldi	r18, 0x00	; 0
    1328:	30 e0       	ldi	r19, 0x00	; 0
    132a:	16 16       	cp	r1, r22
    132c:	17 06       	cpc	r1, r23
    132e:	1c f4       	brge	.+6      	; 0x1336 <dtoa_prf+0x178>
    1330:	fb 01       	movw	r30, r22
    1332:	31 96       	adiw	r30, 0x01	; 1
    1334:	02 c0       	rjmp	.+4      	; 0x133a <dtoa_prf+0x17c>
    1336:	e1 e0       	ldi	r30, 0x01	; 1
    1338:	f0 e0       	ldi	r31, 0x00	; 0
    133a:	2e 0f       	add	r18, r30
    133c:	3f 1f       	adc	r19, r31
    133e:	bb 20       	and	r11, r11
    1340:	21 f0       	breq	.+8      	; 0x134a <dtoa_prf+0x18c>
    1342:	eb 2d       	mov	r30, r11
    1344:	f0 e0       	ldi	r31, 0x00	; 0
    1346:	31 96       	adiw	r30, 0x01	; 1
    1348:	02 c0       	rjmp	.+4      	; 0x134e <dtoa_prf+0x190>
    134a:	e0 e0       	ldi	r30, 0x00	; 0
    134c:	f0 e0       	ldi	r31, 0x00	; 0
    134e:	2e 0f       	add	r18, r30
    1350:	3f 1f       	adc	r19, r31
    1352:	e1 2f       	mov	r30, r17
    1354:	f0 e0       	ldi	r31, 0x00	; 0
    1356:	2e 17       	cp	r18, r30
    1358:	3f 07       	cpc	r19, r31
    135a:	1c f4       	brge	.+6      	; 0x1362 <dtoa_prf+0x1a4>
    135c:	12 1b       	sub	r17, r18
    135e:	21 2f       	mov	r18, r17
    1360:	01 c0       	rjmp	.+2      	; 0x1364 <dtoa_prf+0x1a6>
    1362:	20 e0       	ldi	r18, 0x00	; 0
    1364:	8e 2d       	mov	r24, r14
    1366:	88 71       	andi	r24, 0x18	; 24
    1368:	59 f4       	brne	.+22     	; 0x1380 <dtoa_prf+0x1c2>
    136a:	f6 01       	movw	r30, r12
    136c:	82 2f       	mov	r24, r18
    136e:	30 e2       	ldi	r19, 0x20	; 32
    1370:	88 23       	and	r24, r24
    1372:	19 f0       	breq	.+6      	; 0x137a <dtoa_prf+0x1bc>
    1374:	31 93       	st	Z+, r19
    1376:	81 50       	subi	r24, 0x01	; 1
    1378:	fb cf       	rjmp	.-10     	; 0x1370 <dtoa_prf+0x1b2>
    137a:	c2 0e       	add	r12, r18
    137c:	d1 1c       	adc	r13, r1
    137e:	20 e0       	ldi	r18, 0x00	; 0
    1380:	99 23       	and	r25, r25
    1382:	29 f0       	breq	.+10     	; 0x138e <dtoa_prf+0x1d0>
    1384:	d6 01       	movw	r26, r12
    1386:	9c 93       	st	X, r25
    1388:	f6 01       	movw	r30, r12
    138a:	31 96       	adiw	r30, 0x01	; 1
    138c:	6f 01       	movw	r12, r30
    138e:	51 11       	cpse	r21, r1
    1390:	0b c0       	rjmp	.+22     	; 0x13a8 <dtoa_prf+0x1ea>
    1392:	f6 01       	movw	r30, r12
    1394:	82 2f       	mov	r24, r18
    1396:	90 e3       	ldi	r25, 0x30	; 48
    1398:	88 23       	and	r24, r24
    139a:	19 f0       	breq	.+6      	; 0x13a2 <dtoa_prf+0x1e4>
    139c:	91 93       	st	Z+, r25
    139e:	81 50       	subi	r24, 0x01	; 1
    13a0:	fb cf       	rjmp	.-10     	; 0x1398 <dtoa_prf+0x1da>
    13a2:	c2 0e       	add	r12, r18
    13a4:	d1 1c       	adc	r13, r1
    13a6:	20 e0       	ldi	r18, 0x00	; 0
    13a8:	0f 2d       	mov	r16, r15
    13aa:	06 0f       	add	r16, r22
    13ac:	9a 81       	ldd	r25, Y+2	; 0x02
    13ae:	34 2f       	mov	r19, r20
    13b0:	30 71       	andi	r19, 0x10	; 16
    13b2:	44 ff       	sbrs	r20, 4
    13b4:	03 c0       	rjmp	.+6      	; 0x13bc <dtoa_prf+0x1fe>
    13b6:	91 33       	cpi	r25, 0x31	; 49
    13b8:	09 f4       	brne	.+2      	; 0x13bc <dtoa_prf+0x1fe>
    13ba:	01 50       	subi	r16, 0x01	; 1
    13bc:	10 16       	cp	r1, r16
    13be:	24 f4       	brge	.+8      	; 0x13c8 <dtoa_prf+0x20a>
    13c0:	09 30       	cpi	r16, 0x09	; 9
    13c2:	18 f0       	brcs	.+6      	; 0x13ca <dtoa_prf+0x20c>
    13c4:	08 e0       	ldi	r16, 0x08	; 8
    13c6:	01 c0       	rjmp	.+2      	; 0x13ca <dtoa_prf+0x20c>
    13c8:	01 e0       	ldi	r16, 0x01	; 1
    13ca:	ab 01       	movw	r20, r22
    13cc:	77 ff       	sbrs	r23, 7
    13ce:	02 c0       	rjmp	.+4      	; 0x13d4 <dtoa_prf+0x216>
    13d0:	40 e0       	ldi	r20, 0x00	; 0
    13d2:	50 e0       	ldi	r21, 0x00	; 0
    13d4:	fb 01       	movw	r30, r22
    13d6:	e4 1b       	sub	r30, r20
    13d8:	f5 0b       	sbc	r31, r21
    13da:	a1 e0       	ldi	r26, 0x01	; 1
    13dc:	b0 e0       	ldi	r27, 0x00	; 0
    13de:	ac 0f       	add	r26, r28
    13e0:	bd 1f       	adc	r27, r29
    13e2:	ea 0f       	add	r30, r26
    13e4:	fb 1f       	adc	r31, r27
    13e6:	8e e2       	ldi	r24, 0x2E	; 46
    13e8:	a8 2e       	mov	r10, r24
    13ea:	4b 01       	movw	r8, r22
    13ec:	80 1a       	sub	r8, r16
    13ee:	91 08       	sbc	r9, r1
    13f0:	0b 2d       	mov	r16, r11
    13f2:	10 e0       	ldi	r17, 0x00	; 0
    13f4:	11 95       	neg	r17
    13f6:	01 95       	neg	r16
    13f8:	11 09       	sbc	r17, r1
    13fa:	4f 3f       	cpi	r20, 0xFF	; 255
    13fc:	bf ef       	ldi	r27, 0xFF	; 255
    13fe:	5b 07       	cpc	r21, r27
    1400:	21 f4       	brne	.+8      	; 0x140a <dtoa_prf+0x24c>
    1402:	d6 01       	movw	r26, r12
    1404:	ac 92       	st	X, r10
    1406:	11 96       	adiw	r26, 0x01	; 1
    1408:	6d 01       	movw	r12, r26
    140a:	64 17       	cp	r22, r20
    140c:	75 07       	cpc	r23, r21
    140e:	2c f0       	brlt	.+10     	; 0x141a <dtoa_prf+0x25c>
    1410:	84 16       	cp	r8, r20
    1412:	95 06       	cpc	r9, r21
    1414:	14 f4       	brge	.+4      	; 0x141a <dtoa_prf+0x25c>
    1416:	81 81       	ldd	r24, Z+1	; 0x01
    1418:	01 c0       	rjmp	.+2      	; 0x141c <dtoa_prf+0x25e>
    141a:	80 e3       	ldi	r24, 0x30	; 48
    141c:	41 50       	subi	r20, 0x01	; 1
    141e:	51 09       	sbc	r21, r1
    1420:	31 96       	adiw	r30, 0x01	; 1
    1422:	d6 01       	movw	r26, r12
    1424:	11 96       	adiw	r26, 0x01	; 1
    1426:	7d 01       	movw	r14, r26
    1428:	40 17       	cp	r20, r16
    142a:	51 07       	cpc	r21, r17
    142c:	24 f0       	brlt	.+8      	; 0x1436 <dtoa_prf+0x278>
    142e:	d6 01       	movw	r26, r12
    1430:	8c 93       	st	X, r24
    1432:	67 01       	movw	r12, r14
    1434:	e2 cf       	rjmp	.-60     	; 0x13fa <dtoa_prf+0x23c>
    1436:	64 17       	cp	r22, r20
    1438:	75 07       	cpc	r23, r21
    143a:	39 f4       	brne	.+14     	; 0x144a <dtoa_prf+0x28c>
    143c:	96 33       	cpi	r25, 0x36	; 54
    143e:	20 f4       	brcc	.+8      	; 0x1448 <dtoa_prf+0x28a>
    1440:	95 33       	cpi	r25, 0x35	; 53
    1442:	19 f4       	brne	.+6      	; 0x144a <dtoa_prf+0x28c>
    1444:	31 11       	cpse	r19, r1
    1446:	01 c0       	rjmp	.+2      	; 0x144a <dtoa_prf+0x28c>
    1448:	81 e3       	ldi	r24, 0x31	; 49
    144a:	f6 01       	movw	r30, r12
    144c:	80 83       	st	Z, r24
    144e:	f7 01       	movw	r30, r14
    1450:	82 2f       	mov	r24, r18
    1452:	90 e2       	ldi	r25, 0x20	; 32
    1454:	88 23       	and	r24, r24
    1456:	19 f0       	breq	.+6      	; 0x145e <dtoa_prf+0x2a0>
    1458:	91 93       	st	Z+, r25
    145a:	81 50       	subi	r24, 0x01	; 1
    145c:	fb cf       	rjmp	.-10     	; 0x1454 <dtoa_prf+0x296>
    145e:	f7 01       	movw	r30, r14
    1460:	e2 0f       	add	r30, r18
    1462:	f1 1d       	adc	r31, r1
    1464:	10 82       	st	Z, r1
    1466:	80 e0       	ldi	r24, 0x00	; 0
    1468:	90 e0       	ldi	r25, 0x00	; 0
    146a:	29 96       	adiw	r28, 0x09	; 9
    146c:	ec e0       	ldi	r30, 0x0C	; 12
    146e:	0c 94 c0 0c 	jmp	0x1980	; 0x1980 <__epilogue_restores__+0xc>

00001472 <strtod>:
    1472:	a0 e0       	ldi	r26, 0x00	; 0
    1474:	b0 e0       	ldi	r27, 0x00	; 0
    1476:	ef e3       	ldi	r30, 0x3F	; 63
    1478:	fa e0       	ldi	r31, 0x0A	; 10
    147a:	0c 94 a4 0c 	jmp	0x1948	; 0x1948 <__prologue_saves__+0xc>
    147e:	ec 01       	movw	r28, r24
    1480:	6b 01       	movw	r12, r22
    1482:	61 15       	cp	r22, r1
    1484:	71 05       	cpc	r23, r1
    1486:	19 f0       	breq	.+6      	; 0x148e <strtod+0x1c>
    1488:	fb 01       	movw	r30, r22
    148a:	91 83       	std	Z+1, r25	; 0x01
    148c:	80 83       	st	Z, r24
    148e:	7e 01       	movw	r14, r28
    1490:	ff ef       	ldi	r31, 0xFF	; 255
    1492:	ef 1a       	sub	r14, r31
    1494:	ff 0a       	sbc	r15, r31
    1496:	08 81       	ld	r16, Y
    1498:	80 2f       	mov	r24, r16
    149a:	90 e0       	ldi	r25, 0x00	; 0
    149c:	0e 94 5f 0c 	call	0x18be	; 0x18be <isspace>
    14a0:	89 2b       	or	r24, r25
    14a2:	11 f0       	breq	.+4      	; 0x14a8 <strtod+0x36>
    14a4:	e7 01       	movw	r28, r14
    14a6:	f3 cf       	rjmp	.-26     	; 0x148e <strtod+0x1c>
    14a8:	0d 32       	cpi	r16, 0x2D	; 45
    14aa:	39 f4       	brne	.+14     	; 0x14ba <strtod+0x48>
    14ac:	7e 01       	movw	r14, r28
    14ae:	82 e0       	ldi	r24, 0x02	; 2
    14b0:	e8 0e       	add	r14, r24
    14b2:	f1 1c       	adc	r15, r1
    14b4:	09 81       	ldd	r16, Y+1	; 0x01
    14b6:	11 e0       	ldi	r17, 0x01	; 1
    14b8:	08 c0       	rjmp	.+16     	; 0x14ca <strtod+0x58>
    14ba:	0b 32       	cpi	r16, 0x2B	; 43
    14bc:	29 f4       	brne	.+10     	; 0x14c8 <strtod+0x56>
    14be:	7e 01       	movw	r14, r28
    14c0:	92 e0       	ldi	r25, 0x02	; 2
    14c2:	e9 0e       	add	r14, r25
    14c4:	f1 1c       	adc	r15, r1
    14c6:	09 81       	ldd	r16, Y+1	; 0x01
    14c8:	10 e0       	ldi	r17, 0x00	; 0
    14ca:	e7 01       	movw	r28, r14
    14cc:	21 97       	sbiw	r28, 0x01	; 1
    14ce:	43 e0       	ldi	r20, 0x03	; 3
    14d0:	50 e0       	ldi	r21, 0x00	; 0
    14d2:	6c e5       	ldi	r22, 0x5C	; 92
    14d4:	70 e0       	ldi	r23, 0x00	; 0
    14d6:	ce 01       	movw	r24, r28
    14d8:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <strncasecmp_P>
    14dc:	89 2b       	or	r24, r25
    14de:	c1 f4       	brne	.+48     	; 0x1510 <strtod+0x9e>
    14e0:	23 96       	adiw	r28, 0x03	; 3
    14e2:	45 e0       	ldi	r20, 0x05	; 5
    14e4:	50 e0       	ldi	r21, 0x00	; 0
    14e6:	67 e5       	ldi	r22, 0x57	; 87
    14e8:	70 e0       	ldi	r23, 0x00	; 0
    14ea:	ce 01       	movw	r24, r28
    14ec:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <strncasecmp_P>
    14f0:	89 2b       	or	r24, r25
    14f2:	09 f4       	brne	.+2      	; 0x14f6 <strtod+0x84>
    14f4:	25 96       	adiw	r28, 0x05	; 5
    14f6:	c1 14       	cp	r12, r1
    14f8:	d1 04       	cpc	r13, r1
    14fa:	19 f0       	breq	.+6      	; 0x1502 <strtod+0x90>
    14fc:	f6 01       	movw	r30, r12
    14fe:	d1 83       	std	Z+1, r29	; 0x01
    1500:	c0 83       	st	Z, r28
    1502:	11 11       	cpse	r17, r1
    1504:	f6 c0       	rjmp	.+492    	; 0x16f2 <strtod+0x280>
    1506:	60 e0       	ldi	r22, 0x00	; 0
    1508:	70 e0       	ldi	r23, 0x00	; 0
    150a:	80 e8       	ldi	r24, 0x80	; 128
    150c:	9f e7       	ldi	r25, 0x7F	; 127
    150e:	fa c0       	rjmp	.+500    	; 0x1704 <strtod+0x292>
    1510:	43 e0       	ldi	r20, 0x03	; 3
    1512:	50 e0       	ldi	r21, 0x00	; 0
    1514:	64 e5       	ldi	r22, 0x54	; 84
    1516:	70 e0       	ldi	r23, 0x00	; 0
    1518:	ce 01       	movw	r24, r28
    151a:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <strncasecmp_P>
    151e:	89 2b       	or	r24, r25
    1520:	59 f4       	brne	.+22     	; 0x1538 <strtod+0xc6>
    1522:	c1 14       	cp	r12, r1
    1524:	d1 04       	cpc	r13, r1
    1526:	09 f4       	brne	.+2      	; 0x152a <strtod+0xb8>
    1528:	e9 c0       	rjmp	.+466    	; 0x16fc <strtod+0x28a>
    152a:	f2 e0       	ldi	r31, 0x02	; 2
    152c:	ef 0e       	add	r14, r31
    152e:	f1 1c       	adc	r15, r1
    1530:	f6 01       	movw	r30, r12
    1532:	f1 82       	std	Z+1, r15	; 0x01
    1534:	e0 82       	st	Z, r14
    1536:	e2 c0       	rjmp	.+452    	; 0x16fc <strtod+0x28a>
    1538:	20 e0       	ldi	r18, 0x00	; 0
    153a:	30 e0       	ldi	r19, 0x00	; 0
    153c:	a9 01       	movw	r20, r18
    153e:	c0 e0       	ldi	r28, 0x00	; 0
    1540:	d0 e0       	ldi	r29, 0x00	; 0
    1542:	f7 01       	movw	r30, r14
    1544:	80 ed       	ldi	r24, 0xD0	; 208
    1546:	a8 2e       	mov	r10, r24
    1548:	a0 0e       	add	r10, r16
    154a:	89 e0       	ldi	r24, 0x09	; 9
    154c:	8a 15       	cp	r24, r10
    154e:	30 f1       	brcs	.+76     	; 0x159c <strtod+0x12a>
    1550:	91 2f       	mov	r25, r17
    1552:	92 60       	ori	r25, 0x02	; 2
    1554:	b9 2e       	mov	r11, r25
    1556:	81 2f       	mov	r24, r17
    1558:	88 70       	andi	r24, 0x08	; 8
    155a:	12 ff       	sbrs	r17, 2
    155c:	04 c0       	rjmp	.+8      	; 0x1566 <strtod+0xf4>
    155e:	81 11       	cpse	r24, r1
    1560:	24 c0       	rjmp	.+72     	; 0x15aa <strtod+0x138>
    1562:	21 96       	adiw	r28, 0x01	; 1
    1564:	22 c0       	rjmp	.+68     	; 0x15aa <strtod+0x138>
    1566:	81 11       	cpse	r24, r1
    1568:	21 97       	sbiw	r28, 0x01	; 1
    156a:	a5 e0       	ldi	r26, 0x05	; 5
    156c:	b0 e0       	ldi	r27, 0x00	; 0
    156e:	0e 94 93 0c 	call	0x1926	; 0x1926 <__muluhisi3>
    1572:	dc 01       	movw	r26, r24
    1574:	cb 01       	movw	r24, r22
    1576:	88 0f       	add	r24, r24
    1578:	99 1f       	adc	r25, r25
    157a:	aa 1f       	adc	r26, r26
    157c:	bb 1f       	adc	r27, r27
    157e:	9c 01       	movw	r18, r24
    1580:	ad 01       	movw	r20, r26
    1582:	2a 0d       	add	r18, r10
    1584:	31 1d       	adc	r19, r1
    1586:	41 1d       	adc	r20, r1
    1588:	51 1d       	adc	r21, r1
    158a:	28 39       	cpi	r18, 0x98	; 152
    158c:	89 e9       	ldi	r24, 0x99	; 153
    158e:	38 07       	cpc	r19, r24
    1590:	48 07       	cpc	r20, r24
    1592:	89 e1       	ldi	r24, 0x19	; 25
    1594:	58 07       	cpc	r21, r24
    1596:	48 f0       	brcs	.+18     	; 0x15aa <strtod+0x138>
    1598:	16 60       	ori	r17, 0x06	; 6
    159a:	06 c0       	rjmp	.+12     	; 0x15a8 <strtod+0x136>
    159c:	9e ef       	ldi	r25, 0xFE	; 254
    159e:	a9 12       	cpse	r10, r25
    15a0:	0a c0       	rjmp	.+20     	; 0x15b6 <strtod+0x144>
    15a2:	13 fd       	sbrc	r17, 3
    15a4:	40 c0       	rjmp	.+128    	; 0x1626 <strtod+0x1b4>
    15a6:	18 60       	ori	r17, 0x08	; 8
    15a8:	b1 2e       	mov	r11, r17
    15aa:	8f ef       	ldi	r24, 0xFF	; 255
    15ac:	e8 1a       	sub	r14, r24
    15ae:	f8 0a       	sbc	r15, r24
    15b0:	00 81       	ld	r16, Z
    15b2:	1b 2d       	mov	r17, r11
    15b4:	c6 cf       	rjmp	.-116    	; 0x1542 <strtod+0xd0>
    15b6:	80 2f       	mov	r24, r16
    15b8:	8f 7d       	andi	r24, 0xDF	; 223
    15ba:	85 34       	cpi	r24, 0x45	; 69
    15bc:	a1 f5       	brne	.+104    	; 0x1626 <strtod+0x1b4>
    15be:	80 81       	ld	r24, Z
    15c0:	8d 32       	cpi	r24, 0x2D	; 45
    15c2:	11 f4       	brne	.+4      	; 0x15c8 <strtod+0x156>
    15c4:	10 61       	ori	r17, 0x10	; 16
    15c6:	06 c0       	rjmp	.+12     	; 0x15d4 <strtod+0x162>
    15c8:	8b 32       	cpi	r24, 0x2B	; 43
    15ca:	21 f0       	breq	.+8      	; 0x15d4 <strtod+0x162>
    15cc:	31 96       	adiw	r30, 0x01	; 1
    15ce:	61 e0       	ldi	r22, 0x01	; 1
    15d0:	70 e0       	ldi	r23, 0x00	; 0
    15d2:	04 c0       	rjmp	.+8      	; 0x15dc <strtod+0x16a>
    15d4:	81 81       	ldd	r24, Z+1	; 0x01
    15d6:	32 96       	adiw	r30, 0x02	; 2
    15d8:	62 e0       	ldi	r22, 0x02	; 2
    15da:	70 e0       	ldi	r23, 0x00	; 0
    15dc:	80 53       	subi	r24, 0x30	; 48
    15de:	8a 30       	cpi	r24, 0x0A	; 10
    15e0:	18 f0       	brcs	.+6      	; 0x15e8 <strtod+0x176>
    15e2:	e6 1b       	sub	r30, r22
    15e4:	f7 0b       	sbc	r31, r23
    15e6:	1f c0       	rjmp	.+62     	; 0x1626 <strtod+0x1b4>
    15e8:	60 e0       	ldi	r22, 0x00	; 0
    15ea:	70 e0       	ldi	r23, 0x00	; 0
    15ec:	60 38       	cpi	r22, 0x80	; 128
    15ee:	9c e0       	ldi	r25, 0x0C	; 12
    15f0:	79 07       	cpc	r23, r25
    15f2:	5c f4       	brge	.+22     	; 0x160a <strtod+0x198>
    15f4:	db 01       	movw	r26, r22
    15f6:	aa 0f       	add	r26, r26
    15f8:	bb 1f       	adc	r27, r27
    15fa:	aa 0f       	add	r26, r26
    15fc:	bb 1f       	adc	r27, r27
    15fe:	6a 0f       	add	r22, r26
    1600:	7b 1f       	adc	r23, r27
    1602:	66 0f       	add	r22, r22
    1604:	77 1f       	adc	r23, r23
    1606:	68 0f       	add	r22, r24
    1608:	71 1d       	adc	r23, r1
    160a:	31 96       	adiw	r30, 0x01	; 1
    160c:	df 01       	movw	r26, r30
    160e:	11 97       	sbiw	r26, 0x01	; 1
    1610:	8c 91       	ld	r24, X
    1612:	80 53       	subi	r24, 0x30	; 48
    1614:	8a 30       	cpi	r24, 0x0A	; 10
    1616:	50 f3       	brcs	.-44     	; 0x15ec <strtod+0x17a>
    1618:	14 ff       	sbrs	r17, 4
    161a:	03 c0       	rjmp	.+6      	; 0x1622 <strtod+0x1b0>
    161c:	71 95       	neg	r23
    161e:	61 95       	neg	r22
    1620:	71 09       	sbc	r23, r1
    1622:	c6 0f       	add	r28, r22
    1624:	d7 1f       	adc	r29, r23
    1626:	11 ff       	sbrs	r17, 1
    1628:	08 c0       	rjmp	.+16     	; 0x163a <strtod+0x1c8>
    162a:	c1 14       	cp	r12, r1
    162c:	d1 04       	cpc	r13, r1
    162e:	29 f0       	breq	.+10     	; 0x163a <strtod+0x1c8>
    1630:	cf 01       	movw	r24, r30
    1632:	01 97       	sbiw	r24, 0x01	; 1
    1634:	f6 01       	movw	r30, r12
    1636:	91 83       	std	Z+1, r25	; 0x01
    1638:	80 83       	st	Z, r24
    163a:	ca 01       	movw	r24, r20
    163c:	b9 01       	movw	r22, r18
    163e:	0e 94 4a 07 	call	0xe94	; 0xe94 <__floatunsisf>
    1642:	21 2f       	mov	r18, r17
    1644:	23 70       	andi	r18, 0x03	; 3
    1646:	23 30       	cpi	r18, 0x03	; 3
    1648:	19 f0       	breq	.+6      	; 0x1650 <strtod+0x1de>
    164a:	4b 01       	movw	r8, r22
    164c:	5c 01       	movw	r10, r24
    164e:	06 c0       	rjmp	.+12     	; 0x165c <strtod+0x1ea>
    1650:	4b 01       	movw	r8, r22
    1652:	5c 01       	movw	r10, r24
    1654:	b7 fa       	bst	r11, 7
    1656:	b0 94       	com	r11
    1658:	b7 f8       	bld	r11, 7
    165a:	b0 94       	com	r11
    165c:	20 e0       	ldi	r18, 0x00	; 0
    165e:	30 e0       	ldi	r19, 0x00	; 0
    1660:	a9 01       	movw	r20, r18
    1662:	c5 01       	movw	r24, r10
    1664:	b4 01       	movw	r22, r8
    1666:	0e 94 9d 06 	call	0xd3a	; 0xd3a <__cmpsf2>
    166a:	88 23       	and	r24, r24
    166c:	09 f4       	brne	.+2      	; 0x1670 <strtod+0x1fe>
    166e:	3e c0       	rjmp	.+124    	; 0x16ec <strtod+0x27a>
    1670:	d7 ff       	sbrs	r29, 7
    1672:	06 c0       	rjmp	.+12     	; 0x1680 <strtod+0x20e>
    1674:	d1 95       	neg	r29
    1676:	c1 95       	neg	r28
    1678:	d1 09       	sbc	r29, r1
    167a:	03 e7       	ldi	r16, 0x73	; 115
    167c:	10 e0       	ldi	r17, 0x00	; 0
    167e:	02 c0       	rjmp	.+4      	; 0x1684 <strtod+0x212>
    1680:	0b e8       	ldi	r16, 0x8B	; 139
    1682:	10 e0       	ldi	r17, 0x00	; 0
    1684:	68 01       	movw	r12, r16
    1686:	f8 e1       	ldi	r31, 0x18	; 24
    1688:	cf 1a       	sub	r12, r31
    168a:	d1 08       	sbc	r13, r1
    168c:	90 e2       	ldi	r25, 0x20	; 32
    168e:	e9 2e       	mov	r14, r25
    1690:	f1 2c       	mov	r15, r1
    1692:	ce 15       	cp	r28, r14
    1694:	df 05       	cpc	r29, r15
    1696:	74 f0       	brlt	.+28     	; 0x16b4 <strtod+0x242>
    1698:	f8 01       	movw	r30, r16
    169a:	25 91       	lpm	r18, Z+
    169c:	35 91       	lpm	r19, Z+
    169e:	45 91       	lpm	r20, Z+
    16a0:	54 91       	lpm	r21, Z
    16a2:	c5 01       	movw	r24, r10
    16a4:	b4 01       	movw	r22, r8
    16a6:	0e 94 fc 07 	call	0xff8	; 0xff8 <__mulsf3>
    16aa:	4b 01       	movw	r8, r22
    16ac:	5c 01       	movw	r10, r24
    16ae:	ce 19       	sub	r28, r14
    16b0:	df 09       	sbc	r29, r15
    16b2:	ef cf       	rjmp	.-34     	; 0x1692 <strtod+0x220>
    16b4:	04 50       	subi	r16, 0x04	; 4
    16b6:	11 09       	sbc	r17, r1
    16b8:	f5 94       	asr	r15
    16ba:	e7 94       	ror	r14
    16bc:	0c 15       	cp	r16, r12
    16be:	1d 05       	cpc	r17, r13
    16c0:	41 f7       	brne	.-48     	; 0x1692 <strtod+0x220>
    16c2:	8a 2d       	mov	r24, r10
    16c4:	88 0f       	add	r24, r24
    16c6:	8b 2d       	mov	r24, r11
    16c8:	88 1f       	adc	r24, r24
    16ca:	8f 3f       	cpi	r24, 0xFF	; 255
    16cc:	49 f0       	breq	.+18     	; 0x16e0 <strtod+0x26e>
    16ce:	20 e0       	ldi	r18, 0x00	; 0
    16d0:	30 e0       	ldi	r19, 0x00	; 0
    16d2:	a9 01       	movw	r20, r18
    16d4:	c5 01       	movw	r24, r10
    16d6:	b4 01       	movw	r22, r8
    16d8:	0e 94 9d 06 	call	0xd3a	; 0xd3a <__cmpsf2>
    16dc:	81 11       	cpse	r24, r1
    16de:	06 c0       	rjmp	.+12     	; 0x16ec <strtod+0x27a>
    16e0:	82 e2       	ldi	r24, 0x22	; 34
    16e2:	90 e0       	ldi	r25, 0x00	; 0
    16e4:	90 93 c3 02 	sts	0x02C3, r25	; 0x8002c3 <errno+0x1>
    16e8:	80 93 c2 02 	sts	0x02C2, r24	; 0x8002c2 <errno>
    16ec:	c5 01       	movw	r24, r10
    16ee:	b4 01       	movw	r22, r8
    16f0:	09 c0       	rjmp	.+18     	; 0x1704 <strtod+0x292>
    16f2:	60 e0       	ldi	r22, 0x00	; 0
    16f4:	70 e0       	ldi	r23, 0x00	; 0
    16f6:	80 e8       	ldi	r24, 0x80	; 128
    16f8:	9f ef       	ldi	r25, 0xFF	; 255
    16fa:	04 c0       	rjmp	.+8      	; 0x1704 <strtod+0x292>
    16fc:	60 e0       	ldi	r22, 0x00	; 0
    16fe:	70 e0       	ldi	r23, 0x00	; 0
    1700:	80 ec       	ldi	r24, 0xC0	; 192
    1702:	9f e7       	ldi	r25, 0x7F	; 127
    1704:	cd b7       	in	r28, 0x3d	; 61
    1706:	de b7       	in	r29, 0x3e	; 62
    1708:	ec e0       	ldi	r30, 0x0C	; 12
    170a:	0c 94 c0 0c 	jmp	0x1980	; 0x1980 <__epilogue_restores__+0xc>

0000170e <__ftoa_engine>:
    170e:	28 30       	cpi	r18, 0x08	; 8
    1710:	08 f0       	brcs	.+2      	; 0x1714 <__ftoa_engine+0x6>
    1712:	27 e0       	ldi	r18, 0x07	; 7
    1714:	33 27       	eor	r19, r19
    1716:	da 01       	movw	r26, r20
    1718:	99 0f       	add	r25, r25
    171a:	31 1d       	adc	r19, r1
    171c:	87 fd       	sbrc	r24, 7
    171e:	91 60       	ori	r25, 0x01	; 1
    1720:	00 96       	adiw	r24, 0x00	; 0
    1722:	61 05       	cpc	r22, r1
    1724:	71 05       	cpc	r23, r1
    1726:	39 f4       	brne	.+14     	; 0x1736 <__ftoa_engine+0x28>
    1728:	32 60       	ori	r19, 0x02	; 2
    172a:	2e 5f       	subi	r18, 0xFE	; 254
    172c:	3d 93       	st	X+, r19
    172e:	30 e3       	ldi	r19, 0x30	; 48
    1730:	2a 95       	dec	r18
    1732:	e1 f7       	brne	.-8      	; 0x172c <__ftoa_engine+0x1e>
    1734:	08 95       	ret
    1736:	9f 3f       	cpi	r25, 0xFF	; 255
    1738:	30 f0       	brcs	.+12     	; 0x1746 <__ftoa_engine+0x38>
    173a:	80 38       	cpi	r24, 0x80	; 128
    173c:	71 05       	cpc	r23, r1
    173e:	61 05       	cpc	r22, r1
    1740:	09 f0       	breq	.+2      	; 0x1744 <__ftoa_engine+0x36>
    1742:	3c 5f       	subi	r19, 0xFC	; 252
    1744:	3c 5f       	subi	r19, 0xFC	; 252
    1746:	3d 93       	st	X+, r19
    1748:	91 30       	cpi	r25, 0x01	; 1
    174a:	08 f0       	brcs	.+2      	; 0x174e <__ftoa_engine+0x40>
    174c:	80 68       	ori	r24, 0x80	; 128
    174e:	91 1d       	adc	r25, r1
    1750:	df 93       	push	r29
    1752:	cf 93       	push	r28
    1754:	1f 93       	push	r17
    1756:	0f 93       	push	r16
    1758:	ff 92       	push	r15
    175a:	ef 92       	push	r14
    175c:	19 2f       	mov	r17, r25
    175e:	98 7f       	andi	r25, 0xF8	; 248
    1760:	96 95       	lsr	r25
    1762:	e9 2f       	mov	r30, r25
    1764:	96 95       	lsr	r25
    1766:	96 95       	lsr	r25
    1768:	e9 0f       	add	r30, r25
    176a:	ff 27       	eor	r31, r31
    176c:	e7 51       	subi	r30, 0x17	; 23
    176e:	ff 4f       	sbci	r31, 0xFF	; 255
    1770:	99 27       	eor	r25, r25
    1772:	33 27       	eor	r19, r19
    1774:	ee 24       	eor	r14, r14
    1776:	ff 24       	eor	r15, r15
    1778:	a7 01       	movw	r20, r14
    177a:	e7 01       	movw	r28, r14
    177c:	05 90       	lpm	r0, Z+
    177e:	08 94       	sec
    1780:	07 94       	ror	r0
    1782:	28 f4       	brcc	.+10     	; 0x178e <__ftoa_engine+0x80>
    1784:	36 0f       	add	r19, r22
    1786:	e7 1e       	adc	r14, r23
    1788:	f8 1e       	adc	r15, r24
    178a:	49 1f       	adc	r20, r25
    178c:	51 1d       	adc	r21, r1
    178e:	66 0f       	add	r22, r22
    1790:	77 1f       	adc	r23, r23
    1792:	88 1f       	adc	r24, r24
    1794:	99 1f       	adc	r25, r25
    1796:	06 94       	lsr	r0
    1798:	a1 f7       	brne	.-24     	; 0x1782 <__ftoa_engine+0x74>
    179a:	05 90       	lpm	r0, Z+
    179c:	07 94       	ror	r0
    179e:	28 f4       	brcc	.+10     	; 0x17aa <__ftoa_engine+0x9c>
    17a0:	e7 0e       	add	r14, r23
    17a2:	f8 1e       	adc	r15, r24
    17a4:	49 1f       	adc	r20, r25
    17a6:	56 1f       	adc	r21, r22
    17a8:	c1 1d       	adc	r28, r1
    17aa:	77 0f       	add	r23, r23
    17ac:	88 1f       	adc	r24, r24
    17ae:	99 1f       	adc	r25, r25
    17b0:	66 1f       	adc	r22, r22
    17b2:	06 94       	lsr	r0
    17b4:	a1 f7       	brne	.-24     	; 0x179e <__ftoa_engine+0x90>
    17b6:	05 90       	lpm	r0, Z+
    17b8:	07 94       	ror	r0
    17ba:	28 f4       	brcc	.+10     	; 0x17c6 <__ftoa_engine+0xb8>
    17bc:	f8 0e       	add	r15, r24
    17be:	49 1f       	adc	r20, r25
    17c0:	56 1f       	adc	r21, r22
    17c2:	c7 1f       	adc	r28, r23
    17c4:	d1 1d       	adc	r29, r1
    17c6:	88 0f       	add	r24, r24
    17c8:	99 1f       	adc	r25, r25
    17ca:	66 1f       	adc	r22, r22
    17cc:	77 1f       	adc	r23, r23
    17ce:	06 94       	lsr	r0
    17d0:	a1 f7       	brne	.-24     	; 0x17ba <__ftoa_engine+0xac>
    17d2:	05 90       	lpm	r0, Z+
    17d4:	07 94       	ror	r0
    17d6:	20 f4       	brcc	.+8      	; 0x17e0 <__ftoa_engine+0xd2>
    17d8:	49 0f       	add	r20, r25
    17da:	56 1f       	adc	r21, r22
    17dc:	c7 1f       	adc	r28, r23
    17de:	d8 1f       	adc	r29, r24
    17e0:	99 0f       	add	r25, r25
    17e2:	66 1f       	adc	r22, r22
    17e4:	77 1f       	adc	r23, r23
    17e6:	88 1f       	adc	r24, r24
    17e8:	06 94       	lsr	r0
    17ea:	a9 f7       	brne	.-22     	; 0x17d6 <__ftoa_engine+0xc8>
    17ec:	84 91       	lpm	r24, Z
    17ee:	10 95       	com	r17
    17f0:	17 70       	andi	r17, 0x07	; 7
    17f2:	41 f0       	breq	.+16     	; 0x1804 <__ftoa_engine+0xf6>
    17f4:	d6 95       	lsr	r29
    17f6:	c7 95       	ror	r28
    17f8:	57 95       	ror	r21
    17fa:	47 95       	ror	r20
    17fc:	f7 94       	ror	r15
    17fe:	e7 94       	ror	r14
    1800:	1a 95       	dec	r17
    1802:	c1 f7       	brne	.-16     	; 0x17f4 <__ftoa_engine+0xe6>
    1804:	ef e8       	ldi	r30, 0x8F	; 143
    1806:	f0 e0       	ldi	r31, 0x00	; 0
    1808:	68 94       	set
    180a:	15 90       	lpm	r1, Z+
    180c:	15 91       	lpm	r17, Z+
    180e:	35 91       	lpm	r19, Z+
    1810:	65 91       	lpm	r22, Z+
    1812:	95 91       	lpm	r25, Z+
    1814:	05 90       	lpm	r0, Z+
    1816:	7f e2       	ldi	r23, 0x2F	; 47
    1818:	73 95       	inc	r23
    181a:	e1 18       	sub	r14, r1
    181c:	f1 0a       	sbc	r15, r17
    181e:	43 0b       	sbc	r20, r19
    1820:	56 0b       	sbc	r21, r22
    1822:	c9 0b       	sbc	r28, r25
    1824:	d0 09       	sbc	r29, r0
    1826:	c0 f7       	brcc	.-16     	; 0x1818 <__ftoa_engine+0x10a>
    1828:	e1 0c       	add	r14, r1
    182a:	f1 1e       	adc	r15, r17
    182c:	43 1f       	adc	r20, r19
    182e:	56 1f       	adc	r21, r22
    1830:	c9 1f       	adc	r28, r25
    1832:	d0 1d       	adc	r29, r0
    1834:	7e f4       	brtc	.+30     	; 0x1854 <__ftoa_engine+0x146>
    1836:	70 33       	cpi	r23, 0x30	; 48
    1838:	11 f4       	brne	.+4      	; 0x183e <__ftoa_engine+0x130>
    183a:	8a 95       	dec	r24
    183c:	e6 cf       	rjmp	.-52     	; 0x180a <__ftoa_engine+0xfc>
    183e:	e8 94       	clt
    1840:	01 50       	subi	r16, 0x01	; 1
    1842:	30 f0       	brcs	.+12     	; 0x1850 <__ftoa_engine+0x142>
    1844:	08 0f       	add	r16, r24
    1846:	0a f4       	brpl	.+2      	; 0x184a <__ftoa_engine+0x13c>
    1848:	00 27       	eor	r16, r16
    184a:	02 17       	cp	r16, r18
    184c:	08 f4       	brcc	.+2      	; 0x1850 <__ftoa_engine+0x142>
    184e:	20 2f       	mov	r18, r16
    1850:	23 95       	inc	r18
    1852:	02 2f       	mov	r16, r18
    1854:	7a 33       	cpi	r23, 0x3A	; 58
    1856:	28 f0       	brcs	.+10     	; 0x1862 <__ftoa_engine+0x154>
    1858:	79 e3       	ldi	r23, 0x39	; 57
    185a:	7d 93       	st	X+, r23
    185c:	2a 95       	dec	r18
    185e:	e9 f7       	brne	.-6      	; 0x185a <__ftoa_engine+0x14c>
    1860:	10 c0       	rjmp	.+32     	; 0x1882 <__ftoa_engine+0x174>
    1862:	7d 93       	st	X+, r23
    1864:	2a 95       	dec	r18
    1866:	89 f6       	brne	.-94     	; 0x180a <__ftoa_engine+0xfc>
    1868:	06 94       	lsr	r0
    186a:	97 95       	ror	r25
    186c:	67 95       	ror	r22
    186e:	37 95       	ror	r19
    1870:	17 95       	ror	r17
    1872:	17 94       	ror	r1
    1874:	e1 18       	sub	r14, r1
    1876:	f1 0a       	sbc	r15, r17
    1878:	43 0b       	sbc	r20, r19
    187a:	56 0b       	sbc	r21, r22
    187c:	c9 0b       	sbc	r28, r25
    187e:	d0 09       	sbc	r29, r0
    1880:	98 f0       	brcs	.+38     	; 0x18a8 <__ftoa_engine+0x19a>
    1882:	23 95       	inc	r18
    1884:	7e 91       	ld	r23, -X
    1886:	73 95       	inc	r23
    1888:	7a 33       	cpi	r23, 0x3A	; 58
    188a:	08 f0       	brcs	.+2      	; 0x188e <__ftoa_engine+0x180>
    188c:	70 e3       	ldi	r23, 0x30	; 48
    188e:	7c 93       	st	X, r23
    1890:	20 13       	cpse	r18, r16
    1892:	b8 f7       	brcc	.-18     	; 0x1882 <__ftoa_engine+0x174>
    1894:	7e 91       	ld	r23, -X
    1896:	70 61       	ori	r23, 0x10	; 16
    1898:	7d 93       	st	X+, r23
    189a:	30 f0       	brcs	.+12     	; 0x18a8 <__ftoa_engine+0x19a>
    189c:	83 95       	inc	r24
    189e:	71 e3       	ldi	r23, 0x31	; 49
    18a0:	7d 93       	st	X+, r23
    18a2:	70 e3       	ldi	r23, 0x30	; 48
    18a4:	2a 95       	dec	r18
    18a6:	e1 f7       	brne	.-8      	; 0x18a0 <__ftoa_engine+0x192>
    18a8:	11 24       	eor	r1, r1
    18aa:	ef 90       	pop	r14
    18ac:	ff 90       	pop	r15
    18ae:	0f 91       	pop	r16
    18b0:	1f 91       	pop	r17
    18b2:	cf 91       	pop	r28
    18b4:	df 91       	pop	r29
    18b6:	99 27       	eor	r25, r25
    18b8:	87 fd       	sbrc	r24, 7
    18ba:	90 95       	com	r25
    18bc:	08 95       	ret

000018be <isspace>:
    18be:	91 11       	cpse	r25, r1
    18c0:	0c 94 90 0c 	jmp	0x1920	; 0x1920 <__ctype_isfalse>
    18c4:	80 32       	cpi	r24, 0x20	; 32
    18c6:	19 f0       	breq	.+6      	; 0x18ce <isspace+0x10>
    18c8:	89 50       	subi	r24, 0x09	; 9
    18ca:	85 50       	subi	r24, 0x05	; 5
    18cc:	c8 f7       	brcc	.-14     	; 0x18c0 <isspace+0x2>
    18ce:	08 95       	ret

000018d0 <strncasecmp_P>:
    18d0:	fb 01       	movw	r30, r22
    18d2:	dc 01       	movw	r26, r24
    18d4:	41 50       	subi	r20, 0x01	; 1
    18d6:	50 40       	sbci	r21, 0x00	; 0
    18d8:	88 f0       	brcs	.+34     	; 0x18fc <strncasecmp_P+0x2c>
    18da:	8d 91       	ld	r24, X+
    18dc:	81 34       	cpi	r24, 0x41	; 65
    18de:	1c f0       	brlt	.+6      	; 0x18e6 <strncasecmp_P+0x16>
    18e0:	8b 35       	cpi	r24, 0x5B	; 91
    18e2:	0c f4       	brge	.+2      	; 0x18e6 <strncasecmp_P+0x16>
    18e4:	80 5e       	subi	r24, 0xE0	; 224
    18e6:	65 91       	lpm	r22, Z+
    18e8:	61 34       	cpi	r22, 0x41	; 65
    18ea:	1c f0       	brlt	.+6      	; 0x18f2 <strncasecmp_P+0x22>
    18ec:	6b 35       	cpi	r22, 0x5B	; 91
    18ee:	0c f4       	brge	.+2      	; 0x18f2 <strncasecmp_P+0x22>
    18f0:	60 5e       	subi	r22, 0xE0	; 224
    18f2:	86 1b       	sub	r24, r22
    18f4:	61 11       	cpse	r22, r1
    18f6:	71 f3       	breq	.-36     	; 0x18d4 <strncasecmp_P+0x4>
    18f8:	99 0b       	sbc	r25, r25
    18fa:	08 95       	ret
    18fc:	88 1b       	sub	r24, r24
    18fe:	fc cf       	rjmp	.-8      	; 0x18f8 <strncasecmp_P+0x28>

00001900 <strrev>:
    1900:	dc 01       	movw	r26, r24
    1902:	fc 01       	movw	r30, r24
    1904:	67 2f       	mov	r22, r23
    1906:	71 91       	ld	r23, Z+
    1908:	77 23       	and	r23, r23
    190a:	e1 f7       	brne	.-8      	; 0x1904 <strrev+0x4>
    190c:	32 97       	sbiw	r30, 0x02	; 2
    190e:	04 c0       	rjmp	.+8      	; 0x1918 <strrev+0x18>
    1910:	7c 91       	ld	r23, X
    1912:	6d 93       	st	X+, r22
    1914:	70 83       	st	Z, r23
    1916:	62 91       	ld	r22, -Z
    1918:	ae 17       	cp	r26, r30
    191a:	bf 07       	cpc	r27, r31
    191c:	c8 f3       	brcs	.-14     	; 0x1910 <strrev+0x10>
    191e:	08 95       	ret

00001920 <__ctype_isfalse>:
    1920:	99 27       	eor	r25, r25
    1922:	88 27       	eor	r24, r24

00001924 <__ctype_istrue>:
    1924:	08 95       	ret

00001926 <__muluhisi3>:
    1926:	0e 94 d5 0c 	call	0x19aa	; 0x19aa <__umulhisi3>
    192a:	a5 9f       	mul	r26, r21
    192c:	90 0d       	add	r25, r0
    192e:	b4 9f       	mul	r27, r20
    1930:	90 0d       	add	r25, r0
    1932:	a4 9f       	mul	r26, r20
    1934:	80 0d       	add	r24, r0
    1936:	91 1d       	adc	r25, r1
    1938:	11 24       	eor	r1, r1
    193a:	08 95       	ret

0000193c <__prologue_saves__>:
    193c:	2f 92       	push	r2
    193e:	3f 92       	push	r3
    1940:	4f 92       	push	r4
    1942:	5f 92       	push	r5
    1944:	6f 92       	push	r6
    1946:	7f 92       	push	r7
    1948:	8f 92       	push	r8
    194a:	9f 92       	push	r9
    194c:	af 92       	push	r10
    194e:	bf 92       	push	r11
    1950:	cf 92       	push	r12
    1952:	df 92       	push	r13
    1954:	ef 92       	push	r14
    1956:	ff 92       	push	r15
    1958:	0f 93       	push	r16
    195a:	1f 93       	push	r17
    195c:	cf 93       	push	r28
    195e:	df 93       	push	r29
    1960:	cd b7       	in	r28, 0x3d	; 61
    1962:	de b7       	in	r29, 0x3e	; 62
    1964:	ca 1b       	sub	r28, r26
    1966:	db 0b       	sbc	r29, r27
    1968:	0f b6       	in	r0, 0x3f	; 63
    196a:	f8 94       	cli
    196c:	de bf       	out	0x3e, r29	; 62
    196e:	0f be       	out	0x3f, r0	; 63
    1970:	cd bf       	out	0x3d, r28	; 61
    1972:	09 94       	ijmp

00001974 <__epilogue_restores__>:
    1974:	2a 88       	ldd	r2, Y+18	; 0x12
    1976:	39 88       	ldd	r3, Y+17	; 0x11
    1978:	48 88       	ldd	r4, Y+16	; 0x10
    197a:	5f 84       	ldd	r5, Y+15	; 0x0f
    197c:	6e 84       	ldd	r6, Y+14	; 0x0e
    197e:	7d 84       	ldd	r7, Y+13	; 0x0d
    1980:	8c 84       	ldd	r8, Y+12	; 0x0c
    1982:	9b 84       	ldd	r9, Y+11	; 0x0b
    1984:	aa 84       	ldd	r10, Y+10	; 0x0a
    1986:	b9 84       	ldd	r11, Y+9	; 0x09
    1988:	c8 84       	ldd	r12, Y+8	; 0x08
    198a:	df 80       	ldd	r13, Y+7	; 0x07
    198c:	ee 80       	ldd	r14, Y+6	; 0x06
    198e:	fd 80       	ldd	r15, Y+5	; 0x05
    1990:	0c 81       	ldd	r16, Y+4	; 0x04
    1992:	1b 81       	ldd	r17, Y+3	; 0x03
    1994:	aa 81       	ldd	r26, Y+2	; 0x02
    1996:	b9 81       	ldd	r27, Y+1	; 0x01
    1998:	ce 0f       	add	r28, r30
    199a:	d1 1d       	adc	r29, r1
    199c:	0f b6       	in	r0, 0x3f	; 63
    199e:	f8 94       	cli
    19a0:	de bf       	out	0x3e, r29	; 62
    19a2:	0f be       	out	0x3f, r0	; 63
    19a4:	cd bf       	out	0x3d, r28	; 61
    19a6:	ed 01       	movw	r28, r26
    19a8:	08 95       	ret

000019aa <__umulhisi3>:
    19aa:	a2 9f       	mul	r26, r18
    19ac:	b0 01       	movw	r22, r0
    19ae:	b3 9f       	mul	r27, r19
    19b0:	c0 01       	movw	r24, r0
    19b2:	a3 9f       	mul	r26, r19
    19b4:	70 0d       	add	r23, r0
    19b6:	81 1d       	adc	r24, r1
    19b8:	11 24       	eor	r1, r1
    19ba:	91 1d       	adc	r25, r1
    19bc:	b2 9f       	mul	r27, r18
    19be:	70 0d       	add	r23, r0
    19c0:	81 1d       	adc	r24, r1
    19c2:	11 24       	eor	r1, r1
    19c4:	91 1d       	adc	r25, r1
    19c6:	08 95       	ret

000019c8 <_exit>:
    19c8:	f8 94       	cli

000019ca <__stop_program>:
    19ca:	ff cf       	rjmp	.-2      	; 0x19ca <__stop_program>
