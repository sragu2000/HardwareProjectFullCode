
FullCode.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000ab4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000034  00800060  00000ab4  00000b48  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001c  00800094  00800094  00000b7c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000b7c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000bac  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000110  00000000  00000000  00000be8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000014b4  00000000  00000000  00000cf8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000820  00000000  00000000  000021ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b06  00000000  00000000  000029cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000264  00000000  00000000  000034d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000052d  00000000  00000000  00003738  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000b5a  00000000  00000000  00003c65  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000108  00000000  00000000  000047bf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 eb       	ldi	r30, 0xB4	; 180
  68:	fa e0       	ldi	r31, 0x0A	; 10
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 39       	cpi	r26, 0x94	; 148
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a4 e9       	ldi	r26, 0x94	; 148
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 3b       	cpi	r26, 0xB0	; 176
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 1b 03 	call	0x636	; 0x636 <main>
  8a:	0c 94 58 05 	jmp	0xab0	; 0xab0 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <I2C_Init>:
	return 1;												/* If yes then return 1 to indicate ack received i.e. ready to accept data byte */
	if (status == 0x20)										/* Check weather SLA+W transmitted & nack received or not? */
	return 2;												/* If yes then return 2 to indicate nack received i.e. device is busy */
	else
	return 3;												/* Else return 3 to indicate SLA+W failed */
}
  92:	11 b8       	out	0x01, r1	; 1
  94:	80 e2       	ldi	r24, 0x20	; 32
  96:	80 b9       	out	0x00, r24	; 0
  98:	08 95       	ret

0000009a <I2C_Repeated_Start>:

uint8_t I2C_Repeated_Start(char slave_read_address)			/* I2C repeated start function */
{
	uint8_t status;											/* Declare variable */
	TWCR = (1<<TWSTA)|(1<<TWEN)|(1<<TWINT);					/* Enable TWI, generate start condition and clear interrupt flag */
  9a:	94 ea       	ldi	r25, 0xA4	; 164
  9c:	96 bf       	out	0x36, r25	; 54
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (start condition) */
  9e:	06 b6       	in	r0, 0x36	; 54
  a0:	07 fe       	sbrs	r0, 7
  a2:	fd cf       	rjmp	.-6      	; 0x9e <I2C_Repeated_Start+0x4>
	status = TWSR & 0xF8;									/* Read TWI status register with masking lower three bits */
  a4:	91 b1       	in	r25, 0x01	; 1
  a6:	98 7f       	andi	r25, 0xF8	; 248
	if (status != 0x10)										/* Check weather repeated start condition transmitted successfully or not? */
  a8:	90 31       	cpi	r25, 0x10	; 16
  aa:	71 f4       	brne	.+28     	; 0xc8 <I2C_Repeated_Start+0x2e>
	return 0;												/* If no then return 0 to indicate repeated start condition fail */
	TWDR = slave_read_address;								/* If yes then write SLA+R in TWI data register */
  ac:	83 b9       	out	0x03, r24	; 3
	TWCR = (1<<TWEN)|(1<<TWINT);							/* Enable TWI and clear interrupt flag */
  ae:	84 e8       	ldi	r24, 0x84	; 132
  b0:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (Write operation) */
  b2:	06 b6       	in	r0, 0x36	; 54
  b4:	07 fe       	sbrs	r0, 7
  b6:	fd cf       	rjmp	.-6      	; 0xb2 <I2C_Repeated_Start+0x18>
	status = TWSR & 0xF8;									/* Read TWI status register with masking lower three bits */
  b8:	81 b1       	in	r24, 0x01	; 1
  ba:	88 7f       	andi	r24, 0xF8	; 248
	if (status == 0x40)										/* Check weather SLA+R transmitted & ack received or not? */
  bc:	80 34       	cpi	r24, 0x40	; 64
  be:	31 f0       	breq	.+12     	; 0xcc <I2C_Repeated_Start+0x32>
	return 1;												/* If yes then return 1 to indicate ack received */ 
	if (status == 0x20)										/* Check weather SLA+R transmitted & nack received or not? */
  c0:	80 32       	cpi	r24, 0x20	; 32
  c2:	31 f4       	brne	.+12     	; 0xd0 <I2C_Repeated_Start+0x36>
	return 2;												/* If yes then return 2 to indicate nack received i.e. device is busy */
  c4:	82 e0       	ldi	r24, 0x02	; 2
  c6:	08 95       	ret
	uint8_t status;											/* Declare variable */
	TWCR = (1<<TWSTA)|(1<<TWEN)|(1<<TWINT);					/* Enable TWI, generate start condition and clear interrupt flag */
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (start condition) */
	status = TWSR & 0xF8;									/* Read TWI status register with masking lower three bits */
	if (status != 0x10)										/* Check weather repeated start condition transmitted successfully or not? */
	return 0;												/* If no then return 0 to indicate repeated start condition fail */
  c8:	80 e0       	ldi	r24, 0x00	; 0
  ca:	08 95       	ret
	TWDR = slave_read_address;								/* If yes then write SLA+R in TWI data register */
	TWCR = (1<<TWEN)|(1<<TWINT);							/* Enable TWI and clear interrupt flag */
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (Write operation) */
	status = TWSR & 0xF8;									/* Read TWI status register with masking lower three bits */
	if (status == 0x40)										/* Check weather SLA+R transmitted & ack received or not? */
	return 1;												/* If yes then return 1 to indicate ack received */ 
  cc:	81 e0       	ldi	r24, 0x01	; 1
  ce:	08 95       	ret
	if (status == 0x20)										/* Check weather SLA+R transmitted & nack received or not? */
	return 2;												/* If yes then return 2 to indicate nack received i.e. device is busy */
	else
	return 3;												/* Else return 3 to indicate SLA+W failed */
  d0:	83 e0       	ldi	r24, 0x03	; 3
}
  d2:	08 95       	ret

000000d4 <I2C_Stop>:

void I2C_Stop()												/* I2C stop function */
{
	TWCR=(1<<TWSTO)|(1<<TWINT)|(1<<TWEN);					/* Enable TWI, generate stop condition and clear interrupt flag */
  d4:	84 e9       	ldi	r24, 0x94	; 148
  d6:	86 bf       	out	0x36, r24	; 54
	while(TWCR & (1<<TWSTO));								/* Wait until stop condition execution */ 
  d8:	06 b6       	in	r0, 0x36	; 54
  da:	04 fc       	sbrc	r0, 4
  dc:	fd cf       	rjmp	.-6      	; 0xd8 <I2C_Stop+0x4>
}
  de:	08 95       	ret

000000e0 <I2C_Start_Wait>:

void I2C_Start_Wait(char slave_write_address)				/* I2C start wait function */
{
  e0:	cf 93       	push	r28
  e2:	c8 2f       	mov	r28, r24
	uint8_t status;											/* Declare variable */
	while (1)
	{
		TWCR = (1<<TWSTA)|(1<<TWEN)|(1<<TWINT);				/* Enable TWI, generate start condition and clear interrupt flag */
  e4:	84 ea       	ldi	r24, 0xA4	; 164
  e6:	86 bf       	out	0x36, r24	; 54
		while (!(TWCR & (1<<TWINT)));						/* Wait until TWI finish its current job (start condition) */
  e8:	06 b6       	in	r0, 0x36	; 54
  ea:	07 fe       	sbrs	r0, 7
  ec:	fd cf       	rjmp	.-6      	; 0xe8 <I2C_Start_Wait+0x8>
		status = TWSR & 0xF8;								/* Read TWI status register with masking lower three bits */
  ee:	81 b1       	in	r24, 0x01	; 1
  f0:	88 7f       	andi	r24, 0xF8	; 248
		if (status != 0x08)									/* Check weather start condition transmitted successfully or not? */
  f2:	88 30       	cpi	r24, 0x08	; 8
  f4:	b9 f7       	brne	.-18     	; 0xe4 <I2C_Start_Wait+0x4>
		continue;											/* If no then continue with start loop again */
		TWDR = slave_write_address;							/* If yes then write SLA+W in TWI data register */
  f6:	c3 b9       	out	0x03, r28	; 3
		TWCR = (1<<TWEN)|(1<<TWINT);						/* Enable TWI and clear interrupt flag */
  f8:	84 e8       	ldi	r24, 0x84	; 132
  fa:	86 bf       	out	0x36, r24	; 54
		while (!(TWCR & (1<<TWINT)));						/* Wait until TWI finish its current job (Write operation) */
  fc:	06 b6       	in	r0, 0x36	; 54
  fe:	07 fe       	sbrs	r0, 7
 100:	fd cf       	rjmp	.-6      	; 0xfc <I2C_Start_Wait+0x1c>
		status = TWSR & 0xF8;								/* Read TWI status register with masking lower three bits */
 102:	81 b1       	in	r24, 0x01	; 1
 104:	88 7f       	andi	r24, 0xF8	; 248
		if (status != 0x18 )								/* Check weather SLA+W transmitted & ack received or not? */
 106:	88 31       	cpi	r24, 0x18	; 24
 108:	19 f0       	breq	.+6      	; 0x110 <I2C_Start_Wait+0x30>
		{
			I2C_Stop();										/* If not then generate stop condition */
 10a:	0e 94 6a 00 	call	0xd4	; 0xd4 <I2C_Stop>
			continue;										/* continue with start loop again */
 10e:	ea cf       	rjmp	.-44     	; 0xe4 <I2C_Start_Wait+0x4>
		}
		break;												/* If yes then break loop */
	}
}
 110:	cf 91       	pop	r28
 112:	08 95       	ret

00000114 <I2C_Write>:

uint8_t I2C_Write(char data)								/* I2C write function */
{
	uint8_t status;											/* Declare variable */
	TWDR = data;											/* Copy data in TWI data register */
 114:	83 b9       	out	0x03, r24	; 3
	TWCR = (1<<TWEN)|(1<<TWINT);							/* Enable TWI and clear interrupt flag */
 116:	84 e8       	ldi	r24, 0x84	; 132
 118:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (Write operation) */
 11a:	06 b6       	in	r0, 0x36	; 54
 11c:	07 fe       	sbrs	r0, 7
 11e:	fd cf       	rjmp	.-6      	; 0x11a <I2C_Write+0x6>
	status = TWSR & 0xF8;									/* Read TWI status register with masking lower three bits */
 120:	81 b1       	in	r24, 0x01	; 1
 122:	88 7f       	andi	r24, 0xF8	; 248
	if (status == 0x28)										/* Check weather data transmitted & ack received or not? */
 124:	88 32       	cpi	r24, 0x28	; 40
 126:	21 f0       	breq	.+8      	; 0x130 <I2C_Write+0x1c>
	return 0;												/* If yes then return 0 to indicate ack received */
	if (status == 0x30)										/* Check weather data transmitted & nack received or not? */
 128:	80 33       	cpi	r24, 0x30	; 48
 12a:	21 f4       	brne	.+8      	; 0x134 <I2C_Write+0x20>
	return 1;												/* If yes then return 1 to indicate nack received */
 12c:	81 e0       	ldi	r24, 0x01	; 1
 12e:	08 95       	ret
	TWDR = data;											/* Copy data in TWI data register */
	TWCR = (1<<TWEN)|(1<<TWINT);							/* Enable TWI and clear interrupt flag */
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (Write operation) */
	status = TWSR & 0xF8;									/* Read TWI status register with masking lower three bits */
	if (status == 0x28)										/* Check weather data transmitted & ack received or not? */
	return 0;												/* If yes then return 0 to indicate ack received */
 130:	80 e0       	ldi	r24, 0x00	; 0
 132:	08 95       	ret
	if (status == 0x30)										/* Check weather data transmitted & nack received or not? */
	return 1;												/* If yes then return 1 to indicate nack received */
	else
	return 2;												/* Else return 2 to indicate data transmission failed */
 134:	82 e0       	ldi	r24, 0x02	; 2
}
 136:	08 95       	ret

00000138 <I2C_Read_Ack>:

char I2C_Read_Ack()										/* I2C read ack function */
{
	TWCR=(1<<TWEN)|(1<<TWINT)|(1<<TWEA);					/* Enable TWI, generation of ack and clear interrupt flag */
 138:	84 ec       	ldi	r24, 0xC4	; 196
 13a:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (read operation) */
 13c:	06 b6       	in	r0, 0x36	; 54
 13e:	07 fe       	sbrs	r0, 7
 140:	fd cf       	rjmp	.-6      	; 0x13c <I2C_Read_Ack+0x4>
	return TWDR;											/* Return received data */
 142:	83 b1       	in	r24, 0x03	; 3
}	
 144:	08 95       	ret

00000146 <I2C_Read_Nack>:

char I2C_Read_Nack()										/* I2C read nack function */
{
	TWCR=(1<<TWEN)|(1<<TWINT);								/* Enable TWI and clear interrupt flag */
 146:	84 e8       	ldi	r24, 0x84	; 132
 148:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (read operation) */
 14a:	06 b6       	in	r0, 0x36	; 54
 14c:	07 fe       	sbrs	r0, 7
 14e:	fd cf       	rjmp	.-6      	; 0x14a <I2C_Read_Nack+0x4>
	return TWDR;											/* Return received data */
 150:	83 b1       	in	r24, 0x03	; 3
}	
 152:	08 95       	ret

00000154 <LCD_Command>:
	if (row == 0 && pos<16)
	LCD_Command((pos & 0x0F)|0x80);		/* Command of first row and required position<16 */
	else if (row == 1 && pos<16)
	LCD_Command((pos & 0x0F)|0xC0);		/* Command of first row and required position<16 */
	LCD_String(str);					/* Call LCD string function */
}
 154:	98 b3       	in	r25, 0x18	; 24
 156:	9f 70       	andi	r25, 0x0F	; 15
 158:	28 2f       	mov	r18, r24
 15a:	20 7f       	andi	r18, 0xF0	; 240
 15c:	92 2b       	or	r25, r18
 15e:	98 bb       	out	0x18, r25	; 24
 160:	98 b3       	in	r25, 0x18	; 24
 162:	9e 7f       	andi	r25, 0xFE	; 254
 164:	98 bb       	out	0x18, r25	; 24
 166:	98 b3       	in	r25, 0x18	; 24
 168:	92 60       	ori	r25, 0x02	; 2
 16a:	98 bb       	out	0x18, r25	; 24
 16c:	32 e0       	ldi	r19, 0x02	; 2
 16e:	3a 95       	dec	r19
 170:	f1 f7       	brne	.-4      	; 0x16e <LCD_Command+0x1a>
 172:	00 c0       	rjmp	.+0      	; 0x174 <LCD_Command+0x20>
 174:	98 b3       	in	r25, 0x18	; 24
 176:	9d 7f       	andi	r25, 0xFD	; 253
 178:	98 bb       	out	0x18, r25	; 24
 17a:	ef e8       	ldi	r30, 0x8F	; 143
 17c:	f1 e0       	ldi	r31, 0x01	; 1
 17e:	31 97       	sbiw	r30, 0x01	; 1
 180:	f1 f7       	brne	.-4      	; 0x17e <LCD_Command+0x2a>
 182:	00 c0       	rjmp	.+0      	; 0x184 <LCD_Command+0x30>
 184:	00 00       	nop
 186:	28 b3       	in	r18, 0x18	; 24
 188:	f0 e1       	ldi	r31, 0x10	; 16
 18a:	8f 9f       	mul	r24, r31
 18c:	c0 01       	movw	r24, r0
 18e:	11 24       	eor	r1, r1
 190:	92 2f       	mov	r25, r18
 192:	9f 70       	andi	r25, 0x0F	; 15
 194:	89 2b       	or	r24, r25
 196:	88 bb       	out	0x18, r24	; 24
 198:	88 b3       	in	r24, 0x18	; 24
 19a:	82 60       	ori	r24, 0x02	; 2
 19c:	88 bb       	out	0x18, r24	; 24
 19e:	32 e0       	ldi	r19, 0x02	; 2
 1a0:	3a 95       	dec	r19
 1a2:	f1 f7       	brne	.-4      	; 0x1a0 <LCD_Command+0x4c>
 1a4:	00 c0       	rjmp	.+0      	; 0x1a6 <LCD_Command+0x52>
 1a6:	88 b3       	in	r24, 0x18	; 24
 1a8:	8d 7f       	andi	r24, 0xFD	; 253
 1aa:	88 bb       	out	0x18, r24	; 24
 1ac:	8f e9       	ldi	r24, 0x9F	; 159
 1ae:	9f e0       	ldi	r25, 0x0F	; 15
 1b0:	01 97       	sbiw	r24, 0x01	; 1
 1b2:	f1 f7       	brne	.-4      	; 0x1b0 <LCD_Command+0x5c>
 1b4:	00 c0       	rjmp	.+0      	; 0x1b6 <LCD_Command+0x62>
 1b6:	00 00       	nop
 1b8:	08 95       	ret

000001ba <LCD_Char>:
 1ba:	98 b3       	in	r25, 0x18	; 24
 1bc:	9f 70       	andi	r25, 0x0F	; 15
 1be:	28 2f       	mov	r18, r24
 1c0:	20 7f       	andi	r18, 0xF0	; 240
 1c2:	92 2b       	or	r25, r18
 1c4:	98 bb       	out	0x18, r25	; 24
 1c6:	98 b3       	in	r25, 0x18	; 24
 1c8:	91 60       	ori	r25, 0x01	; 1
 1ca:	98 bb       	out	0x18, r25	; 24
 1cc:	98 b3       	in	r25, 0x18	; 24
 1ce:	92 60       	ori	r25, 0x02	; 2
 1d0:	98 bb       	out	0x18, r25	; 24
 1d2:	32 e0       	ldi	r19, 0x02	; 2
 1d4:	3a 95       	dec	r19
 1d6:	f1 f7       	brne	.-4      	; 0x1d4 <LCD_Char+0x1a>
 1d8:	00 c0       	rjmp	.+0      	; 0x1da <LCD_Char+0x20>
 1da:	98 b3       	in	r25, 0x18	; 24
 1dc:	9d 7f       	andi	r25, 0xFD	; 253
 1de:	98 bb       	out	0x18, r25	; 24
 1e0:	ef e8       	ldi	r30, 0x8F	; 143
 1e2:	f1 e0       	ldi	r31, 0x01	; 1
 1e4:	31 97       	sbiw	r30, 0x01	; 1
 1e6:	f1 f7       	brne	.-4      	; 0x1e4 <LCD_Char+0x2a>
 1e8:	00 c0       	rjmp	.+0      	; 0x1ea <LCD_Char+0x30>
 1ea:	00 00       	nop
 1ec:	28 b3       	in	r18, 0x18	; 24
 1ee:	f0 e1       	ldi	r31, 0x10	; 16
 1f0:	8f 9f       	mul	r24, r31
 1f2:	c0 01       	movw	r24, r0
 1f4:	11 24       	eor	r1, r1
 1f6:	92 2f       	mov	r25, r18
 1f8:	9f 70       	andi	r25, 0x0F	; 15
 1fa:	89 2b       	or	r24, r25
 1fc:	88 bb       	out	0x18, r24	; 24
 1fe:	88 b3       	in	r24, 0x18	; 24
 200:	82 60       	ori	r24, 0x02	; 2
 202:	88 bb       	out	0x18, r24	; 24
 204:	32 e0       	ldi	r19, 0x02	; 2
 206:	3a 95       	dec	r19
 208:	f1 f7       	brne	.-4      	; 0x206 <LCD_Char+0x4c>
 20a:	00 c0       	rjmp	.+0      	; 0x20c <LCD_Char+0x52>
 20c:	88 b3       	in	r24, 0x18	; 24
 20e:	8d 7f       	andi	r24, 0xFD	; 253
 210:	88 bb       	out	0x18, r24	; 24
 212:	8f e9       	ldi	r24, 0x9F	; 159
 214:	9f e0       	ldi	r25, 0x0F	; 15
 216:	01 97       	sbiw	r24, 0x01	; 1
 218:	f1 f7       	brne	.-4      	; 0x216 <LCD_Char+0x5c>
 21a:	00 c0       	rjmp	.+0      	; 0x21c <LCD_Char+0x62>
 21c:	00 00       	nop
 21e:	08 95       	ret

00000220 <LCD_Init>:
 220:	8f ef       	ldi	r24, 0xFF	; 255
 222:	87 bb       	out	0x17, r24	; 23
 224:	8f e3       	ldi	r24, 0x3F	; 63
 226:	9c e9       	ldi	r25, 0x9C	; 156
 228:	01 97       	sbiw	r24, 0x01	; 1
 22a:	f1 f7       	brne	.-4      	; 0x228 <LCD_Init+0x8>
 22c:	00 c0       	rjmp	.+0      	; 0x22e <LCD_Init+0xe>
 22e:	00 00       	nop
 230:	83 e3       	ldi	r24, 0x33	; 51
 232:	0e 94 aa 00 	call	0x154	; 0x154 <LCD_Command>
 236:	82 e3       	ldi	r24, 0x32	; 50
 238:	0e 94 aa 00 	call	0x154	; 0x154 <LCD_Command>
 23c:	88 e2       	ldi	r24, 0x28	; 40
 23e:	0e 94 aa 00 	call	0x154	; 0x154 <LCD_Command>
 242:	8c e0       	ldi	r24, 0x0C	; 12
 244:	0e 94 aa 00 	call	0x154	; 0x154 <LCD_Command>
 248:	86 e0       	ldi	r24, 0x06	; 6
 24a:	0e 94 aa 00 	call	0x154	; 0x154 <LCD_Command>
 24e:	81 e0       	ldi	r24, 0x01	; 1
 250:	0e 94 aa 00 	call	0x154	; 0x154 <LCD_Command>
 254:	8f e9       	ldi	r24, 0x9F	; 159
 256:	9f e0       	ldi	r25, 0x0F	; 15
 258:	01 97       	sbiw	r24, 0x01	; 1
 25a:	f1 f7       	brne	.-4      	; 0x258 <LCD_Init+0x38>
 25c:	00 c0       	rjmp	.+0      	; 0x25e <LCD_Init+0x3e>
 25e:	00 00       	nop
 260:	80 e8       	ldi	r24, 0x80	; 128
 262:	0e 94 aa 00 	call	0x154	; 0x154 <LCD_Command>
 266:	08 95       	ret

00000268 <LCD_String>:
 268:	0f 93       	push	r16
 26a:	1f 93       	push	r17
 26c:	cf 93       	push	r28
 26e:	df 93       	push	r29
 270:	8c 01       	movw	r16, r24
 272:	c0 e0       	ldi	r28, 0x00	; 0
 274:	d0 e0       	ldi	r29, 0x00	; 0
 276:	03 c0       	rjmp	.+6      	; 0x27e <LCD_String+0x16>
 278:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_Char>
 27c:	21 96       	adiw	r28, 0x01	; 1
 27e:	f8 01       	movw	r30, r16
 280:	ec 0f       	add	r30, r28
 282:	fd 1f       	adc	r31, r29
 284:	80 81       	ld	r24, Z
 286:	81 11       	cpse	r24, r1
 288:	f7 cf       	rjmp	.-18     	; 0x278 <LCD_String+0x10>
 28a:	df 91       	pop	r29
 28c:	cf 91       	pop	r28
 28e:	1f 91       	pop	r17
 290:	0f 91       	pop	r16
 292:	08 95       	ret

00000294 <LCD_Clear>:

void LCD_Clear()
{
	LCD_Command (0x01);					/* Clear display */
 294:	81 e0       	ldi	r24, 0x01	; 1
 296:	0e 94 aa 00 	call	0x154	; 0x154 <LCD_Command>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 29a:	8f e9       	ldi	r24, 0x9F	; 159
 29c:	9f e0       	ldi	r25, 0x0F	; 15
 29e:	01 97       	sbiw	r24, 0x01	; 1
 2a0:	f1 f7       	brne	.-4      	; 0x29e <LCD_Clear+0xa>
 2a2:	00 c0       	rjmp	.+0      	; 0x2a4 <LCD_Clear+0x10>
 2a4:	00 00       	nop
	_delay_ms(2);
	LCD_Command (0x80);					/* Cursor 1st row 0th position */
 2a6:	80 e8       	ldi	r24, 0x80	; 128
 2a8:	0e 94 aa 00 	call	0x154	; 0x154 <LCD_Command>
 2ac:	08 95       	ret

000002ae <ADC_Init>:
 * Created: 5/10/2022 11:41:37 AM
 *  Author: THADSHAJINY
 */ 
 void ADC_Init()
		 {
			 DDRB=0xFF;    //Make port B as output port
 2ae:	8f ef       	ldi	r24, 0xFF	; 255
 2b0:	87 bb       	out	0x17, r24	; 23
			// DDRD=0xFF;		//MAke port D as an output port
			 DDRA=0x00;      //MAke port A as an input port
 2b2:	1a ba       	out	0x1a, r1	; 26
			 ADCSRA=0x87;		//Make ADC enable & select clk/128
 2b4:	87 e8       	ldi	r24, 0x87	; 135
 2b6:	86 b9       	out	0x06, r24	; 6
			 ADMUX=0xC0;       //Vref=2.56V,ADC0single ended input & data right aligned
 2b8:	80 ec       	ldi	r24, 0xC0	; 192
 2ba:	87 b9       	out	0x07, r24	; 7
 2bc:	08 95       	ret

000002be <ADC_Read>:
		 }
			 
int ADC_Read(char channel)
	{
		int Ain,AinLow;
		ADCSRA|=(1<<ADSC);   //start conversion
 2be:	86 b1       	in	r24, 0x06	; 6
 2c0:	80 64       	ori	r24, 0x40	; 64
 2c2:	86 b9       	out	0x06, r24	; 6
		while((ADCSRA & (1<<ADIF))==0);  //wait for conversion to finish
 2c4:	34 9b       	sbis	0x06, 4	; 6
 2c6:	fe cf       	rjmp	.-4      	; 0x2c4 <ADC_Read+0x6>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2c8:	8a e1       	ldi	r24, 0x1A	; 26
 2ca:	8a 95       	dec	r24
 2cc:	f1 f7       	brne	.-4      	; 0x2ca <ADC_Read+0xc>
 2ce:	00 c0       	rjmp	.+0      	; 0x2d0 <ADC_Read+0x12>
	// PORTD=ADCL;    //send lower byte to portD
	// PORTB=ADCH;  //send hugh byte to port B
		_delay_us(10);
	AinLow = (int)ADCL;		/* Read lower byte*/
 2d0:	24 b1       	in	r18, 0x04	; 4
	Ain = (int)ADCH*256;		/* Read higher 2 bits and 
 2d2:	85 b1       	in	r24, 0x05	; 5
 2d4:	90 e0       	ldi	r25, 0x00	; 0
 2d6:	98 2f       	mov	r25, r24
 2d8:	88 27       	eor	r24, r24
		Multiply with weight */
	Ain = Ain + AinLow;				
	return(Ain);			/* Return digital value*/
 2da:	82 0f       	add	r24, r18
 2dc:	91 1d       	adc	r25, r1
 2de:	08 95       	ret

000002e0 <MPU6050_Init>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2e0:	2f e7       	ldi	r18, 0x7F	; 127
 2e2:	89 ea       	ldi	r24, 0xA9	; 169
 2e4:	93 e0       	ldi	r25, 0x03	; 3
 2e6:	21 50       	subi	r18, 0x01	; 1
 2e8:	80 40       	sbci	r24, 0x00	; 0
 2ea:	90 40       	sbci	r25, 0x00	; 0
 2ec:	e1 f7       	brne	.-8      	; 0x2e6 <MPU6050_Init+0x6>
 2ee:	00 c0       	rjmp	.+0      	; 0x2f0 <MPU6050_Init+0x10>
 2f0:	00 00       	nop
 */ 
float Acc_x,Acc_y,Acc_z,Temperature,Gyro_x,Gyro_y,Gyro_z;
void MPU6050_Init()										/* Gyro initialization function */
{
	_delay_ms(150);										/* Power up time >100ms */
	I2C_Start_Wait(0xD0);								/* Start with device write address */
 2f2:	80 ed       	ldi	r24, 0xD0	; 208
 2f4:	0e 94 70 00 	call	0xe0	; 0xe0 <I2C_Start_Wait>
	I2C_Write(SMPLRT_DIV);								/* Write to sample rate register */
 2f8:	89 e1       	ldi	r24, 0x19	; 25
 2fa:	0e 94 8a 00 	call	0x114	; 0x114 <I2C_Write>
	I2C_Write(0x07);									/* 1KHz sample rate */
 2fe:	87 e0       	ldi	r24, 0x07	; 7
 300:	0e 94 8a 00 	call	0x114	; 0x114 <I2C_Write>
	I2C_Stop();
 304:	0e 94 6a 00 	call	0xd4	; 0xd4 <I2C_Stop>

	I2C_Start_Wait(0xD0);
 308:	80 ed       	ldi	r24, 0xD0	; 208
 30a:	0e 94 70 00 	call	0xe0	; 0xe0 <I2C_Start_Wait>
	I2C_Write(PWR_MGMT_1);								/* Write to power management register */
 30e:	8b e6       	ldi	r24, 0x6B	; 107
 310:	0e 94 8a 00 	call	0x114	; 0x114 <I2C_Write>
	I2C_Write(0x01);									/* X axis gyroscope reference frequency */
 314:	81 e0       	ldi	r24, 0x01	; 1
 316:	0e 94 8a 00 	call	0x114	; 0x114 <I2C_Write>
	I2C_Stop();
 31a:	0e 94 6a 00 	call	0xd4	; 0xd4 <I2C_Stop>

	I2C_Start_Wait(0xD0);
 31e:	80 ed       	ldi	r24, 0xD0	; 208
 320:	0e 94 70 00 	call	0xe0	; 0xe0 <I2C_Start_Wait>
	I2C_Write(CONFIG);									/* Write to Configuration register */
 324:	8a e1       	ldi	r24, 0x1A	; 26
 326:	0e 94 8a 00 	call	0x114	; 0x114 <I2C_Write>
	I2C_Write(0x00);									/* Fs = 8KHz */
 32a:	80 e0       	ldi	r24, 0x00	; 0
 32c:	0e 94 8a 00 	call	0x114	; 0x114 <I2C_Write>
	I2C_Stop();
 330:	0e 94 6a 00 	call	0xd4	; 0xd4 <I2C_Stop>

	I2C_Start_Wait(0xD0);
 334:	80 ed       	ldi	r24, 0xD0	; 208
 336:	0e 94 70 00 	call	0xe0	; 0xe0 <I2C_Start_Wait>
	I2C_Write(GYRO_CONFIG);								/* Write to Gyro configuration register */
 33a:	8b e1       	ldi	r24, 0x1B	; 27
 33c:	0e 94 8a 00 	call	0x114	; 0x114 <I2C_Write>
	I2C_Write(0x18);									/* Full scale range +/- 2000 degree/C */
 340:	88 e1       	ldi	r24, 0x18	; 24
 342:	0e 94 8a 00 	call	0x114	; 0x114 <I2C_Write>
	I2C_Stop();
 346:	0e 94 6a 00 	call	0xd4	; 0xd4 <I2C_Stop>

	I2C_Start_Wait(0xD0);
 34a:	80 ed       	ldi	r24, 0xD0	; 208
 34c:	0e 94 70 00 	call	0xe0	; 0xe0 <I2C_Start_Wait>
	I2C_Write(INT_ENABLE);								/* Write to interrupt enable register */
 350:	88 e3       	ldi	r24, 0x38	; 56
 352:	0e 94 8a 00 	call	0x114	; 0x114 <I2C_Write>
	I2C_Write(0x01);
 356:	81 e0       	ldi	r24, 0x01	; 1
 358:	0e 94 8a 00 	call	0x114	; 0x114 <I2C_Write>
	I2C_Stop();
 35c:	0e 94 6a 00 	call	0xd4	; 0xd4 <I2C_Stop>
 360:	08 95       	ret

00000362 <MPU_Start_Loc>:
}

void MPU_Start_Loc()
{
	I2C_Start_Wait(0xD0);								/* I2C start with device write address */
 362:	80 ed       	ldi	r24, 0xD0	; 208
 364:	0e 94 70 00 	call	0xe0	; 0xe0 <I2C_Start_Wait>
	I2C_Write(ACCEL_XOUT_H);							/* Write start location address from where to read */
 368:	8b e3       	ldi	r24, 0x3B	; 59
 36a:	0e 94 8a 00 	call	0x114	; 0x114 <I2C_Write>
	I2C_Repeated_Start(0xD1);							/* I2C start with device read address */
 36e:	81 ed       	ldi	r24, 0xD1	; 209
 370:	0e 94 4d 00 	call	0x9a	; 0x9a <I2C_Repeated_Start>
 374:	08 95       	ret

00000376 <Read_RawValue>:
}

void Read_RawValue()
{
 376:	cf 93       	push	r28
 378:	df 93       	push	r29
	MPU_Start_Loc();									/* Read Gyro values */
 37a:	0e 94 b1 01 	call	0x362	; 0x362 <MPU_Start_Loc>
	Acc_x = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Ack());
 37e:	0e 94 9c 00 	call	0x138	; 0x138 <I2C_Read_Ack>
 382:	c8 2f       	mov	r28, r24
 384:	d0 e0       	ldi	r29, 0x00	; 0
 386:	dc 2f       	mov	r29, r28
 388:	cc 27       	eor	r28, r28
 38a:	0e 94 9c 00 	call	0x138	; 0x138 <I2C_Read_Ack>
 38e:	be 01       	movw	r22, r28
 390:	68 2b       	or	r22, r24
 392:	07 2e       	mov	r0, r23
 394:	00 0c       	add	r0, r0
 396:	88 0b       	sbc	r24, r24
 398:	99 0b       	sbc	r25, r25
 39a:	0e 94 36 04 	call	0x86c	; 0x86c <__floatsisf>
 39e:	60 93 a8 00 	sts	0x00A8, r22	; 0x8000a8 <Acc_x>
 3a2:	70 93 a9 00 	sts	0x00A9, r23	; 0x8000a9 <Acc_x+0x1>
 3a6:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <Acc_x+0x2>
 3aa:	90 93 ab 00 	sts	0x00AB, r25	; 0x8000ab <Acc_x+0x3>
	Acc_y = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Ack());
 3ae:	0e 94 9c 00 	call	0x138	; 0x138 <I2C_Read_Ack>
 3b2:	c8 2f       	mov	r28, r24
 3b4:	d0 e0       	ldi	r29, 0x00	; 0
 3b6:	dc 2f       	mov	r29, r28
 3b8:	cc 27       	eor	r28, r28
 3ba:	0e 94 9c 00 	call	0x138	; 0x138 <I2C_Read_Ack>
 3be:	be 01       	movw	r22, r28
 3c0:	68 2b       	or	r22, r24
 3c2:	07 2e       	mov	r0, r23
 3c4:	00 0c       	add	r0, r0
 3c6:	88 0b       	sbc	r24, r24
 3c8:	99 0b       	sbc	r25, r25
 3ca:	0e 94 36 04 	call	0x86c	; 0x86c <__floatsisf>
 3ce:	60 93 a0 00 	sts	0x00A0, r22	; 0x8000a0 <Acc_y>
 3d2:	70 93 a1 00 	sts	0x00A1, r23	; 0x8000a1 <Acc_y+0x1>
 3d6:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <Acc_y+0x2>
 3da:	90 93 a3 00 	sts	0x00A3, r25	; 0x8000a3 <Acc_y+0x3>
	Acc_z = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Ack());
 3de:	0e 94 9c 00 	call	0x138	; 0x138 <I2C_Read_Ack>
 3e2:	c8 2f       	mov	r28, r24
 3e4:	d0 e0       	ldi	r29, 0x00	; 0
 3e6:	dc 2f       	mov	r29, r28
 3e8:	cc 27       	eor	r28, r28
 3ea:	0e 94 9c 00 	call	0x138	; 0x138 <I2C_Read_Ack>
 3ee:	be 01       	movw	r22, r28
 3f0:	68 2b       	or	r22, r24
 3f2:	07 2e       	mov	r0, r23
 3f4:	00 0c       	add	r0, r0
 3f6:	88 0b       	sbc	r24, r24
 3f8:	99 0b       	sbc	r25, r25
 3fa:	0e 94 36 04 	call	0x86c	; 0x86c <__floatsisf>
 3fe:	60 93 94 00 	sts	0x0094, r22	; 0x800094 <__data_end>
 402:	70 93 95 00 	sts	0x0095, r23	; 0x800095 <__data_end+0x1>
 406:	80 93 96 00 	sts	0x0096, r24	; 0x800096 <__data_end+0x2>
 40a:	90 93 97 00 	sts	0x0097, r25	; 0x800097 <__data_end+0x3>
	Temperature = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Ack());
 40e:	0e 94 9c 00 	call	0x138	; 0x138 <I2C_Read_Ack>
 412:	c8 2f       	mov	r28, r24
 414:	d0 e0       	ldi	r29, 0x00	; 0
 416:	dc 2f       	mov	r29, r28
 418:	cc 27       	eor	r28, r28
 41a:	0e 94 9c 00 	call	0x138	; 0x138 <I2C_Read_Ack>
 41e:	be 01       	movw	r22, r28
 420:	68 2b       	or	r22, r24
 422:	07 2e       	mov	r0, r23
 424:	00 0c       	add	r0, r0
 426:	88 0b       	sbc	r24, r24
 428:	99 0b       	sbc	r25, r25
 42a:	0e 94 36 04 	call	0x86c	; 0x86c <__floatsisf>
 42e:	60 93 9c 00 	sts	0x009C, r22	; 0x80009c <Temperature>
 432:	70 93 9d 00 	sts	0x009D, r23	; 0x80009d <Temperature+0x1>
 436:	80 93 9e 00 	sts	0x009E, r24	; 0x80009e <Temperature+0x2>
 43a:	90 93 9f 00 	sts	0x009F, r25	; 0x80009f <Temperature+0x3>
	Gyro_x = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Ack());
 43e:	0e 94 9c 00 	call	0x138	; 0x138 <I2C_Read_Ack>
 442:	c8 2f       	mov	r28, r24
 444:	d0 e0       	ldi	r29, 0x00	; 0
 446:	dc 2f       	mov	r29, r28
 448:	cc 27       	eor	r28, r28
 44a:	0e 94 9c 00 	call	0x138	; 0x138 <I2C_Read_Ack>
 44e:	be 01       	movw	r22, r28
 450:	68 2b       	or	r22, r24
 452:	07 2e       	mov	r0, r23
 454:	00 0c       	add	r0, r0
 456:	88 0b       	sbc	r24, r24
 458:	99 0b       	sbc	r25, r25
 45a:	0e 94 36 04 	call	0x86c	; 0x86c <__floatsisf>
 45e:	60 93 98 00 	sts	0x0098, r22	; 0x800098 <Gyro_x>
 462:	70 93 99 00 	sts	0x0099, r23	; 0x800099 <Gyro_x+0x1>
 466:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <Gyro_x+0x2>
 46a:	90 93 9b 00 	sts	0x009B, r25	; 0x80009b <Gyro_x+0x3>
	Gyro_y = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Ack());
 46e:	0e 94 9c 00 	call	0x138	; 0x138 <I2C_Read_Ack>
 472:	c8 2f       	mov	r28, r24
 474:	d0 e0       	ldi	r29, 0x00	; 0
 476:	dc 2f       	mov	r29, r28
 478:	cc 27       	eor	r28, r28
 47a:	0e 94 9c 00 	call	0x138	; 0x138 <I2C_Read_Ack>
 47e:	be 01       	movw	r22, r28
 480:	68 2b       	or	r22, r24
 482:	07 2e       	mov	r0, r23
 484:	00 0c       	add	r0, r0
 486:	88 0b       	sbc	r24, r24
 488:	99 0b       	sbc	r25, r25
 48a:	0e 94 36 04 	call	0x86c	; 0x86c <__floatsisf>
 48e:	60 93 ac 00 	sts	0x00AC, r22	; 0x8000ac <Gyro_y>
 492:	70 93 ad 00 	sts	0x00AD, r23	; 0x8000ad <Gyro_y+0x1>
 496:	80 93 ae 00 	sts	0x00AE, r24	; 0x8000ae <Gyro_y+0x2>
 49a:	90 93 af 00 	sts	0x00AF, r25	; 0x8000af <Gyro_y+0x3>
	Gyro_z = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Nack());
 49e:	0e 94 9c 00 	call	0x138	; 0x138 <I2C_Read_Ack>
 4a2:	c8 2f       	mov	r28, r24
 4a4:	d0 e0       	ldi	r29, 0x00	; 0
 4a6:	dc 2f       	mov	r29, r28
 4a8:	cc 27       	eor	r28, r28
 4aa:	0e 94 a3 00 	call	0x146	; 0x146 <I2C_Read_Nack>
 4ae:	be 01       	movw	r22, r28
 4b0:	68 2b       	or	r22, r24
 4b2:	07 2e       	mov	r0, r23
 4b4:	00 0c       	add	r0, r0
 4b6:	88 0b       	sbc	r24, r24
 4b8:	99 0b       	sbc	r25, r25
 4ba:	0e 94 36 04 	call	0x86c	; 0x86c <__floatsisf>
 4be:	60 93 a4 00 	sts	0x00A4, r22	; 0x8000a4 <Gyro_z>
 4c2:	70 93 a5 00 	sts	0x00A5, r23	; 0x8000a5 <Gyro_z+0x1>
 4c6:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <Gyro_z+0x2>
 4ca:	90 93 a7 00 	sts	0x00A7, r25	; 0x8000a7 <Gyro_z+0x3>
	I2C_Stop();
 4ce:	0e 94 6a 00 	call	0xd4	; 0xd4 <I2C_Stop>
}
 4d2:	df 91       	pop	r29
 4d4:	cf 91       	pop	r28
 4d6:	08 95       	ret

000004d8 <isDriverSleepingGyro>:

int isDriverSleepingGyro(float Xa,float Ya,float Za){
 4d8:	4f 92       	push	r4
 4da:	5f 92       	push	r5
 4dc:	6f 92       	push	r6
 4de:	7f 92       	push	r7
 4e0:	8f 92       	push	r8
 4e2:	9f 92       	push	r9
 4e4:	af 92       	push	r10
 4e6:	bf 92       	push	r11
 4e8:	cf 92       	push	r12
 4ea:	df 92       	push	r13
 4ec:	ef 92       	push	r14
 4ee:	ff 92       	push	r15
 4f0:	0f 93       	push	r16
 4f2:	1f 93       	push	r17
 4f4:	4b 01       	movw	r8, r22
 4f6:	5c 01       	movw	r10, r24
 4f8:	29 01       	movw	r4, r18
 4fa:	3a 01       	movw	r6, r20
 4fc:	67 01       	movw	r12, r14
 4fe:	78 01       	movw	r14, r16
	if((Za>-2.0 && Za<2.0) && (Xa>-3.0 && Xa<3.0) && (Ya>=8.0 && Ya<=9.0)){
 500:	20 e0       	ldi	r18, 0x00	; 0
 502:	30 e0       	ldi	r19, 0x00	; 0
 504:	40 e0       	ldi	r20, 0x00	; 0
 506:	50 ec       	ldi	r21, 0xC0	; 192
 508:	c7 01       	movw	r24, r14
 50a:	b6 01       	movw	r22, r12
 50c:	0e 94 be 04 	call	0x97c	; 0x97c <__gesf2>
 510:	18 16       	cp	r1, r24
 512:	ac f5       	brge	.+106    	; 0x57e <isDriverSleepingGyro+0xa6>
 514:	20 e0       	ldi	r18, 0x00	; 0
 516:	30 e0       	ldi	r19, 0x00	; 0
 518:	40 e0       	ldi	r20, 0x00	; 0
 51a:	50 e4       	ldi	r21, 0x40	; 64
 51c:	c7 01       	movw	r24, r14
 51e:	b6 01       	movw	r22, r12
 520:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <__cmpsf2>
 524:	88 23       	and	r24, r24
 526:	74 f5       	brge	.+92     	; 0x584 <isDriverSleepingGyro+0xac>
 528:	20 e0       	ldi	r18, 0x00	; 0
 52a:	30 e0       	ldi	r19, 0x00	; 0
 52c:	40 e4       	ldi	r20, 0x40	; 64
 52e:	50 ec       	ldi	r21, 0xC0	; 192
 530:	c5 01       	movw	r24, r10
 532:	b4 01       	movw	r22, r8
 534:	0e 94 be 04 	call	0x97c	; 0x97c <__gesf2>
 538:	18 16       	cp	r1, r24
 53a:	3c f5       	brge	.+78     	; 0x58a <isDriverSleepingGyro+0xb2>
 53c:	20 e0       	ldi	r18, 0x00	; 0
 53e:	30 e0       	ldi	r19, 0x00	; 0
 540:	40 e4       	ldi	r20, 0x40	; 64
 542:	50 e4       	ldi	r21, 0x40	; 64
 544:	c5 01       	movw	r24, r10
 546:	b4 01       	movw	r22, r8
 548:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <__cmpsf2>
 54c:	88 23       	and	r24, r24
 54e:	04 f5       	brge	.+64     	; 0x590 <isDriverSleepingGyro+0xb8>
 550:	20 e0       	ldi	r18, 0x00	; 0
 552:	30 e0       	ldi	r19, 0x00	; 0
 554:	40 e0       	ldi	r20, 0x00	; 0
 556:	51 e4       	ldi	r21, 0x41	; 65
 558:	c3 01       	movw	r24, r6
 55a:	b2 01       	movw	r22, r4
 55c:	0e 94 be 04 	call	0x97c	; 0x97c <__gesf2>
 560:	88 23       	and	r24, r24
 562:	cc f0       	brlt	.+50     	; 0x596 <isDriverSleepingGyro+0xbe>
 564:	20 e0       	ldi	r18, 0x00	; 0
 566:	30 e0       	ldi	r19, 0x00	; 0
 568:	40 e1       	ldi	r20, 0x10	; 16
 56a:	51 e4       	ldi	r21, 0x41	; 65
 56c:	c3 01       	movw	r24, r6
 56e:	b2 01       	movw	r22, r4
 570:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <__cmpsf2>
 574:	18 16       	cp	r1, r24
 576:	94 f4       	brge	.+36     	; 0x59c <isDriverSleepingGyro+0xc4>
		return 0;//driver is not sleeping
	}else{
		return 1;//driver is sleeping
 578:	81 e0       	ldi	r24, 0x01	; 1
 57a:	90 e0       	ldi	r25, 0x00	; 0
 57c:	11 c0       	rjmp	.+34     	; 0x5a0 <isDriverSleepingGyro+0xc8>
 57e:	81 e0       	ldi	r24, 0x01	; 1
 580:	90 e0       	ldi	r25, 0x00	; 0
 582:	0e c0       	rjmp	.+28     	; 0x5a0 <isDriverSleepingGyro+0xc8>
 584:	81 e0       	ldi	r24, 0x01	; 1
 586:	90 e0       	ldi	r25, 0x00	; 0
 588:	0b c0       	rjmp	.+22     	; 0x5a0 <isDriverSleepingGyro+0xc8>
 58a:	81 e0       	ldi	r24, 0x01	; 1
 58c:	90 e0       	ldi	r25, 0x00	; 0
 58e:	08 c0       	rjmp	.+16     	; 0x5a0 <isDriverSleepingGyro+0xc8>
 590:	81 e0       	ldi	r24, 0x01	; 1
 592:	90 e0       	ldi	r25, 0x00	; 0
 594:	05 c0       	rjmp	.+10     	; 0x5a0 <isDriverSleepingGyro+0xc8>
 596:	81 e0       	ldi	r24, 0x01	; 1
 598:	90 e0       	ldi	r25, 0x00	; 0
 59a:	02 c0       	rjmp	.+4      	; 0x5a0 <isDriverSleepingGyro+0xc8>
	I2C_Stop();
}

int isDriverSleepingGyro(float Xa,float Ya,float Za){
	if((Za>-2.0 && Za<2.0) && (Xa>-3.0 && Xa<3.0) && (Ya>=8.0 && Ya<=9.0)){
		return 0;//driver is not sleeping
 59c:	80 e0       	ldi	r24, 0x00	; 0
 59e:	90 e0       	ldi	r25, 0x00	; 0
	}else{
		return 1;//driver is sleeping
	}
 5a0:	1f 91       	pop	r17
 5a2:	0f 91       	pop	r16
 5a4:	ff 90       	pop	r15
 5a6:	ef 90       	pop	r14
 5a8:	df 90       	pop	r13
 5aa:	cf 90       	pop	r12
 5ac:	bf 90       	pop	r11
 5ae:	af 90       	pop	r10
 5b0:	9f 90       	pop	r9
 5b2:	8f 90       	pop	r8
 5b4:	7f 90       	pop	r7
 5b6:	6f 90       	pop	r6
 5b8:	5f 90       	pop	r5
 5ba:	4f 90       	pop	r4
 5bc:	08 95       	ret

000005be <PWM_init>:
 *  Author: ssrag
 */ 
//fast pwm mode
void PWM_init(){
	/*set fast PWM mode with non-inverted output*/
	TCCR0 = (1<<WGM00) | (1<<WGM01) | (1<<COM01) | (1<<CS00);
 5be:	89 e6       	ldi	r24, 0x69	; 105
 5c0:	83 bf       	out	0x33, r24	; 51
	DDRB|=(1<<PB3);  /*set OC0 pin as output*/
 5c2:	87 b3       	in	r24, 0x17	; 23
 5c4:	88 60       	ori	r24, 0x08	; 8
 5c6:	87 bb       	out	0x17, r24	; 23
 5c8:	08 95       	ret

000005ca <ringAlarm>:
		}
	}
}

void ringAlarm(){
	portHigh(PORTD,buzzer);//buzzer
 5ca:	82 b3       	in	r24, 0x12	; 18
 5cc:	80 68       	ori	r24, 0x80	; 128
 5ce:	82 bb       	out	0x12, r24	; 18
 5d0:	08 95       	ret

000005d2 <stopAlarm>:
}
void stopAlarm(){
	portLow(PORTD,buzzer);
 5d2:	82 b3       	in	r24, 0x12	; 18
 5d4:	8f 77       	andi	r24, 0x7F	; 127
 5d6:	82 bb       	out	0x12, r24	; 18
 5d8:	08 95       	ret

000005da <onHazardLight>:
}
void onHazardLight(){
	portHigh(PORTD,led);
 5da:	82 b3       	in	r24, 0x12	; 18
 5dc:	80 64       	ori	r24, 0x40	; 64
 5de:	82 bb       	out	0x12, r24	; 18
 5e0:	08 95       	ret

000005e2 <offHazardLight>:
}
void offHazardLight(){
	portLow(PORTD,led);
 5e2:	82 b3       	in	r24, 0x12	; 18
 5e4:	8f 7b       	andi	r24, 0xBF	; 191
 5e6:	82 bb       	out	0x12, r24	; 18
 5e8:	08 95       	ret

000005ea <playRadio>:
}
void playRadio(){
	portHigh(PORTD,musicSystem);
 5ea:	82 b3       	in	r24, 0x12	; 18
 5ec:	80 62       	ori	r24, 0x20	; 32
 5ee:	82 bb       	out	0x12, r24	; 18
 5f0:	08 95       	ret

000005f2 <isDriverSleepingIR>:
}
int isDriverSleepingIR(){
	int timeInterval=40;
	int flag=0;
	for(int i=1;i<=timeInterval;i++){
 5f2:	81 e0       	ldi	r24, 0x01	; 1
 5f4:	90 e0       	ldi	r25, 0x00	; 0
void playRadio(){
	portHigh(PORTD,musicSystem);
}
int isDriverSleepingIR(){
	int timeInterval=40;
	int flag=0;
 5f6:	20 e0       	ldi	r18, 0x00	; 0
 5f8:	30 e0       	ldi	r19, 0x00	; 0
	for(int i=1;i<=timeInterval;i++){
 5fa:	11 c0       	rjmp	.+34     	; 0x61e <isDriverSleepingIR+0x2c>
		if(pinRead(PINC,irsensor)==0x40){
 5fc:	9e 9b       	sbis	0x13, 6	; 19
 5fe:	03 c0       	rjmp	.+6      	; 0x606 <isDriverSleepingIR+0x14>
			flag++;
 600:	2f 5f       	subi	r18, 0xFF	; 255
 602:	3f 4f       	sbci	r19, 0xFF	; 255
 604:	02 c0       	rjmp	.+4      	; 0x60a <isDriverSleepingIR+0x18>
		}else{
			flag--;
 606:	21 50       	subi	r18, 0x01	; 1
 608:	31 09       	sbc	r19, r1
 60a:	4f e7       	ldi	r20, 0x7F	; 127
 60c:	58 e3       	ldi	r21, 0x38	; 56
 60e:	61 e0       	ldi	r22, 0x01	; 1
 610:	41 50       	subi	r20, 0x01	; 1
 612:	50 40       	sbci	r21, 0x00	; 0
 614:	60 40       	sbci	r22, 0x00	; 0
 616:	e1 f7       	brne	.-8      	; 0x610 <isDriverSleepingIR+0x1e>
 618:	00 c0       	rjmp	.+0      	; 0x61a <isDriverSleepingIR+0x28>
 61a:	00 00       	nop
	portHigh(PORTD,musicSystem);
}
int isDriverSleepingIR(){
	int timeInterval=40;
	int flag=0;
	for(int i=1;i<=timeInterval;i++){
 61c:	01 96       	adiw	r24, 0x01	; 1
 61e:	89 32       	cpi	r24, 0x29	; 41
 620:	91 05       	cpc	r25, r1
 622:	64 f3       	brlt	.-40     	; 0x5fc <isDriverSleepingIR+0xa>
		}else{
			flag--;
		}
		_delay_ms(50);
	}
	if(flag==timeInterval){
 624:	28 32       	cpi	r18, 0x28	; 40
 626:	31 05       	cpc	r19, r1
 628:	19 f4       	brne	.+6      	; 0x630 <isDriverSleepingIR+0x3e>
		return 1;
 62a:	81 e0       	ldi	r24, 0x01	; 1
 62c:	90 e0       	ldi	r25, 0x00	; 0
 62e:	08 95       	ret
	}else{
		return 0; 
 630:	80 e0       	ldi	r24, 0x00	; 0
 632:	90 e0       	ldi	r25, 0x00	; 0
	}
}
 634:	08 95       	ret

00000636 <main>:
#define F_CPU 8000000UL
#include "headerfiles.h"
int main(void){
	start:
	DDRD=0xE4;
 636:	84 ee       	ldi	r24, 0xE4	; 228
 638:	81 bb       	out	0x11, r24	; 17
	LCD_Init();
 63a:	0e 94 10 01 	call	0x220	; 0x220 <LCD_Init>
	ADC_Init();
 63e:	0e 94 57 01 	call	0x2ae	; 0x2ae <ADC_Init>
	I2C_Init();
 642:	0e 94 49 00 	call	0x92	; 0x92 <I2C_Init>
	PWM_init();
 646:	0e 94 df 02 	call	0x5be	; 0x5be <PWM_init>
	MPU6050_Init();
 64a:	0e 94 70 01 	call	0x2e0	; 0x2e0 <MPU6050_Init>
	LCD_Clear();
 64e:	0e 94 4a 01 	call	0x294	; 0x294 <LCD_Clear>
	LCD_String("Welcome");
 652:	80 e6       	ldi	r24, 0x60	; 96
 654:	90 e0       	ldi	r25, 0x00	; 0
 656:	0e 94 34 01 	call	0x268	; 0x268 <LCD_String>
 65a:	2f ef       	ldi	r18, 0xFF	; 255
 65c:	31 ee       	ldi	r19, 0xE1	; 225
 65e:	44 e0       	ldi	r20, 0x04	; 4
 660:	21 50       	subi	r18, 0x01	; 1
 662:	30 40       	sbci	r19, 0x00	; 0
 664:	40 40       	sbci	r20, 0x00	; 0
 666:	e1 f7       	brne	.-8      	; 0x660 <main+0x2a>
 668:	00 c0       	rjmp	.+0      	; 0x66a <main+0x34>
 66a:	00 00       	nop
	_delay_ms(200);
	float Xa,Ya,Za; // for gyroscope
	while (1){
		//flame detection
		if(pinRead(PINC,flame)==0x10){
 66c:	9c 9b       	sbis	0x13, 4	; 19
 66e:	16 c0       	rjmp	.+44     	; 0x69c <main+0x66>
			ringAlarm();
 670:	0e 94 e5 02 	call	0x5ca	; 0x5ca <ringAlarm>
			onHazardLight();
 674:	0e 94 ed 02 	call	0x5da	; 0x5da <onHazardLight>
 678:	8f ef       	ldi	r24, 0xFF	; 255
 67a:	99 e6       	ldi	r25, 0x69	; 105
 67c:	28 e1       	ldi	r18, 0x18	; 24
 67e:	81 50       	subi	r24, 0x01	; 1
 680:	90 40       	sbci	r25, 0x00	; 0
 682:	20 40       	sbci	r18, 0x00	; 0
 684:	e1 f7       	brne	.-8      	; 0x67e <main+0x48>
 686:	00 c0       	rjmp	.+0      	; 0x688 <main+0x52>
 688:	00 00       	nop
			_delay_ms(1000);
			stopAlarm();
 68a:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <stopAlarm>
			offHazardLight();
 68e:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <offHazardLight>
			LCD_String("Flame Detected !");
 692:	88 e6       	ldi	r24, 0x68	; 104
 694:	90 e0       	ldi	r25, 0x00	; 0
 696:	0e 94 34 01 	call	0x268	; 0x268 <LCD_String>
 69a:	e8 cf       	rjmp	.-48     	; 0x66c <main+0x36>
		}
		else{
			//set wheel speed vehicle
			int val=ADC_Read(0);
 69c:	80 e0       	ldi	r24, 0x00	; 0
 69e:	0e 94 5f 01 	call	0x2be	; 0x2be <ADC_Read>
			float speed=(val/1024.0)*255.0;
 6a2:	bc 01       	movw	r22, r24
 6a4:	99 0f       	add	r25, r25
 6a6:	88 0b       	sbc	r24, r24
 6a8:	99 0b       	sbc	r25, r25
 6aa:	0e 94 36 04 	call	0x86c	; 0x86c <__floatsisf>
 6ae:	20 e0       	ldi	r18, 0x00	; 0
 6b0:	30 e0       	ldi	r19, 0x00	; 0
 6b2:	40 e8       	ldi	r20, 0x80	; 128
 6b4:	5a e3       	ldi	r21, 0x3A	; 58
 6b6:	0e 94 c3 04 	call	0x986	; 0x986 <__mulsf3>
 6ba:	20 e0       	ldi	r18, 0x00	; 0
 6bc:	30 e0       	ldi	r19, 0x00	; 0
 6be:	4f e7       	ldi	r20, 0x7F	; 127
 6c0:	53 e4       	ldi	r21, 0x43	; 67
 6c2:	0e 94 c3 04 	call	0x986	; 0x986 <__mulsf3>
			OCR0=(int)speed;
 6c6:	0e 94 fe 03 	call	0x7fc	; 0x7fc <__fixsfsi>
 6ca:	6c bf       	out	0x3c, r22	; 60
			//get pressure
			int value = ADC_Read(1);
 6cc:	81 e0       	ldi	r24, 0x01	; 1
 6ce:	0e 94 5f 01 	call	0x2be	; 0x2be <ADC_Read>
			if (value > 107){// if value gt 107 vehicle is moving
 6d2:	8c 36       	cpi	r24, 0x6C	; 108
 6d4:	91 05       	cpc	r25, r1
 6d6:	54 f2       	brlt	.-108    	; 0x66c <main+0x36>
				if(pinRead(PINC,alcohol)==0x20){
 6d8:	9d 9b       	sbis	0x13, 5	; 19
 6da:	14 c0       	rjmp	.+40     	; 0x704 <main+0xce>
					LCD_Clear();
 6dc:	0e 94 4a 01 	call	0x294	; 0x294 <LCD_Clear>
					LCD_String("Alcohol Detected"); 
 6e0:	89 e7       	ldi	r24, 0x79	; 121
 6e2:	90 e0       	ldi	r25, 0x00	; 0
 6e4:	0e 94 34 01 	call	0x268	; 0x268 <LCD_String>
					ringAlarm();
 6e8:	0e 94 e5 02 	call	0x5ca	; 0x5ca <ringAlarm>
 6ec:	3f ef       	ldi	r19, 0xFF	; 255
 6ee:	49 e6       	ldi	r20, 0x69	; 105
 6f0:	88 e1       	ldi	r24, 0x18	; 24
 6f2:	31 50       	subi	r19, 0x01	; 1
 6f4:	40 40       	sbci	r20, 0x00	; 0
 6f6:	80 40       	sbci	r24, 0x00	; 0
 6f8:	e1 f7       	brne	.-8      	; 0x6f2 <main+0xbc>
 6fa:	00 c0       	rjmp	.+0      	; 0x6fc <main+0xc6>
 6fc:	00 00       	nop
					_delay_ms(1000);
					stopAlarm();
 6fe:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <stopAlarm>
 702:	b4 cf       	rjmp	.-152    	; 0x66c <main+0x36>
				}
				else{
					Read_RawValue();
 704:	0e 94 bb 01 	call	0x376	; 0x376 <Read_RawValue>
					Xa = (Acc_x/16384.0)*9.8066;
 708:	20 e0       	ldi	r18, 0x00	; 0
 70a:	30 e0       	ldi	r19, 0x00	; 0
 70c:	40 e8       	ldi	r20, 0x80	; 128
 70e:	58 e3       	ldi	r21, 0x38	; 56
 710:	60 91 a8 00 	lds	r22, 0x00A8	; 0x8000a8 <Acc_x>
 714:	70 91 a9 00 	lds	r23, 0x00A9	; 0x8000a9 <Acc_x+0x1>
 718:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <Acc_x+0x2>
 71c:	90 91 ab 00 	lds	r25, 0x00AB	; 0x8000ab <Acc_x+0x3>
 720:	0e 94 c3 04 	call	0x986	; 0x986 <__mulsf3>
 724:	25 ed       	ldi	r18, 0xD5	; 213
 726:	37 ee       	ldi	r19, 0xE7	; 231
 728:	4c e1       	ldi	r20, 0x1C	; 28
 72a:	51 e4       	ldi	r21, 0x41	; 65
 72c:	0e 94 c3 04 	call	0x986	; 0x986 <__mulsf3>
 730:	4b 01       	movw	r8, r22
 732:	5c 01       	movw	r10, r24
					Ya = (Acc_y/16384.0)*9.8066;
 734:	20 e0       	ldi	r18, 0x00	; 0
 736:	30 e0       	ldi	r19, 0x00	; 0
 738:	40 e8       	ldi	r20, 0x80	; 128
 73a:	58 e3       	ldi	r21, 0x38	; 56
 73c:	60 91 a0 00 	lds	r22, 0x00A0	; 0x8000a0 <Acc_y>
 740:	70 91 a1 00 	lds	r23, 0x00A1	; 0x8000a1 <Acc_y+0x1>
 744:	80 91 a2 00 	lds	r24, 0x00A2	; 0x8000a2 <Acc_y+0x2>
 748:	90 91 a3 00 	lds	r25, 0x00A3	; 0x8000a3 <Acc_y+0x3>
 74c:	0e 94 c3 04 	call	0x986	; 0x986 <__mulsf3>
 750:	25 ed       	ldi	r18, 0xD5	; 213
 752:	37 ee       	ldi	r19, 0xE7	; 231
 754:	4c e1       	ldi	r20, 0x1C	; 28
 756:	51 e4       	ldi	r21, 0x41	; 65
 758:	0e 94 c3 04 	call	0x986	; 0x986 <__mulsf3>
 75c:	2b 01       	movw	r4, r22
 75e:	3c 01       	movw	r6, r24
					Za = (Acc_z/16384.0)*9.8066;
 760:	20 e0       	ldi	r18, 0x00	; 0
 762:	30 e0       	ldi	r19, 0x00	; 0
 764:	40 e8       	ldi	r20, 0x80	; 128
 766:	58 e3       	ldi	r21, 0x38	; 56
 768:	60 91 94 00 	lds	r22, 0x0094	; 0x800094 <__data_end>
 76c:	70 91 95 00 	lds	r23, 0x0095	; 0x800095 <__data_end+0x1>
 770:	80 91 96 00 	lds	r24, 0x0096	; 0x800096 <__data_end+0x2>
 774:	90 91 97 00 	lds	r25, 0x0097	; 0x800097 <__data_end+0x3>
 778:	0e 94 c3 04 	call	0x986	; 0x986 <__mulsf3>
 77c:	25 ed       	ldi	r18, 0xD5	; 213
 77e:	37 ee       	ldi	r19, 0xE7	; 231
 780:	4c e1       	ldi	r20, 0x1C	; 28
 782:	51 e4       	ldi	r21, 0x41	; 65
 784:	0e 94 c3 04 	call	0x986	; 0x986 <__mulsf3>
 788:	6b 01       	movw	r12, r22
 78a:	7c 01       	movw	r14, r24
					if(isDriverSleepingIR() && isDriverSleepingGyro(Xa,Ya,Za)){
 78c:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <isDriverSleepingIR>
 790:	89 2b       	or	r24, r25
 792:	09 f4       	brne	.+2      	; 0x796 <main+0x160>
 794:	6b cf       	rjmp	.-298    	; 0x66c <main+0x36>
 796:	87 01       	movw	r16, r14
 798:	76 01       	movw	r14, r12
 79a:	a3 01       	movw	r20, r6
 79c:	92 01       	movw	r18, r4
 79e:	c5 01       	movw	r24, r10
 7a0:	b4 01       	movw	r22, r8
 7a2:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <isDriverSleepingGyro>
 7a6:	89 2b       	or	r24, r25
 7a8:	09 f4       	brne	.+2      	; 0x7ac <main+0x176>
 7aa:	60 cf       	rjmp	.-320    	; 0x66c <main+0x36>
						ringAlarm();
 7ac:	0e 94 e5 02 	call	0x5ca	; 0x5ca <ringAlarm>
						onHazardLight();
 7b0:	0e 94 ed 02 	call	0x5da	; 0x5da <onHazardLight>
						for(int i=1;i<=20;i++){
 7b4:	81 e0       	ldi	r24, 0x01	; 1
 7b6:	90 e0       	ldi	r25, 0x00	; 0
 7b8:	11 c0       	rjmp	.+34     	; 0x7dc <main+0x1a6>
							if(pinRead(PINC,3)==0x08){
 7ba:	9b 9b       	sbis	0x13, 3	; 19
 7bc:	05 c0       	rjmp	.+10     	; 0x7c8 <main+0x192>
								stopAlarm();
 7be:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <stopAlarm>
								offHazardLight();
 7c2:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <offHazardLight>
								goto start;
 7c6:	37 cf       	rjmp	.-402    	; 0x636 <main>
 7c8:	2f e7       	ldi	r18, 0x7F	; 127
 7ca:	3a e1       	ldi	r19, 0x1A	; 26
 7cc:	46 e0       	ldi	r20, 0x06	; 6
 7ce:	21 50       	subi	r18, 0x01	; 1
 7d0:	30 40       	sbci	r19, 0x00	; 0
 7d2:	40 40       	sbci	r20, 0x00	; 0
 7d4:	e1 f7       	brne	.-8      	; 0x7ce <main+0x198>
 7d6:	00 c0       	rjmp	.+0      	; 0x7d8 <main+0x1a2>
 7d8:	00 00       	nop
					Ya = (Acc_y/16384.0)*9.8066;
					Za = (Acc_z/16384.0)*9.8066;
					if(isDriverSleepingIR() && isDriverSleepingGyro(Xa,Ya,Za)){
						ringAlarm();
						onHazardLight();
						for(int i=1;i<=20;i++){
 7da:	01 96       	adiw	r24, 0x01	; 1
 7dc:	85 31       	cpi	r24, 0x15	; 21
 7de:	91 05       	cpc	r25, r1
 7e0:	64 f3       	brlt	.-40     	; 0x7ba <main+0x184>
								offHazardLight();
								goto start;
							}
							_delay_ms(250);
						}
						LCD_String("Sleeping");
 7e2:	8a e8       	ldi	r24, 0x8A	; 138
 7e4:	90 e0       	ldi	r25, 0x00	; 0
 7e6:	0e 94 34 01 	call	0x268	; 0x268 <LCD_String>
						playRadio();
 7ea:	0e 94 f5 02 	call	0x5ea	; 0x5ea <playRadio>
						//reduce speed of the vehicle
						OCR0=0;
 7ee:	1c be       	out	0x3c, r1	; 60
 7f0:	ff cf       	rjmp	.-2      	; 0x7f0 <main+0x1ba>

000007f2 <__cmpsf2>:
 7f2:	0e 94 71 04 	call	0x8e2	; 0x8e2 <__fp_cmp>
 7f6:	08 f4       	brcc	.+2      	; 0x7fa <__cmpsf2+0x8>
 7f8:	81 e0       	ldi	r24, 0x01	; 1
 7fa:	08 95       	ret

000007fc <__fixsfsi>:
 7fc:	0e 94 05 04 	call	0x80a	; 0x80a <__fixunssfsi>
 800:	68 94       	set
 802:	b1 11       	cpse	r27, r1
 804:	0c 94 b8 04 	jmp	0x970	; 0x970 <__fp_szero>
 808:	08 95       	ret

0000080a <__fixunssfsi>:
 80a:	0e 94 9d 04 	call	0x93a	; 0x93a <__fp_splitA>
 80e:	88 f0       	brcs	.+34     	; 0x832 <__fixunssfsi+0x28>
 810:	9f 57       	subi	r25, 0x7F	; 127
 812:	98 f0       	brcs	.+38     	; 0x83a <__fixunssfsi+0x30>
 814:	b9 2f       	mov	r27, r25
 816:	99 27       	eor	r25, r25
 818:	b7 51       	subi	r27, 0x17	; 23
 81a:	b0 f0       	brcs	.+44     	; 0x848 <__fixunssfsi+0x3e>
 81c:	e1 f0       	breq	.+56     	; 0x856 <__fixunssfsi+0x4c>
 81e:	66 0f       	add	r22, r22
 820:	77 1f       	adc	r23, r23
 822:	88 1f       	adc	r24, r24
 824:	99 1f       	adc	r25, r25
 826:	1a f0       	brmi	.+6      	; 0x82e <__fixunssfsi+0x24>
 828:	ba 95       	dec	r27
 82a:	c9 f7       	brne	.-14     	; 0x81e <__fixunssfsi+0x14>
 82c:	14 c0       	rjmp	.+40     	; 0x856 <__fixunssfsi+0x4c>
 82e:	b1 30       	cpi	r27, 0x01	; 1
 830:	91 f0       	breq	.+36     	; 0x856 <__fixunssfsi+0x4c>
 832:	0e 94 b7 04 	call	0x96e	; 0x96e <__fp_zero>
 836:	b1 e0       	ldi	r27, 0x01	; 1
 838:	08 95       	ret
 83a:	0c 94 b7 04 	jmp	0x96e	; 0x96e <__fp_zero>
 83e:	67 2f       	mov	r22, r23
 840:	78 2f       	mov	r23, r24
 842:	88 27       	eor	r24, r24
 844:	b8 5f       	subi	r27, 0xF8	; 248
 846:	39 f0       	breq	.+14     	; 0x856 <__fixunssfsi+0x4c>
 848:	b9 3f       	cpi	r27, 0xF9	; 249
 84a:	cc f3       	brlt	.-14     	; 0x83e <__fixunssfsi+0x34>
 84c:	86 95       	lsr	r24
 84e:	77 95       	ror	r23
 850:	67 95       	ror	r22
 852:	b3 95       	inc	r27
 854:	d9 f7       	brne	.-10     	; 0x84c <__fixunssfsi+0x42>
 856:	3e f4       	brtc	.+14     	; 0x866 <__stack+0x7>
 858:	90 95       	com	r25
 85a:	80 95       	com	r24
 85c:	70 95       	com	r23
 85e:	61 95       	neg	r22
 860:	7f 4f       	sbci	r23, 0xFF	; 255
 862:	8f 4f       	sbci	r24, 0xFF	; 255
 864:	9f 4f       	sbci	r25, 0xFF	; 255
 866:	08 95       	ret

00000868 <__floatunsisf>:
 868:	e8 94       	clt
 86a:	09 c0       	rjmp	.+18     	; 0x87e <__floatsisf+0x12>

0000086c <__floatsisf>:
 86c:	97 fb       	bst	r25, 7
 86e:	3e f4       	brtc	.+14     	; 0x87e <__floatsisf+0x12>
 870:	90 95       	com	r25
 872:	80 95       	com	r24
 874:	70 95       	com	r23
 876:	61 95       	neg	r22
 878:	7f 4f       	sbci	r23, 0xFF	; 255
 87a:	8f 4f       	sbci	r24, 0xFF	; 255
 87c:	9f 4f       	sbci	r25, 0xFF	; 255
 87e:	99 23       	and	r25, r25
 880:	a9 f0       	breq	.+42     	; 0x8ac <__floatsisf+0x40>
 882:	f9 2f       	mov	r31, r25
 884:	96 e9       	ldi	r25, 0x96	; 150
 886:	bb 27       	eor	r27, r27
 888:	93 95       	inc	r25
 88a:	f6 95       	lsr	r31
 88c:	87 95       	ror	r24
 88e:	77 95       	ror	r23
 890:	67 95       	ror	r22
 892:	b7 95       	ror	r27
 894:	f1 11       	cpse	r31, r1
 896:	f8 cf       	rjmp	.-16     	; 0x888 <__floatsisf+0x1c>
 898:	fa f4       	brpl	.+62     	; 0x8d8 <__floatsisf+0x6c>
 89a:	bb 0f       	add	r27, r27
 89c:	11 f4       	brne	.+4      	; 0x8a2 <__floatsisf+0x36>
 89e:	60 ff       	sbrs	r22, 0
 8a0:	1b c0       	rjmp	.+54     	; 0x8d8 <__floatsisf+0x6c>
 8a2:	6f 5f       	subi	r22, 0xFF	; 255
 8a4:	7f 4f       	sbci	r23, 0xFF	; 255
 8a6:	8f 4f       	sbci	r24, 0xFF	; 255
 8a8:	9f 4f       	sbci	r25, 0xFF	; 255
 8aa:	16 c0       	rjmp	.+44     	; 0x8d8 <__floatsisf+0x6c>
 8ac:	88 23       	and	r24, r24
 8ae:	11 f0       	breq	.+4      	; 0x8b4 <__floatsisf+0x48>
 8b0:	96 e9       	ldi	r25, 0x96	; 150
 8b2:	11 c0       	rjmp	.+34     	; 0x8d6 <__floatsisf+0x6a>
 8b4:	77 23       	and	r23, r23
 8b6:	21 f0       	breq	.+8      	; 0x8c0 <__floatsisf+0x54>
 8b8:	9e e8       	ldi	r25, 0x8E	; 142
 8ba:	87 2f       	mov	r24, r23
 8bc:	76 2f       	mov	r23, r22
 8be:	05 c0       	rjmp	.+10     	; 0x8ca <__floatsisf+0x5e>
 8c0:	66 23       	and	r22, r22
 8c2:	71 f0       	breq	.+28     	; 0x8e0 <__floatsisf+0x74>
 8c4:	96 e8       	ldi	r25, 0x86	; 134
 8c6:	86 2f       	mov	r24, r22
 8c8:	70 e0       	ldi	r23, 0x00	; 0
 8ca:	60 e0       	ldi	r22, 0x00	; 0
 8cc:	2a f0       	brmi	.+10     	; 0x8d8 <__floatsisf+0x6c>
 8ce:	9a 95       	dec	r25
 8d0:	66 0f       	add	r22, r22
 8d2:	77 1f       	adc	r23, r23
 8d4:	88 1f       	adc	r24, r24
 8d6:	da f7       	brpl	.-10     	; 0x8ce <__floatsisf+0x62>
 8d8:	88 0f       	add	r24, r24
 8da:	96 95       	lsr	r25
 8dc:	87 95       	ror	r24
 8de:	97 f9       	bld	r25, 7
 8e0:	08 95       	ret

000008e2 <__fp_cmp>:
 8e2:	99 0f       	add	r25, r25
 8e4:	00 08       	sbc	r0, r0
 8e6:	55 0f       	add	r21, r21
 8e8:	aa 0b       	sbc	r26, r26
 8ea:	e0 e8       	ldi	r30, 0x80	; 128
 8ec:	fe ef       	ldi	r31, 0xFE	; 254
 8ee:	16 16       	cp	r1, r22
 8f0:	17 06       	cpc	r1, r23
 8f2:	e8 07       	cpc	r30, r24
 8f4:	f9 07       	cpc	r31, r25
 8f6:	c0 f0       	brcs	.+48     	; 0x928 <__fp_cmp+0x46>
 8f8:	12 16       	cp	r1, r18
 8fa:	13 06       	cpc	r1, r19
 8fc:	e4 07       	cpc	r30, r20
 8fe:	f5 07       	cpc	r31, r21
 900:	98 f0       	brcs	.+38     	; 0x928 <__fp_cmp+0x46>
 902:	62 1b       	sub	r22, r18
 904:	73 0b       	sbc	r23, r19
 906:	84 0b       	sbc	r24, r20
 908:	95 0b       	sbc	r25, r21
 90a:	39 f4       	brne	.+14     	; 0x91a <__fp_cmp+0x38>
 90c:	0a 26       	eor	r0, r26
 90e:	61 f0       	breq	.+24     	; 0x928 <__fp_cmp+0x46>
 910:	23 2b       	or	r18, r19
 912:	24 2b       	or	r18, r20
 914:	25 2b       	or	r18, r21
 916:	21 f4       	brne	.+8      	; 0x920 <__fp_cmp+0x3e>
 918:	08 95       	ret
 91a:	0a 26       	eor	r0, r26
 91c:	09 f4       	brne	.+2      	; 0x920 <__fp_cmp+0x3e>
 91e:	a1 40       	sbci	r26, 0x01	; 1
 920:	a6 95       	lsr	r26
 922:	8f ef       	ldi	r24, 0xFF	; 255
 924:	81 1d       	adc	r24, r1
 926:	81 1d       	adc	r24, r1
 928:	08 95       	ret

0000092a <__fp_split3>:
 92a:	57 fd       	sbrc	r21, 7
 92c:	90 58       	subi	r25, 0x80	; 128
 92e:	44 0f       	add	r20, r20
 930:	55 1f       	adc	r21, r21
 932:	59 f0       	breq	.+22     	; 0x94a <__fp_splitA+0x10>
 934:	5f 3f       	cpi	r21, 0xFF	; 255
 936:	71 f0       	breq	.+28     	; 0x954 <__fp_splitA+0x1a>
 938:	47 95       	ror	r20

0000093a <__fp_splitA>:
 93a:	88 0f       	add	r24, r24
 93c:	97 fb       	bst	r25, 7
 93e:	99 1f       	adc	r25, r25
 940:	61 f0       	breq	.+24     	; 0x95a <__fp_splitA+0x20>
 942:	9f 3f       	cpi	r25, 0xFF	; 255
 944:	79 f0       	breq	.+30     	; 0x964 <__fp_splitA+0x2a>
 946:	87 95       	ror	r24
 948:	08 95       	ret
 94a:	12 16       	cp	r1, r18
 94c:	13 06       	cpc	r1, r19
 94e:	14 06       	cpc	r1, r20
 950:	55 1f       	adc	r21, r21
 952:	f2 cf       	rjmp	.-28     	; 0x938 <__fp_split3+0xe>
 954:	46 95       	lsr	r20
 956:	f1 df       	rcall	.-30     	; 0x93a <__fp_splitA>
 958:	08 c0       	rjmp	.+16     	; 0x96a <__fp_splitA+0x30>
 95a:	16 16       	cp	r1, r22
 95c:	17 06       	cpc	r1, r23
 95e:	18 06       	cpc	r1, r24
 960:	99 1f       	adc	r25, r25
 962:	f1 cf       	rjmp	.-30     	; 0x946 <__fp_splitA+0xc>
 964:	86 95       	lsr	r24
 966:	71 05       	cpc	r23, r1
 968:	61 05       	cpc	r22, r1
 96a:	08 94       	sec
 96c:	08 95       	ret

0000096e <__fp_zero>:
 96e:	e8 94       	clt

00000970 <__fp_szero>:
 970:	bb 27       	eor	r27, r27
 972:	66 27       	eor	r22, r22
 974:	77 27       	eor	r23, r23
 976:	cb 01       	movw	r24, r22
 978:	97 f9       	bld	r25, 7
 97a:	08 95       	ret

0000097c <__gesf2>:
 97c:	0e 94 71 04 	call	0x8e2	; 0x8e2 <__fp_cmp>
 980:	08 f4       	brcc	.+2      	; 0x984 <__gesf2+0x8>
 982:	8f ef       	ldi	r24, 0xFF	; 255
 984:	08 95       	ret

00000986 <__mulsf3>:
 986:	0e 94 d6 04 	call	0x9ac	; 0x9ac <__mulsf3x>
 98a:	0c 94 47 05 	jmp	0xa8e	; 0xa8e <__fp_round>
 98e:	0e 94 39 05 	call	0xa72	; 0xa72 <__fp_pscA>
 992:	38 f0       	brcs	.+14     	; 0x9a2 <__mulsf3+0x1c>
 994:	0e 94 40 05 	call	0xa80	; 0xa80 <__fp_pscB>
 998:	20 f0       	brcs	.+8      	; 0x9a2 <__mulsf3+0x1c>
 99a:	95 23       	and	r25, r21
 99c:	11 f0       	breq	.+4      	; 0x9a2 <__mulsf3+0x1c>
 99e:	0c 94 30 05 	jmp	0xa60	; 0xa60 <__fp_inf>
 9a2:	0c 94 36 05 	jmp	0xa6c	; 0xa6c <__fp_nan>
 9a6:	11 24       	eor	r1, r1
 9a8:	0c 94 b8 04 	jmp	0x970	; 0x970 <__fp_szero>

000009ac <__mulsf3x>:
 9ac:	0e 94 95 04 	call	0x92a	; 0x92a <__fp_split3>
 9b0:	70 f3       	brcs	.-36     	; 0x98e <__mulsf3+0x8>

000009b2 <__mulsf3_pse>:
 9b2:	95 9f       	mul	r25, r21
 9b4:	c1 f3       	breq	.-16     	; 0x9a6 <__mulsf3+0x20>
 9b6:	95 0f       	add	r25, r21
 9b8:	50 e0       	ldi	r21, 0x00	; 0
 9ba:	55 1f       	adc	r21, r21
 9bc:	62 9f       	mul	r22, r18
 9be:	f0 01       	movw	r30, r0
 9c0:	72 9f       	mul	r23, r18
 9c2:	bb 27       	eor	r27, r27
 9c4:	f0 0d       	add	r31, r0
 9c6:	b1 1d       	adc	r27, r1
 9c8:	63 9f       	mul	r22, r19
 9ca:	aa 27       	eor	r26, r26
 9cc:	f0 0d       	add	r31, r0
 9ce:	b1 1d       	adc	r27, r1
 9d0:	aa 1f       	adc	r26, r26
 9d2:	64 9f       	mul	r22, r20
 9d4:	66 27       	eor	r22, r22
 9d6:	b0 0d       	add	r27, r0
 9d8:	a1 1d       	adc	r26, r1
 9da:	66 1f       	adc	r22, r22
 9dc:	82 9f       	mul	r24, r18
 9de:	22 27       	eor	r18, r18
 9e0:	b0 0d       	add	r27, r0
 9e2:	a1 1d       	adc	r26, r1
 9e4:	62 1f       	adc	r22, r18
 9e6:	73 9f       	mul	r23, r19
 9e8:	b0 0d       	add	r27, r0
 9ea:	a1 1d       	adc	r26, r1
 9ec:	62 1f       	adc	r22, r18
 9ee:	83 9f       	mul	r24, r19
 9f0:	a0 0d       	add	r26, r0
 9f2:	61 1d       	adc	r22, r1
 9f4:	22 1f       	adc	r18, r18
 9f6:	74 9f       	mul	r23, r20
 9f8:	33 27       	eor	r19, r19
 9fa:	a0 0d       	add	r26, r0
 9fc:	61 1d       	adc	r22, r1
 9fe:	23 1f       	adc	r18, r19
 a00:	84 9f       	mul	r24, r20
 a02:	60 0d       	add	r22, r0
 a04:	21 1d       	adc	r18, r1
 a06:	82 2f       	mov	r24, r18
 a08:	76 2f       	mov	r23, r22
 a0a:	6a 2f       	mov	r22, r26
 a0c:	11 24       	eor	r1, r1
 a0e:	9f 57       	subi	r25, 0x7F	; 127
 a10:	50 40       	sbci	r21, 0x00	; 0
 a12:	9a f0       	brmi	.+38     	; 0xa3a <__mulsf3_pse+0x88>
 a14:	f1 f0       	breq	.+60     	; 0xa52 <__mulsf3_pse+0xa0>
 a16:	88 23       	and	r24, r24
 a18:	4a f0       	brmi	.+18     	; 0xa2c <__mulsf3_pse+0x7a>
 a1a:	ee 0f       	add	r30, r30
 a1c:	ff 1f       	adc	r31, r31
 a1e:	bb 1f       	adc	r27, r27
 a20:	66 1f       	adc	r22, r22
 a22:	77 1f       	adc	r23, r23
 a24:	88 1f       	adc	r24, r24
 a26:	91 50       	subi	r25, 0x01	; 1
 a28:	50 40       	sbci	r21, 0x00	; 0
 a2a:	a9 f7       	brne	.-22     	; 0xa16 <__mulsf3_pse+0x64>
 a2c:	9e 3f       	cpi	r25, 0xFE	; 254
 a2e:	51 05       	cpc	r21, r1
 a30:	80 f0       	brcs	.+32     	; 0xa52 <__mulsf3_pse+0xa0>
 a32:	0c 94 30 05 	jmp	0xa60	; 0xa60 <__fp_inf>
 a36:	0c 94 b8 04 	jmp	0x970	; 0x970 <__fp_szero>
 a3a:	5f 3f       	cpi	r21, 0xFF	; 255
 a3c:	e4 f3       	brlt	.-8      	; 0xa36 <__mulsf3_pse+0x84>
 a3e:	98 3e       	cpi	r25, 0xE8	; 232
 a40:	d4 f3       	brlt	.-12     	; 0xa36 <__mulsf3_pse+0x84>
 a42:	86 95       	lsr	r24
 a44:	77 95       	ror	r23
 a46:	67 95       	ror	r22
 a48:	b7 95       	ror	r27
 a4a:	f7 95       	ror	r31
 a4c:	e7 95       	ror	r30
 a4e:	9f 5f       	subi	r25, 0xFF	; 255
 a50:	c1 f7       	brne	.-16     	; 0xa42 <__mulsf3_pse+0x90>
 a52:	fe 2b       	or	r31, r30
 a54:	88 0f       	add	r24, r24
 a56:	91 1d       	adc	r25, r1
 a58:	96 95       	lsr	r25
 a5a:	87 95       	ror	r24
 a5c:	97 f9       	bld	r25, 7
 a5e:	08 95       	ret

00000a60 <__fp_inf>:
 a60:	97 f9       	bld	r25, 7
 a62:	9f 67       	ori	r25, 0x7F	; 127
 a64:	80 e8       	ldi	r24, 0x80	; 128
 a66:	70 e0       	ldi	r23, 0x00	; 0
 a68:	60 e0       	ldi	r22, 0x00	; 0
 a6a:	08 95       	ret

00000a6c <__fp_nan>:
 a6c:	9f ef       	ldi	r25, 0xFF	; 255
 a6e:	80 ec       	ldi	r24, 0xC0	; 192
 a70:	08 95       	ret

00000a72 <__fp_pscA>:
 a72:	00 24       	eor	r0, r0
 a74:	0a 94       	dec	r0
 a76:	16 16       	cp	r1, r22
 a78:	17 06       	cpc	r1, r23
 a7a:	18 06       	cpc	r1, r24
 a7c:	09 06       	cpc	r0, r25
 a7e:	08 95       	ret

00000a80 <__fp_pscB>:
 a80:	00 24       	eor	r0, r0
 a82:	0a 94       	dec	r0
 a84:	12 16       	cp	r1, r18
 a86:	13 06       	cpc	r1, r19
 a88:	14 06       	cpc	r1, r20
 a8a:	05 06       	cpc	r0, r21
 a8c:	08 95       	ret

00000a8e <__fp_round>:
 a8e:	09 2e       	mov	r0, r25
 a90:	03 94       	inc	r0
 a92:	00 0c       	add	r0, r0
 a94:	11 f4       	brne	.+4      	; 0xa9a <__fp_round+0xc>
 a96:	88 23       	and	r24, r24
 a98:	52 f0       	brmi	.+20     	; 0xaae <__fp_round+0x20>
 a9a:	bb 0f       	add	r27, r27
 a9c:	40 f4       	brcc	.+16     	; 0xaae <__fp_round+0x20>
 a9e:	bf 2b       	or	r27, r31
 aa0:	11 f4       	brne	.+4      	; 0xaa6 <__fp_round+0x18>
 aa2:	60 ff       	sbrs	r22, 0
 aa4:	04 c0       	rjmp	.+8      	; 0xaae <__fp_round+0x20>
 aa6:	6f 5f       	subi	r22, 0xFF	; 255
 aa8:	7f 4f       	sbci	r23, 0xFF	; 255
 aaa:	8f 4f       	sbci	r24, 0xFF	; 255
 aac:	9f 4f       	sbci	r25, 0xFF	; 255
 aae:	08 95       	ret

00000ab0 <_exit>:
 ab0:	f8 94       	cli

00000ab2 <__stop_program>:
 ab2:	ff cf       	rjmp	.-2      	; 0xab2 <__stop_program>
